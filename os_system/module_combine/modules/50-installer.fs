{"backend":{"files":{"apps":{"installer.js":"abe1fe105a3e4b2d03a31adb182bce601da4f55119571214329fd0abf011c3882030025778780b8c2fe41eb5cb570669b6a01a540d8aa6099eb7ac243a48269e"},"etc":{"unattended.json.example":"6a5909332e25e73cee85be0e945872c8570c4a2156eccc1631bbb0b91b49b39919dba49e8d95863fde286619e0027f8e0803e6152f2c30811e2fc5d6d3bf48ff"}},"permissions":{"apps/installer.js":{"world":"rx"},"apps/":{"world":"rx"},"etc/unattended.json.example":{"world":"rx"},"etc/":{"world":"rx"},"":{"world":"rx"}}},"files":{"abe1fe105a3e4b2d03a31adb182bce601da4f55119571214329fd0abf011c3882030025778780b8c2fe41eb5cb570669b6a01a540d8aa6099eb7ac243a48269e":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_THEME, GET_BUILD, RUN_KLVL_CODE, LLDISK_WRITE, LLDISK_READ, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, FS_REMOVE, FS_LIST_PARTITIONS, SYSTEM_SHUTDOWN, FS_CHANGE_PERMISSION, LLDISK_LIST_PARTITIONS, FS_MOUNT, CSP_OPERATIONS, LLDISK_INIT_PARTITIONS, IPC_SEND_PIPE, GET_SERVER_URL, SET_USER_INFO, SET_DEFAULT_SYSTEM, RESOLVE_NAME, CONNFUL_CONNECT, CONNFUL_DISCONNECT, CONNFUL_WRITE, CONNFUL_READ, CONNFUL_ADDRESS_GET, CONNFUL_IDENTITY_GET, RELOAD_NETWORK_CONFIG, FETCH_SEND\n// signature: 39cb20a596e9f598931f4381b8efdb3a9c924ef2570727e949bea536c314d1577620a499e87d416a70d23cda5bf23e1572c04d227184e8d43e03368bfbb7d102\n// =====END MANIFEST=====\nlet onClose = () => availableAPIs.terminate();\n(async function() {\n\t// @pcos-app-mode isolatable\n\tlet networkDefaultURL = new URL(await availableAPIs.runningServer());\n\tnetworkDefaultURL.protocol = \"ws\" + (networkDefaultURL.protocol == \"https:\" ? \"s\" : \"\") + \":\";\n\tnetworkDefaultURL.pathname = \"\";\n\tconst networkSymbols = \"abcdefghijklmnopqrstuvwxyz0123456789_-\";\n\tlet automatic_configuration = {\n\t\t/* startInstall: true,\n\t\tacceptEULA: true,\n\t\tpartitioning: {\n\t\t\tdata: \"data\",\n\t\t\tboot: \"boot\",\n\t\t\tformat: true,\n\t\t\tautoInitNewInstalls: true\n\t\t},\n\t\tautoRestart: \"kexec\",\n\t\tdefaultLocale: \"en\",\n\t\textraModules: [ \"50-arcadeBreakout.fs\" ], */\n\t\tsecondstage: {\n\t\t\tnoReconfiguring: true,\n\t\t\tcreateAccount: {\n\t\t\t\t/*password: \"password\",\n\t\t\t\tdarkMode: true,\n\t\t\t\tcreate: true,*/\n\t\t\t\tusername: \"root\",\n\t\t\t\tlockUsername: true,\n\t\t\t\tonlyOnNewInstall: true\n\t\t\t},\n\t\t\tappHarden: {\n\t\t\t\trequireSignature: true,\n\t\t\t\trequireAllowlist: true\n\t\t\t},\n\t\t\tnetwork: {\n\t\t\t\turl: networkDefaultURL.toString(),\n\t\t\t\tucBits: 1,\n\t\t\t\thostname: new Array(16).fill(0).map(a => networkSymbols[Math.floor(Math.random() * networkSymbols.length)]).join(\"\"),\n\t\t\t\tupdates: \"pcosserver.pc\"\n\t\t\t},\n\t\t\treconnectToNetwork: false\n\t\t}\n\t};\n\ttry {\n\t\tautomatic_configuration = JSON.parse(await availableAPIs.fs_read({ path: (await availableAPIs.getSystemMount()) + \"/etc/unattended.json\" }));\n\t} catch {}\n\tdocument.body.style.fontFamily = \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\";\n\tif (await availableAPIs.isDarkThemed()) document.body.style.color = \"white\";\n\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"INSTALL_PCOS\"));\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"GET_BUILD\", \"RUN_KLVL_CODE\", \"LLDISK_WRITE\", \"LLDISK_READ\", \"FS_READ\", \"FS_WRITE\", \"FS_BYPASS_PERMISSIONS\", \"FS_REMOVE\", \"FS_LIST_PARTITIONS\", \"SYSTEM_SHUTDOWN\", \"FS_CHANGE_PERMISSION\", \"LLDISK_LIST_PARTITIONS\", \"FS_MOUNT\", \"CSP_OPERATIONS\", \"LLDISK_INIT_PARTITIONS\", \"GET_SERVER_URL\", \"RELOAD_NETWORK_CONFIG\", \"FETCH_SEND\" ];\n\tif (!checklist.every(p => privileges.includes(p))) return availableAPIs.terminate();\n\ttry {\n\t\tautomatic_configuration = JSON.parse(new TextDecoder().decode((await availableAPIs.fetchSend({\n\t\t\turl: \"https://pcos-autoconf.internal/installer\",\n\t\t\tinit: {}\n\t\t})).arrayBuffer));\n\t} catch {\n\t\ttry {\n\t\t\tautomatic_configuration = JSON.parse(new TextDecoder().decode((await availableAPIs.fetchSend({\n\t\t\t\turl: \"http://pcos-autoconf.internal/installer\",\n\t\t\t\tinit: {}\n\t\t\t})).arrayBuffer));\n\t\t} catch {}\n\t}\n\ttry {\n\t\tif (automatic_configuration.secondstage.network && automatic_configuration.secondstage.reconnectToNetwork) {\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/network.json\",\n\t\t\t\tdata: JSON.stringify(automatic_configuration.secondstage.network)\n\t\t\t});\n\t\t\tawait availableAPIs.reloadNetworkConfig();\n\t\t}\n\t} catch {}\n\tlet installed_modules = [\n\t\t\"50-bootable.fs\", \"50-core.fs\", \"50-diff.fs\", \"00-keys.fs\", \"50-pcos-icons.fs\", \"50-pcos-sounds.fs\", \"50-pcos-wallpapers.fs\", \"50-sysadmin.fs\",\n\t\t\"50-terminal-disks.fs\", \"50-terminal-network.fs\", \"50-terminal-users.fs\", \"50-terminal.fs\", \"50-tweetnacl.fs\", \"50-xterm.fs\", \"50-blogBrowser.fs\",\n\t\t\"50-calculator.fs\", \"50-crypto-tools.fs\", \"50-multimedia.fs\"\n\t];\n\tif (automatic_configuration.extraModules) installed_modules.push(...automatic_configuration.extraModules);\n\tlet downloadFromBdpOnMissing = new URL(\"bdp://localhost\");\n\tdownloadFromBdpOnMissing.hostname = automatic_configuration.secondstage.network.updates;\n\tawait availableAPIs.closeability(false);\n\tawait new Promise(async function(resolve) {\n\t\tlet locales = await availableAPIs.installedLocales();\n\t\tlet localeSelect = document.createElement(\"select\");\n\t\tlet localeZero = document.createElement(\"option\");\n\t\tlocaleZero.value = \"\";\n\t\tlocaleZero.innerText = \" üåê Language üåê \";\n\t\tlocaleZero.selected = true;\n\t\tlocaleZero.disabled = true;\n\t\tlocaleZero.hidden = true;\n\t\tlocaleSelect.appendChild(localeZero);\n\t\tfor (let locale of locales) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = locale;\n\t\t\toption.innerText = await availableAPIs.lookupOtherLocale({ key: \"LOCALE_NAME\", locale });\n\t\t\tlocaleSelect.appendChild(option);\n\t\t}\n\t\tlocaleSelect.addEventListener(\"change\", async function() {\n\t\t\tawait availableAPIs.runKlvlCode(\"modules.locales.defaultLocale = \" + JSON.stringify(localeSelect.value));\n\t\t\tinstalled_modules.push(\"50-locale-\" + localeSelect.value + \".fs\");\n\t\t\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"INSTALL_PCOS\"));\n\t\t\tlocaleSelect.remove();\n\t\t\tawait availableAPIs.closeability(true);\n\t\t\tresolve();\n\t\t});\n\t\tif (automatic_configuration.defaultLocale) {\n\t\t\tlocaleSelect.value = automatic_configuration.defaultLocale;\n\t\t\tlocaleSelect.dispatchEvent(new Event(\"change\"));\n\t\t}\n\t\tdocument.body.appendChild(localeSelect);\n\t});\n\tif (exec_args[0]) onClose = async function() {\n\t\tmainInstallerContent.hidden = true;\n\t\tcloseContent.hidden = false;\n\t\tawait availableAPIs.closeability(false);\n\t}\n\tconst licenseText = `Copyright (c) 2024 PCsoft\nOriginal Source Code Repository: https://github.com/PC-trollbox/pcos3\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n---\nUsed libraries:\n\txterm.js:\n\t\tCopyright (c) 2017-2022, The xterm.js authors (https://github.com/xtermjs/xterm.js/graphs/contributors) (MIT License)\n\t\tCopyright (c) 2014-2017, SourceLair, Private Company (www.sourcelair.com) (MIT License)\n\t\tCopyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n\ttweetnacl.js:\n\t\tPublic domain, https://github.com/dchest/tweetnacl-js\n\tfast-myers-diff (minified and modified):\n\t\tCopyright 2021 Logan R. Kearsley (https://github.com/gliese1337/fast-myers-diff)`;\n\tlet mainInstallerContent = document.createElement(\"div\");\n\tlet closeContent = document.createElement(\"div\");\n\tlet header = document.createElement(\"b\");\n\tlet postHeader = document.createElement(\"br\");\n\tlet description = document.createElement(\"span\");\n\tlet content = document.createElement(\"div\");\n\tlet button = document.createElement(\"button\");\n\tlet liveButton = document.createElement(\"button\");\n\tlet confirmDescription = document.createElement(\"p\");\n\tlet buttonYes = document.createElement(\"button\");\n\tlet buttonNo = document.createElement(\"button\");\n\n\tcloseContent.hidden = true;\n\n\tmainInstallerContent.style = \"position: absolute; top: 0; left: 0; width: 100%; height: 100%; padding: 8px; box-sizing: border-box;\";\n\tcloseContent.style = \"position: absolute; top: 0; left: 0; width: 100%; height: 100%; padding: 8px; box-sizing: border-box;\";\n\n\tconfirmDescription.innerText = await availableAPIs.lookupLocale(\"CLOSE_INSTALLER_CONFIRMATION\");\n\tbuttonYes.innerText = await availableAPIs.lookupLocale(\"YES\");\n\tbuttonNo.innerText = await availableAPIs.lookupLocale(\"NO\");\n\theader.innerText = await availableAPIs.lookupLocale(\"INSTALLER_TITLE\");\n\tdescription.innerText = (await availableAPIs.lookupLocale(\"INSTALLER_INVITATION\")).replace(\"%s\", await availableAPIs.getVersion());\n\tbutton.innerText = await availableAPIs.lookupLocale(\"INSTALL_BUTTON\");\n\tliveButton.innerText = await availableAPIs.lookupLocale(\"LIVE_BUTTON\");\n\n\tmainInstallerContent.appendChild(header);\n\tmainInstallerContent.appendChild(postHeader);\n\tmainInstallerContent.appendChild(description);\n\tmainInstallerContent.appendChild(content);\n\tmainInstallerContent.appendChild(button);\n\tmainInstallerContent.appendChild(document.createElement(\"br\"));\n\tif (exec_args[0]) mainInstallerContent.appendChild(liveButton);\n\n\tcloseContent.appendChild(confirmDescription);\n\tcloseContent.appendChild(buttonYes);\n\tcloseContent.insertAdjacentText(\"beforeend\", \" \");\n\tcloseContent.appendChild(buttonNo);\n\n\tdocument.body.appendChild(mainInstallerContent);\n\tdocument.body.appendChild(closeContent);\n\n\tbuttonNo.onclick = async function() {\n\t\tmainInstallerContent.hidden = false;\n\t\tcloseContent.hidden = true;\n\t\tawait availableAPIs.closeability(true);\n\t}\n\tbuttonYes.onclick = function() {\n\t\tonClose = () => availableAPIs.terminate();\n\t\tavailableAPIs.shutdown({\n\t\t\tisReboot: true\n\t\t});\n\t}\n\n\tbutton.onclick = async function() {\n\t\theader.remove();\n\t\tpostHeader.remove();\n\t\tliveButton.remove();\n\t\tcontent.innerHTML = \"\";\n\t\tdescription.innerText = await availableAPIs.lookupLocale(\"RIGHT_REVIEW\");\n\t\tlet textareaLicense = document.createElement(\"textarea\");\n\t\ttextareaLicense.readOnly = true;\n\t\ttextareaLicense.style.width = \"100%\";\n\t\ttextareaLicense.style.height = \"100%\";\n\t\tcontent.style.height = \"100%\";\n\t\ttextareaLicense.value = licenseText;\n\t\tcontent.appendChild(textareaLicense);\n\t\tbutton.innerText = await availableAPIs.lookupLocale(\"RIGHT_REVIEW_BTN\");\n\t\tbutton.onclick = async function() {\n\t\t\tcontent.innerHTML = \"\";\n\t\t\tcontent.style.height = \"\";\n\t\t\tdescription.innerText = await availableAPIs.lookupLocale(\"INSTALLER_PARTITIONING\");\n\t\t\tbutton.innerText = await availableAPIs.lookupLocale(\"PARTITIONING_USE\");\n\t\t\tlet partitionDataInput = document.createElement(\"input\");\n\t\t\tlet partitionDataFormat = document.createElement(\"button\");\n\t\t\tlet partitionBootInput = document.createElement(\"input\");\n\t\t\tpartitionDataInput.placeholder = await availableAPIs.lookupLocale(\"PARTITION_DATA\");\n\t\t\tpartitionDataFormat.innerText = await availableAPIs.lookupLocale(\"FORMAT_DATA\");\n\t\t\tpartitionBootInput.placeholder = await availableAPIs.lookupLocale(\"PARTITION_BOOT\");\n\t\t\tpartitionDataInput.value = \"data\";\n\t\t\tpartitionBootInput.value = \"boot\";\n\t\t\tcontent.appendChild(partitionDataInput);\n\t\t\tcontent.insertAdjacentText(\"beforeend\", \" \");\n\t\t\tcontent.appendChild(partitionDataFormat);\n\t\t\tcontent.appendChild(document.createElement(\"br\"));\n\t\t\tcontent.appendChild(partitionBootInput);\n\t\t\tlet initSyncEnd;\n\t\t\tlet initSync = new Promise(_ => initSyncEnd = _);\n\t\t\tpartitionDataFormat.onclick = async function() {\n\t\t\t\tif (!partitionDataInput.value) return await htmlAlert(await availableAPIs.lookupLocale(\"DATA_INPUT_ALERT\"));\n\t\t\t\tlet newInstall = false;\n\t\t\t\ttry {\n\t\t\t\t\tawait availableAPIs.lldaList();\n\t\t\t\t} catch {\n\t\t\t\t\tnewInstall = true;\n\t\t\t\t\tif (!automatic_configuration?.partitioning?.autoInitNewInstalls) \n\t\t\t\t\t\tif (!(await htmlConfirm(await availableAPIs.lookupLocale(\"PROMPT_PARTITION_TABLE\")))) return;\n\t\t\t\t\tawait availableAPIs.lldaInitPartitions();\n\t\t\t\t}\n\t\t\t\tlet confirmErasePart = true;\n\t\t\t\tif (!automatic_configuration?.partitioning?.format && !(automatic_configuration?.partitioning?.autoInitNewInstalls && newInstall))\n\t\t\t\t\tconfirmErasePart = await htmlConfirm(await availableAPIs.lookupLocale(\"CONFIRM_PARTITION_ERASE\"));\n\t\t\t\tif (confirmErasePart) {\n\t\t\t\t\tlet partData = await availableAPIs.lldaRead({ partition: partitionDataInput.value });\n\t\t\t\t\tlet partId;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpartId = partData.id;\n\t\t\t\t\t} catch {}\n\t\t\t\t\tif (!partId) partId = (await availableAPIs.cspOperation({\n\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t})).reduce((a, b) => a + b.toString(16).padStart(2, \"0\"), \"\")\n\t\t\t\t\tawait availableAPIs.lldaWrite({\n\t\t\t\t\t\tpartition: partitionDataInput.value,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tfiles: {},\n\t\t\t\t\t\t\tpermissions: {},\n\t\t\t\t\t\t\tid: partId\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tinitSyncEnd();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbutton.onclick = async function() {\n\t\t\t\tlet diskDataPartition = partitionDataInput.value;\n\t\t\t\tlet diskBootPartition = partitionBootInput.value;\n\t\t\t\tif (!diskDataPartition) return await htmlAlert(await availableAPIs.lookupLocale(\"DATA_INPUT_ALERT\"));\n\t\t\t\tif (!diskBootPartition) return await htmlAlert(await availableAPIs.lookupLocale(\"BOOT_INPUT_ALERT\"));\n\t\t\t\ttry {\n\t\t\t\t\tif (!(await availableAPIs.lldaList()).includes(diskDataPartition)) throw new Error();\n\t\t\t\t} catch {\n\t\t\t\t\treturn await htmlAlert(await availableAPIs.lookupLocale(\"CANNOT_FIND_PARTITION\"));\n\t\t\t\t}\n\n\t\t\t\tlet tempCopy = Object.keys((await availableAPIs.lldaRead({ partition: diskDataPartition })) || {});\n\t\t\t\tif (!tempCopy.includes(\"files\") || !tempCopy.includes(\"permissions\"))\n\t\t\t\t\tif (!(await htmlConfirm(await availableAPIs.lookupLocale(\"PCFS_DETECTION_ERROR\")))) return;\n\n\t\t\t\ttempCopy = null;\n\t\t\t\tcontent.innerHTML = \"\";\n\t\t\t\tbutton.hidden = true;\n\t\t\t\tlet isMigrated = false;\n\t\t\t\ttry {\n\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"MOUNTING_DATA_PARTITION\"));\n\t\t\t\t\tawait availableAPIs.fs_mount({\n\t\t\t\t\t\tmountpoint: \"target\",\n\t\t\t\t\t\tfilesystem: \"PCFSiDBMount\",\n\t\t\t\t\t\tfilesystemOptions: {\n\t\t\t\t\t\t\tpartition: diskDataPartition\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"REVIEWING_MIGRATION\"));\n\t\t\t\t\tlet targetListing = await availableAPIs.fs_ls({ path: \"target\" });\n\t\t\t\t\tif (targetListing.includes(\"apps\")) {\n\t\t\t\t\t\tlet targetListing = await availableAPIs.fs_ls({ path: \"target/apps\" });\n\t\t\t\t\t\tif (targetListing.includes(\"authui.js\")) {\n\t\t\t\t\t\t\tawait recursiveRemove(\"target/apps\");\n\t\t\t\t\t\t\tawait recursiveRemove(\"target/boot\");\n\t\t\t\t\t\t\tawait recursiveRemove(\"target/etc/wallpapers\");\n\t\t\t\t\t\t\tawait recursiveRemove(\"target/etc/icons\");\n\t\t\t\t\t\t\tawait recursiveRemove(\"target/etc/sounds\");\n\t\t\t\t\t\t\tawait recursiveRemove(\"target/etc/keys\");\n\t\t\t\t\t\t\tawait availableAPIs.fs_write({ path: \"target/.migration\", data: \"This file is for migration purposes\" });\n\t\t\t\t\t\t\tisMigrated = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tdescription.innerHTML = await availableAPIs.lookupLocale(\"INSTALLATION_FAILED\");\n\t\t\t\t\tawait availableAPIs.closeability(true);\n\t\t\t\t\tonClose = function() {\n\t\t\t\t\t\tonClose = () => availableAPIs.terminate();\n\t\t\t\t\t\tavailableAPIs.shutdown({\n\t\t\t\t\t\t\tisReboot: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t\tbutton.hidden = false;\n\t\t\t\tlet newInstall = true;\n\t\t\t\ttry {\n\t\t\t\t\tawait availableAPIs.fs_read({ path: \"target/etc/security/users\" });\n\t\t\t\t\tnewInstall = false;\n\t\t\t\t} catch {}\n\t\t\t\ttry {\n\t\t\t\t\tawait availableAPIs.fs_read({ path: \"target/.migration\" });\n\t\t\t\t\tisMigrated = true;\n\t\t\t\t} catch {}\n\t\t\t\tlet canSkip = (!newInstall) && automatic_configuration.secondstage.createAccount.onlyOnNewInstall;\n\t\t\t\tcontent.innerHTML = \"\";\n\t\t\t\tdescription.innerText = await availableAPIs.lookupLocale(\"LET_CREATE_ACCOUNT\");\n\t\t\t\tbutton.innerText = await availableAPIs.lookupLocale(\"CREATE\");\n\t\t\t\tlet useraccountname = document.createElement(\"input\");\n\t\t\t\tlet useraccountpassword = document.createElement(\"input\");\n\t\t\t\tlet darkmode = document.createElement(\"input\");\n\t\t\t\tlet darkmode_lb = document.createElement(\"label\");\n\t\t\t\tuseraccountname.placeholder = await availableAPIs.lookupLocale(\"USERNAME\");\n\t\t\t\tuseraccountpassword.placeholder = await availableAPIs.lookupLocale(\"PASSWORD\");\n\t\t\t\tuseraccountpassword.type = \"password\";\n\t\t\t\tdarkmode.type = \"checkbox\";\n\t\t\t\tdarkmode.id = \"darkmode\";\n\t\t\t\tdarkmode_lb.innerText = await availableAPIs.lookupLocale(\"DARK_MODE\");\n\t\t\t\tdarkmode_lb.htmlFor = \"darkmode\";\n\t\t\t\tcontent.appendChild(useraccountname);\n\t\t\t\tcontent.appendChild(document.createElement(\"br\"));\n\t\t\t\tcontent.appendChild(useraccountpassword);\n\t\t\t\tcontent.appendChild(document.createElement(\"br\"));\n\t\t\t\tcontent.appendChild(darkmode);\n\t\t\t\tcontent.appendChild(darkmode_lb);\n\t\t\t\tbutton.onclick = async function() {\n\t\t\t\t\tlet username = useraccountname.value;\n\t\t\t\t\tlet password = useraccountpassword.value;\n\t\t\t\t\tif (!username && !canSkip) return;\n\t\t\t\t\tif (username.includes(\"/\")) return;\n\t\t\t\t\tif (!password && !canSkip) return;\n\t\t\t\t\tlet homedir = username == \"root\" ? (\"target/root\") : (\"target/home/\" + username);\n\t\t\t\t\tlet darkModeChecked = darkmode.checked;\n\t\t\t\t\tcontent.innerHTML = \"\";\n\t\t\t\t\tbutton.hidden = true;\n\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"PLEASE_WAIT\"));\n\t\t\t\t\tawait availableAPIs.closeability(false);\n\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"CREATING_BOOT_PARTITION\"));\n\t\t\t\t\tawait availableAPIs.lldaWrite({\n\t\t\t\t\t\tpartition: diskBootPartition,\n\t\t\t\t\t\tdata: `\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst AsyncFunction = (async () => {}).constructor;\n\t\t\t\t\t\tlet pre_boot_part = coreExports.disk.partition(${JSON.stringify(diskDataPartition)}).getData();\n\t\t\t\t\t\tlet pre_boot_modules = pre_boot_part?.files;\n\t\t\t\t\t\tif (!pre_boot_modules) {\n\t\t\t\t\t\t\tcoreExports.tty_bios_api.println(\"No files were found in the storage partition\");\n\t\t\t\t\t\t\tthrow new Error(\"No files were found in the storage partition\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpre_boot_modules = pre_boot_modules[coreExports.bootSection || \"boot\"];\n\t\t\t\t\t\tif (!pre_boot_modules) {\n\t\t\t\t\t\t\tcoreExports.tty_bios_api.println(\"No boot modules were found\");\n\t\t\t\t\t\t\tthrow new Error(\"No boot modules were found\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet pre_boot_module_list = Object.keys(pre_boot_modules);\n\t\t\t\t\t\tpre_boot_module_list = pre_boot_module_list.sort((a, b) => a.localeCompare(b));\n\t\t\t\t\t\tlet pre_boot_module_script = \"\";\n\t\t\t\t\t\tfor (let module of pre_boot_module_list) {\n\t\t\t\t\t\t\tif (coreExports.bootMode == \"logboot\") pre_boot_module_script += \"coreExports.tty_bios_api.println(\" + JSON.stringify(module) + \");\\\\n\";\n\t\t\t\t\t\t\tpre_boot_module_script += await coreExports.idb.readPart(pre_boot_part.id + \"-\" + pre_boot_modules[module]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait new AsyncFunction(pre_boot_module_script)();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tcoreExports.tty_bios_api.println(\"Boot failed\");\n\t\t\t\t\t\tcoreExports.tty_bios_api.println(\"Press Enter to continue and log this error locally\");\n\t\t\t\t\t\tawait coreExports.tty_bios_api.inputLine();\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t\t`});\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"CHANGING_ROOT_PERMISSIONS\"));\n\t\t\t\t\t\tawait availableAPIs.fs_chmod({ path: \"target\", newPermissions: \"rx\" });\n\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"COPYING_FOLDERS\"));\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\trecursiveRemove(\"target/modules\");\n\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/modules\" });\n\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\tlet modules = await availableAPIs.fs_ls({ path: (await availableAPIs.getSystemMount()) + \"/modules\" });\n\t\t\t\t\t\tfor (let module of installed_modules) {\n\t\t\t\t\t\t\tif (!modules.includes(module)) {\n\t\t\t\t\t\t\t\tif (downloadFromBdpOnMissing) try {\n\t\t\t\t\t\t\t\t\tlet fetchModule = await bdpGet(new URL(\"/module_repository/\" + module, downloadFromBdpOnMissing));\n\t\t\t\t\t\t\t\t\tif (fetchModule.error) throw new Error(fetchModule.error);\n\t\t\t\t\t\t\t\t\tawait availableAPIs.fs_write({ path: \"target/modules/\" + module, data: fetchModule.content });\n\t\t\t\t\t\t\t\t\tmodules.push(module);\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.error(\"Failed to fetch module\", module, \":\", e);\n\t\t\t\t\t\t\t\t\tthrow new Error(\"Module required (\" + module + \")\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse throw new Error(\"Module required (\" + module + \")\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\t\tpath: \"target/modules/\" + module,\n\t\t\t\t\t\t\t\t\tdata: await availableAPIs.fs_read({\n\t\t\t\t\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + module\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"CREATING_DIRECTORY_STRUCTURE\"));\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/apps\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/apps/associations\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/apps/links\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/boot\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/etc\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/etc/wallpapers\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/etc/icons\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/etc/sounds\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/etc/keys\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/etc/keys/khrl\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/etc/security\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_chmod({\n\t\t\t\t\t\t\t\tpath: \"target/etc/security\",\n\t\t\t\t\t\t\t\tnewPermissions: \"\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/root\" });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: \"target/home\" });\n\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"PATCHING_FS\"));\n\t\t\t\t\t\tlet systemCode = \"let localSystemMount = \\\".storage\\\";\\nlet mountOptions = {\\n\\tpartition: \" + JSON.stringify(diskDataPartition) + \"\\n};\\ntry {\\n\\tmodules.fs.mounts[localSystemMount] = await modules.mounts.PCFSiDBMount(mountOptions);\\n\\tmodules.defaultSystem = localSystemMount;\\n} catch (e) {\\n\\tawait panic(\\\"SYSTEM_PARTITION_MOUNTING_FAILED\\\", { underlyingJS: e, name: \\\"fs.mounts\\\", params: [localSystemMount, mountOptions]});\\n}\\n\";\n\t\t\t\t\t\tawait availableAPIs.fs_write({ path: \"target/boot/01-fsboot.js\", data: systemCode });\n\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"SETTING_LOCALE_PREFERENCE\"));\n\t\t\t\t\t\tawait availableAPIs.fs_write({ path: \"target/boot/06-localeset.js\", data: \"modules.locales.defaultLocale = \" + JSON.stringify(await availableAPIs.osLocale()) + \";\\n\" });\n\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"GENERATING_KERNEL\"));\n\t\t\t\t\t\tlet entireBoot = [];\n\t\t\t\t\t\tlet entireBootFiles = [];\n\t\t\t\t\t\tlet moduleConfig = { local: {} };\n\t\t\t\t\t\tlet bootFiles = await availableAPIs.fs_ls({ path: \"target/boot\" });\n\t\t\t\t\t\tif (bootFiles.includes(\"00-compiled.js\")) bootFiles.splice(bootFiles.indexOf(\"00-compiled.js\"), 1);\n\t\t\t\t\t\tif (bootFiles.includes(\"99-zzpatchfinisher.js\")) bootFiles.splice(bootFiles.indexOf(\"99-zzpatchfinisher.js\"), 1);\n\t\t\t\t\t\tfor (let bootFile of bootFiles) {\n\t\t\t\t\t\t\tentireBootFiles.push(bootFile);\n\t\t\t\t\t\t\tentireBoot.push([ bootFile, await availableAPIs.fs_read({\n\t\t\t\t\t\t\t\tpath: \"target/boot/\" + bootFile\n\t\t\t\t\t\t\t}) ]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodules = (await availableAPIs.fs_ls({ path: \"target/modules\" })).sort((a, b) => a.localeCompare(b));\n\t\t\t\t\t\tfor (let module of modules) {\n\t\t\t\t\t\t\tlet moduleFile = JSON.parse(await availableAPIs.fs_read({ path: \"target/modules/\" + module }));\n\t\t\t\t\t\t\tmoduleConfig.local[module.split(\"-\").slice(1).join(\"-\").split(\".\").slice(0, -1).join(\".\")] = moduleFile.buildInfo;\n\t\t\t\t\t\t\tfor (let bootFile in (moduleFile.backend.files.boot || [])) {\n\t\t\t\t\t\t\t\tif (entireBootFiles.includes(bootFile)) continue;\n\t\t\t\t\t\t\t\tentireBoot.push([ bootFile, moduleFile.files[moduleFile.backend.files.boot[bootFile]] ]);\n\t\t\t\t\t\t\t\tentireBootFiles.push(bootFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tentireBoot = entireBoot.sort((a, b) => a[0].localeCompare(b[0]))\n\t\t\t\t\t\t\t.map(a => \"// modules/.../boot/\" + a[0] + \"\\n\" + a[1]).join(\"\\n\");\n\t\t\t\t\t\tawait availableAPIs.fs_write({ path: \"target/boot/00-compiled.js\", data: entireBoot + \"\\nreturn;/*\" });\n\t\t\t\t\t\tawait availableAPIs.fs_write({ path: \"target/boot/99-zzpatchfinisher.js\", data: \"*/\" });\n\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\tpath: \"target/etc/moduleConfig.json\",\n\t\t\t\t\t\t\tdata: JSON.stringify(moduleConfig)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (!automatic_configuration.secondstage.noReconfiguring || newInstall) {\n\t\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"INSTALLING_SYSTEM_APPHARDEN\"));\n\t\t\t\t\t\t\tif (automatic_configuration.secondstage.appHarden) await availableAPIs.fs_write({\n\t\t\t\t\t\t\t\tpath: \"target/etc/appHarden\",\n\t\t\t\t\t\t\t\tdata: JSON.stringify(automatic_configuration.secondstage.appHarden)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"INSTALLING_NET_CONF\"));\n\t\t\t\t\t\t\tif (automatic_configuration.secondstage.network) await availableAPIs.fs_write({\n\t\t\t\t\t\t\t\tpath: \"target/etc/network.json\",\n\t\t\t\t\t\t\t\tdata: JSON.stringify(automatic_configuration.secondstage.network)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!canSkip) {\n\t\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"CREATING_USER\"));\n\t\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\t\talgorithm: { name: \"PBKDF2\" },\n\t\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\tawait availableAPIs.cspOperation({ cspProvider: \"basic\", operation: \"unloadKey\", cspArgument: key });\n\t\t\t\t\t\t\tlet currentMount = await availableAPIs.getSystemMount();\n\t\t\t\t\t\t\tawait availableAPIs.setSystemMount(\"target\");\n\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\tpath: \"target/etc/security/users\",\n\t\t\t\t\t\t\t\tdata: JSON.stringify({authui: {\n\t\t\t\t\t\t\t\t\tsecurityChecks: [],\n\t\t\t\t\t\t\t\t\tgroups: [\"authui\"],\n\t\t\t\t\t\t\t\t\thomeDirectory: \"system\",\n\t\t\t\t\t\t\t\t\tblankPrivileges: true,\n\t\t\t\t\t\t\t\t\tadditionalPrivilegeSet: [ \"IPC_SEND_PIPE\", \"GET_LOCALE\", \"GET_THEME\", \"ELEVATE_PRIVILEGES\", \"FS_READ\", \"FS_LIST_PARTITIONS\", \"CSP_OPERATIONS\" ]\n\t\t\t\t\t\t\t\t}})\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.fs_chmod({ path: \"target/etc/security/users\", newPermissions: \"\" });\n\t\t\t\t\t\t\tawait availableAPIs.setUserInfo({\n\t\t\t\t\t\t\t\tdesiredUser: username,\n\t\t\t\t\t\t\t\tinfo: {\n\t\t\t\t\t\t\t\t\tsecurityChecks: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tgroups: [ username, \"users\" ],\n\t\t\t\t\t\t\t\t\thomeDirectory: \"system\" + homedir.slice(6),\n\t\t\t\t\t\t\t\t\tblankPrivileges: false\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.setSystemMount(currentMount);\n\t\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"CREATING_USER_HOME\"));\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: homedir });\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_chown({ path: homedir, newUser: username });\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_chgrp({ path: homedir, newGrp: username });\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_chmod({ path: homedir, newPermissions: \"rx\" });\n\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_mkdir({ path: homedir + \"/desktop\" });\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_chown({ path: homedir + \"/desktop\", newUser: username });\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_chgrp({ path: homedir + \"/desktop\", newGrp: username });\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_chmod({ path: homedir + \"/desktop\", newPermissions: \"rx\" });\n\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isMigrated) {\n\t\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"MIGRATING_USER_PROFILES\"));\n\t\t\t\t\t\t\tlet users = JSON.parse(await availableAPIs.fs_read({ path: \"target/etc/security/users\" }));\n\t\t\t\t\t\t\tfor (let user in users) \n\t\t\t\t\t\t\t\tif (users[user].homeDirectory.startsWith(\"storage\"))\n\t\t\t\t\t\t\t\t\tusers[user].homeDirectory = \"system\" + users[user].homeDirectory.slice(7);\n\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\tpath: \"target/etc/security/users\",\n\t\t\t\t\t\t\t\tdata: JSON.stringify(users)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.fs_rm({ path: \"target/.migration\" });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"INSTALLING_WP2U\"));\n\t\t\t\t\t\tlet wallpaperModule;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\twallpaperModule = JSON.parse(await availableAPIs.fs_read({ path: \"target/modules/50-pcos-wallpapers.fs\" }));\n\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\tif (wallpaperModule) {\n\t\t\t\t\t\t\tif (!canSkip) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\t\t\tpath: homedir + \"/.wallpaper\",\n\t\t\t\t\t\t\t\t\t\tdata: wallpaperModule.files[wallpaperModule.backend.files.etc.wallpapers[\"pcos\" + (darkModeChecked ? \"-dark\" : \"\") + \"-beta.pic\"]]\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tawait availableAPIs.fs_chown({ path: homedir + \"/.wallpaper\", newUser: username });\n\t\t\t\t\t\t\t\t\tawait availableAPIs.fs_chgrp({ path: homedir + \"/.wallpaper\", newGrp: username });\n\t\t\t\t\t\t\t\t\tawait availableAPIs.fs_chmod({ path: homedir + \"/.wallpaper\", newPermissions: \"rx\" });\n\t\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!automatic_configuration.secondstage.noReconfiguring || newInstall) {\n\t\t\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"INSTALLING_WP2L\"));\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\t\t\tpath: \"target/etc/wallpapers/lockscreen.pic\",\n\t\t\t\t\t\t\t\t\t\tdata: wallpaperModule.files[wallpaperModule.backend.files.etc.wallpapers[\"pcos-lock-beta.pic\"]]\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!canSkip) {\n\t\t\t\t\t\t\tdescription.innerHTML = (await availableAPIs.lookupLocale(\"INSTALLING_PCOS\")).replace(\"%s\", await availableAPIs.lookupLocale(\"INSTALLING_DARKMODE\"));\n\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\tpath: homedir + \"/.darkmode\",\n\t\t\t\t\t\t\t\tdata: darkModeChecked.toString()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.fs_chown({ path: homedir + \"/.darkmode\", newUser: username });\n\t\t\t\t\t\t\tawait availableAPIs.fs_chgrp({ path: homedir + \"/.darkmode\", newGrp: username });\n\t\t\t\t\t\t\tawait availableAPIs.fs_chmod({ path: homedir + \"/.darkmode\", newPermissions: \"rx\" });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdescription.innerHTML = await availableAPIs.lookupLocale(\"INSTALLATION_SUCCESSFUL\");\n\t\t\t\t\t\tif (!automatic_configuration.autoRestart) await availableAPIs.closeability(true);\n\t\t\t\t\t\tonClose = function() {\n\t\t\t\t\t\t\tonClose = () => availableAPIs.terminate();\n\t\t\t\t\t\t\tavailableAPIs.shutdown({\n\t\t\t\t\t\t\t\tisReboot: true,\n\t\t\t\t\t\t\t\tisKexec: automatic_configuration.autoRestart == \"kexec\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (automatic_configuration.autoRestart) onClose();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\tdescription.innerHTML = await availableAPIs.lookupLocale(\"INSTALLATION_FAILED\");\n\t\t\t\t\t\tawait availableAPIs.closeability(true);\n\t\t\t\t\t\tonClose = function() {\n\t\t\t\t\t\t\tonClose = () => availableAPIs.terminate();\n\t\t\t\t\t\t\tavailableAPIs.shutdown({\n\t\t\t\t\t\t\t\tisReboot: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tuseraccountname.value = automatic_configuration.secondstage.createAccount.username || useraccountname.value;\n\t\t\t\tuseraccountpassword.value = automatic_configuration.secondstage.createAccount.password || \"\";\n\t\t\t\tdarkmode.checked = automatic_configuration.secondstage.createAccount.darkMode || darkmode.checked;\n\t\t\t\tuseraccountname.disabled = automatic_configuration.secondstage.createAccount.lockUsername;\n\t\t\t\tif (automatic_configuration.secondstage.createAccount.lockUsername) useraccountname.title = await availableAPIs.lookupLocale(\"PROVISIONED_PREFERENCE\");\n\t\t\t\tif (automatic_configuration.secondstage.createAccount.create || canSkip) button.click();\n\t\t\t}\n\t\t\tif (automatic_configuration.partitioning) {\n\t\t\t\tpartitionDataInput.value = automatic_configuration.partitioning.data || \"data\";\n\t\t\t\tpartitionBootInput.value = automatic_configuration.partitioning.boot || \"boot\";\n\t\t\t\tlet newInstall = false;\n\t\t\t\ttry { await availableAPIs.lldaList(); } catch { newInstall = true; }\n\t\t\t\tif (automatic_configuration.partitioning.format || (newInstall && automatic_configuration.partitioning.autoInitNewInstalls)) {\n\t\t\t\t\tpartitionDataFormat.click();\n\t\t\t\t\tawait initSync;\n\t\t\t\t}\n\t\t\t\tbutton.click();\n\t\t\t}\n\t\t}\n\t\tif (automatic_configuration.acceptEULA) button.click();\n\t}\n\tliveButton.onclick = async function() {\n\t\theader.remove();\n\t\tpostHeader.remove();\n\t\tliveButton.remove();\n\t\tcontent.innerHTML = \"\";\n\t\tdescription.innerText = await availableAPIs.lookupLocale(\"RIGHT_REVIEW\");\n\t\tlet textareaLicense = document.createElement(\"textarea\");\n\t\ttextareaLicense.readOnly = true;\n\t\ttextareaLicense.style.width = \"100%\";\n\t\ttextareaLicense.style.height = \"100%\";\n\t\tcontent.style.height = \"100%\";\n\t\ttextareaLicense.value = licenseText;\n\t\tcontent.appendChild(textareaLicense);\n\t\tbutton.innerText = await availableAPIs.lookupLocale(\"RIGHT_REVIEW_BTN\");\n\t\tbutton.onclick = async function() {\n\t\t\tcontent.innerHTML = \"\";\n\t\t\tcontent.style.height = \"\";\n\t\t\tawait availableAPIs.sendToPipe({\n\t\t\t\tpipe: exec_args[0],\n\t\t\t\tdata: true\n\t\t\t});\n\t\t\tawait availableAPIs.terminate();\n\t\t}\n\t}\n\tif (automatic_configuration.startInstall) button.click()\n})();\n\nasync function htmlAlert(msg) {\n\tlet overlay = document.createElement(\"div\");\n\tlet overlayingMessage = document.createElement(\"div\");\n\tlet description = document.createElement(\"span\");\n\tlet buttonAccept = document.createElement(\"button\");\n\toverlay.style = \"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: black; opacity: 85%;\";\n\toverlayingMessage.style = \"position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; padding: 8px; box-sizing: border-box; color: white;\";\n\tdescription.innerText = msg;\n\tbuttonAccept.innerText = \"Ok\";\n\toverlayingMessage.appendChild(description);\n\toverlayingMessage.appendChild(document.createElement(\"hr\"));\n\toverlayingMessage.appendChild(buttonAccept);\n\tdocument.body.appendChild(overlay);\n\tdocument.body.appendChild(overlayingMessage);\n\treturn new Promise(function(resolve) {\n\t\tbuttonAccept.onclick = function() {\n\t\t\toverlay.remove();\n\t\t\toverlayingMessage.remove();\n\t\t\tresolve();\n\t\t}\n\t});\n}\n\nasync function htmlConfirm(msg) {\n\tlet overlay = document.createElement(\"div\");\n\tlet overlayingMessage = document.createElement(\"div\");\n\tlet description = document.createElement(\"span\");\n\tlet buttonAccept = document.createElement(\"button\");\n\tlet buttonDecline = document.createElement(\"button\");\n\toverlay.style = \"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: black; opacity: 85%;\";\n\toverlayingMessage.style = \"position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; padding: 8px; box-sizing: border-box; color: white;\";\n\tdescription.innerText = msg;\n\tbuttonAccept.innerText = await availableAPIs.lookupLocale(\"YES\");\n\tbuttonDecline.innerText = await availableAPIs.lookupLocale(\"NO\");\n\toverlayingMessage.appendChild(description);\n\toverlayingMessage.appendChild(document.createElement(\"hr\"));\n\toverlayingMessage.appendChild(buttonAccept);\n\toverlayingMessage.appendChild(buttonDecline);\n\tdocument.body.appendChild(overlay);\n\tdocument.body.appendChild(overlayingMessage);\n\treturn new Promise(function(resolve) {\n\t\tbuttonAccept.onclick = function() {\n\t\t\toverlay.remove();\n\t\t\toverlayingMessage.remove();\n\t\t\tresolve(true);\n\t\t}\n\t\tbuttonDecline.onclick = function() {\n\t\t\toverlay.remove();\n\t\t\toverlayingMessage.remove();\n\t\t\tresolve(false);\n\t\t}\n\t});\n}\n\nasync function recursiveCopy(source, destination, permissions) {\n\tfor (let sourceFile of await availableAPIs.fs_ls({ path: source })) {\n\t\tlet destinationFile = destination + \"/\" + sourceFile;\n\t\tif (await availableAPIs.fs_isDirectory({ path: source + \"/\" + sourceFile })) {\n\t\t\ttry {\n\t\t\t\tawait availableAPIs.fs_mkdir({ path: destinationFile });\n\t\t\t} catch {}\n\t\t\tawait recursiveCopy(source + \"/\" + sourceFile, destinationFile, permissions);\n\t\t} else {\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: destinationFile,\n\t\t\t\tdata: await availableAPIs.fs_read({ path: source + \"/\" + sourceFile })\n\t\t\t});\n\t\t}\n\t\tif (permissions) {\n\t\t\tlet originalPermissions = await availableAPIs.fs_permissions({ path: source + \"/\" + sourceFile });\n\t\t\tawait availableAPIs.fs_chmod({ path: destinationFile, newPermissions: originalPermissions.world });\n\t\t\tawait availableAPIs.fs_chgrp({ path: destinationFile, newGrp: originalPermissions.group });\n\t\t\tawait availableAPIs.fs_chown({ path: destinationFile, newUser: originalPermissions.owner });\n\t\t}\n\t}\n}\n\nasync function recursiveRemove(target) {\n\tfor (let targetFile of await availableAPIs.fs_ls({ path: target })) {\n\t\ttargetFile = target + \"/\" + targetFile;\n\t\tif (await availableAPIs.fs_isDirectory({ path: targetFile })) await recursiveRemove(targetFile);\n\t\tawait availableAPIs.fs_rm({ path: targetFile });\n\t}\n}\n\nasync function bdpGet(path) {\n\tlet url = new URL(path);\n\tif (url.protocol != \"bdp:\") throw new Error(await availableAPIs.lookupLocale(\"BLOG_BROWSER_PROTO\"));\n\tif (url.port) throw new Error(await availableAPIs.lookupLocale(\"BLOG_BROWSER_GATESET\"));\n\tlet hostname = url.hostname, address;\n\tif (url.hostname.includes(\"[\")) {\n\t\thostname = IPv6Decompressor(url.hostname.slice(1, -1)).replaceAll(\":\", \"\");\n\t\taddress = hostname;\n\t} else address = await availableAPIs.resolve(hostname);\n\tif (!address) throw new Error(await availableAPIs.lookupLocale(\"HOSTNAME_RESOLUTION_FAILED\"));\n\tlet connection = await availableAPIs.connfulConnect({\n\t\tgate: url.username || \"blog\",\n\t\taddress,\n\t\tverifyByDomain: hostname\n\t});\n\tawait availableAPIs.connfulConnectionSettled(connection);\n\tawait availableAPIs.connfulWrite({\n\t\tconnectionID: connection,\n\t\tdata: url.pathname + url.search,\n\t\thost: hostname\n\t});\n\tlet data = await availableAPIs.connfulRead(connection);\n\tdata = JSON.parse(data);\n\tlet chunks = [];\n\twhile (chunks.length != data.length) {\n\t\tlet newData = await availableAPIs.connfulRead(connection);\n\t\tnewData = JSON.parse(newData);\n\t\tchunks[newData.ctr] = newData.chunk;\n\t}\n\ttry {\n\t\tawait availableAPIs.connfulClose(connection);\n\t} catch {}\n\treturn { ...data, content: chunks.join(\"\") };\n}\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) onClose();\n}); ","6a5909332e25e73cee85be0e945872c8570c4a2156eccc1631bbb0b91b49b39919dba49e8d95863fde286619e0027f8e0803e6152f2c30811e2fc5d6d3bf48ff":"{\n\t\"startInstall\": true,\n\t\"acceptEULA\": true,\n\t\"partitioning\": {\n\t\t\"data\": \"data\",\n\t\t\"boot\": \"boot\",\n\t\t\"format\": true,\n\t\t\"autoInitNewInstalls\": true\n\t},\n\t\"autoRestart\": \"kexec\",\n\t\"defaultLocale\": \"en\",\n\t\"extraModules\": [ \"50-arcadeBreakout.fs\" ],\n\t\"secondstage\": {\n\t\t\"noReconfiguring\": true,\n\t\t\"createAccount\": {\n\t\t\t\"password\": \"password\",\n\t\t\t\"darkMode\": true,\n\t\t\t\"create\": true,\n\t\t\t\"username\": \"root\",\n\t\t\t\"lockUsername\": true,\n\t\t\t\"onlyOnNewInstall\": true\n\t\t},\n\t\t\"appHarden\": {\n\t\t\t\"requireSignature\": true,\n\t\t\t\"requireAllowlist\": true\n\t\t},\n\t\t\"network\": {\n\t\t\t\"url\": \"wss://pcos3.pcprojects.tk\",\n\t\t\t\"ucBits\": 1,\n\t\t\t\"hostname\": \"installedsys\",\n\t\t\t\"updates\": \"pcosserver.pc\"\n\t\t}\n\t}\n}"},"buildInfo":{"for":"1433","version":1433,"when":1757088949396,"signer":"moduleSigner","critical":false,"bootOrder":"50","commonName":"installer","signature":"4b8cc9140f1c9e0ba9e01b66639be25d33d657587033776ff7c4bcb074bd5e94fdfe9bf073ed992183586c2fc4e9d8cfef716207709d25eee72ecb766fad0909"}}