{"backend":{"files":{"apps":{"adduser.js":"63229d9d6f7f5aeb4653672d62ac7130f750a626edfcfe241b3e92a7f12e7d4b048579f9f3a68fa51428abfa8db4f9eee15fbafce7c61f67c7b5ea9bf6a8779c","blockuser.js":"4edda885f264c717229f1c4d4f3270cc53bd70ca2b45fba339f27e7421132bfcc7d05995fa5baa5f677955a71e79115e5cd052f7ad1581dcb8aa1f5d5aadaa89","deluser.js":"2b37c8464c370851c66879ffe6c87570e89e8f12a392ea1f052027046a0ce3c9ee09da2742c25403e373c5c3a970fb14f17fe8c28a48bb7b0f0eae9acff22152","lsuser.js":"b26114d2dd08bf8423aa44b83237b39b0ba9da829b29a3f17290769dda08221a2adae1a87a54a60add4df31dca96258e0a85914779dae4f78543c3dab5fd7329","passwd.js":"d573e18e217420c32e349a4f1d6684cae86f43a62a83dd9ab284a02ae75e0e12f00d30e538e65ebd4d628c7c898e5d497d203e70a3659ae0ec9f655be8e24fef"}},"permissions":{"apps/adduser.js":{"world":"rx"},"apps/blockuser.js":{"world":"rx"},"apps/deluser.js":{"world":"rx"},"apps/lsuser.js":{"world":"rx"},"apps/passwd.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"63229d9d6f7f5aeb4653672d62ac7130f750a626edfcfe241b3e92a7f12e7d4b048579f9f3a68fa51428abfa8db4f9eee15fbafce7c61f67c7b5ea9bf6a8779c":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SET_USER_INFO, SWITCH_USERS_AUTOMATICALLY, FS_LIST_PARTITIONS, FS_READ, FS_WRITE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS, GET_USER_INFO, USER_INFO_OTHERS\n// signature: dc7731c8ca44229f71e501e11b1b6276abbf9e3fd4fcf1984e1823d34cabd9fea6de4093c2c9c4b10717c258ef3dc0d81d8c5641a679583de1700c2d0c7c6a08\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"adduser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (ppos.length < 1) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"ADDUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"ADDUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_SKIP_PASSWD\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_SKIP_HOME\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_HOME\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_GROUPS\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NEW_USER_CREATION\")).replace(\"%s\", ppos[0]) + \"\\r\\n\");\n\ttry {\n\t\tlet userData = await availableAPIs.getUserInfo({ desiredUser: ppos[0] });\n\t\tif (userData) throw new Error(\"USERNAME_EXISTS\");\n\t\tlet homeDirectory = pargs[\"home\"] || await availableAPIs.getSystemMount() + \"/home/\" + ppos[0];\n\t\tawait availableAPIs.setUserInfo({\n\t\t\tdesiredUser: ppos[0],\n\t\t\tinfo: {\n\t\t\t\tgroups: [ppos[0], ...(pargs.groups ? (pargs.groups instanceof Array ? pargs.groups : [pargs.groups]) : []) ],\n\t\t\t\thomeDirectory,\n\t\t\t\tsecurityChecks: [],\n\t\t\t\tblankPrivileges: false\n\t\t\t}\n\t\t});\n\t\tif (!pargs[\"skip-home\"]) {\n\t\t\tawait mkrecursive(homeDirectory);\n\t\t\tawait availableAPIs.fs_chown({ path: homeDirectory, newUser: ppos[0] });\n\t\t\tawait availableAPIs.fs_chgrp({ path: homeDirectory, newGrp: ppos[0] });\n\t\t\tawait availableAPIs.fs_chmod({ path: homeDirectory, newPermissions: \"rx\" });\n\t\t}\n\t\tif (pargs[\"skip-passwd\"]) return await availableAPIs.terminate();\n\t\tawait availableAPIs.switchUser(ppos[0]);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_NEW_PROMPT\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_PROMPT\"));\n\tlet str = \"\";\n\tlet stage = 0;\n\tlet password = \"\";\n\tonTermData(async function(e) {\n\t\tif (e == \"\\r\") {\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (stage == 0) {\n\t\t\t\tpassword = str;\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_CONFIRM_PROMPT\"));\n\t\t\t\tstage = 1;\n\t\t\t\tstr = \"\";\n\t\t\t} else if (stage == 1) {\n\t\t\t\tstage = 2;\n\t\t\t\tif (str == password) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\tcspArgument: key\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait availableAPIs.setOwnSecurityChecks({\n\t\t\t\t\t\t\tchecks: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"PASSWD_FEEDBACK\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t} else {\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"PASSWD_MISMATCH\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(\"*\");\n\t\t\t}\n\t\t}\n\t});\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\nasync function mkrecursive(dir) {\n\tlet slices = dir.split(\"/\");\n\tfor (let i = 2; i <= slices.length; i++) {\n\t\tlet browse = await availableAPIs.fs_ls({ path: slices.slice(0, i - 1).join(\"/\") });\n\t\tif (!browse.includes(slices[i - 1])) await availableAPIs.fs_mkdir({ path: slices.slice(0, i).join(\"/\") });\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","4edda885f264c717229f1c4d4f3270cc53bd70ca2b45fba339f27e7421132bfcc7d05995fa5baa5f677955a71e79115e5cd052f7ad1581dcb8aa1f5d5aadaa89":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, SWITCH_USERS_AUTOMATICALLY\n// signature: 9574f0a69deac620df7bb46575c561d122278f30901de1daf09a7e42e1dfc797f5e5cc2fcbcc9859eda3883ee380d0593b672f80d90dc042ef5bd6c7b0454900\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"blockuser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (pargs.help) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BLOCKUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BLOCKUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\ttry {\n\t\tif (ppos[0]) await availableAPIs.switchUser(ppos[0]);\n\t\tawait availableAPIs.setOwnSecurityChecks({ checks: [] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"blockuser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","2b37c8464c370851c66879ffe6c87570e89e8f12a392ea1f052027046a0ce3c9ee09da2742c25403e373c5c3a970fb14f17fe8c28a48bb7b0f0eae9acff22152":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SET_USER_INFO, FS_LIST_PARTITIONS, FS_READ, FS_BYPASS_PERMISSIONS, FS_REMOVE, GET_USER_INFO, USER_INFO_OTHERS\n// signature: bb126bcafc3c769bfa588f89e82b9cb927dd65a708e6c3d4a8d49383b1510185ecae55b287381b8cd39c80f760c558c4fda9f8bb903bcdf9fd4f65f30b1cf000\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"deluser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (ppos.length < 1) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DELUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DELUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"DELUSER_HOMEDIR\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"deluser: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"OLD_USER_DELETION\")).replace(\"%s\", ppos[0]) + \"\\r\\n\");\n\ttry {\n\t\tlet userInfo = await availableAPIs.getUserInfo({ desiredUser: ppos[0] });\n\t\tif (!userInfo) throw new Error(\"ACCESS_FN_FAIL\");\n\t\tawait availableAPIs.setUserInfo({\n\t\t\tdesiredUser: ppos[0],\n\t\t\tinfo: undefined\n\t\t})\n\t\tif (pargs.homedir) await recursiveRemove(userInfo.homeDirectory);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"deluser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\treturn await availableAPIs.terminate();\n})();\n\nasync function recursiveRemove(path) {\n\tlet dirList = await availableAPIs.fs_ls({ path });\n\tfor (let fileIndex in dirList) {\n\t\tlet file = dirList[fileIndex];\n\t\tif (await availableAPIs.fs_isDirectory({ path: path + \"/\" + file })) await recursiveRemove(path + \"/\" + file);\n\t\telse await availableAPIs.fs_rm({ path: path + \"/\" + file });\n\t}\n\tawait availableAPIs.fs_rm({ path });\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","b26114d2dd08bf8423aa44b83237b39b0ba9da829b29a3f17290769dda08221a2adae1a87a54a60add4df31dca96258e0a85914779dae4f78543c3dab5fd7329":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_USER_LIST\n// signature: 7476d84f7ccaedf70e5ecd168f95e8676de996e37a0902f941bb402edf7c12093cff7c00b78282f4ba8bc73de88d5bb675424add77f199bb09a36b120d09270f\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"lsuser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tfor (let user of await availableAPIs.getUsers()) await availableAPIs.toMyCLI(JSON.stringify(user) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"lsuser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\treturn await availableAPIs.terminate();\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","d573e18e217420c32e349a4f1d6684cae86f43a62a83dd9ab284a02ae75e0e12f00d30e538e65ebd4d628c7c898e5d497d203e70a3659ae0ec9f655be8e24fef":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SWITCH_USERS_AUTOMATICALLY\n// signature: dde4f06f4885da44f785980bab1f78ce9a063ce9232f3a6c64f2b66a3294a528f2ce4491f2a784690bfbfc6458d6b424e255b31d8d59f64e3be41c12911b6407\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"passwd: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (exec_args[0]) {\n\t\ttry {\n\t\t\tawait availableAPIs.switchUser(exec_args[0]);\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_NEW_PROMPT\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_2FACTOR_LOSS_WARN\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_PROMPT\"));\n\tlet str = \"\";\n\tlet stage = 0;\n\tlet password = \"\";\n\tonTermData(async function(e) {\n\t\tif (e == \"\\r\") {\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (stage == 0) {\n\t\t\t\tpassword = str;\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_CONFIRM_PROMPT\"));\n\t\t\t\tstage = 1;\n\t\t\t\tstr = \"\";\n\t\t\t} else if (stage == 1) {\n\t\t\t\tstage = 2;\n\t\t\t\tif (str == password) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\tcspArgument: key\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait availableAPIs.setOwnSecurityChecks({\n\t\t\t\t\t\t\tchecks: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(\"PASSWD_FEEDBACK\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t} else {\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(\"PASSWD_MISMATCH\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(\"*\");\n\t\t\t}\n\t\t}\n\t});\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1412","version":1412,"when":1755882535645,"signer":"moduleSigner","critical":false,"bootOrder":"50","signature":"811b2747ab0738859def4b195b81237af7036d33f6380464c17c12da9485d27d50e5021dd02c34ad530ce8d7b6ba0e362fc0526d973b2a7cd68174c84d0a9e0e"}}