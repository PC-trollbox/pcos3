{"backend":{"files":{"apps":{"basiccurl.js":"af2382b72816b7e2597eb363f38630158b63f9b6a43c2c514b17f075d93f3e768a07750f0d3533085a84195a27c1b15cfd008fd9a9373f0bcc55270dec1da80e","netinfo.js":"b58f27cf557f89826c918e71b9aee13c1c9ceeffa8fb64e53ae6b43429f3501f44aeeda224b2e700f67d17f83b680119cd0569ccc201bb0ba2dda5019cc0e76b","networkfs.js":"0bac06fe9607911acdfb6f6936da137f657f21b0f532801e6e890d11f482bc818483d85e96ae07dee7a6fdf7ae075ce0b3843efaf082ab72797ce1d2e5f872f2","ping.js":"d47e9a374383f65fdcd07e7164294f7d01c8a3902638c8cfbdb86bf8c0d9d6279ccb70ffbcbe352187f566933e343d679befd0ed35ec1c6ee7dffa3b0135d589","renetworkd.js":"41e151ae933d74a0e6efd29002fabe9b2a929a7fe66c15d2b75b0a0409eb68accadac98c14bdaea3cb31316f23d821e8ce701b7321fe9b87897b7dd9596428dd","updatefw.js":"1870aaf5537310c1985261c0af54d6834ade739303aef21872e2fcb48498e8f6446c0aa9670279102c8bf8f0d96f8752afd1bf7e689ffaf84380d2c5f8b7a29e"}},"permissions":{"apps/basiccurl.js":{"world":"rx"},"apps/netinfo.js":{"world":"rx"},"apps/networkfs.js":{"world":"rx"},"apps/ping.js":{"world":"rx"},"apps/renetworkd.js":{"world":"rx"},"apps/updatefw.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"af2382b72816b7e2597eb363f38630158b63f9b6a43c2c514b17f075d93f3e768a07750f0d3533085a84195a27c1b15cfd008fd9a9373f0bcc55270dec1da80e":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FETCH_SEND, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION\n// signature: 2a6b804d2a63dc3c1eea087cd06e845b0d1dbbed7ea506316d7f006b6dff10f7235a9243f2eaa06a782ede9f2a0f967b149489e92bfa9e9d96a237a406c5e207\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"basiccurl: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BASIC_CURL_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BASIC_CURL_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"basiccurl: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tlet downloadedFile = await availableAPIs.fetchSend({\n\t\t\turl: exec_args[0],\n\t\t\tinit: {}\n\t\t});\n\t\tdownloadedFile = downloadedFile.arrayBuffer;\n\t\tdownloadedFile = new TextDecoder().decode(downloadedFile);\n\t\tawait availableAPIs.fs_write({ path: exec_args[1], data: downloadedFile });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"basiccurl: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","b58f27cf557f89826c918e71b9aee13c1c9ceeffa8fb64e53ae6b43429f3501f44aeeda224b2e700f67d17f83b680119cd0569ccc201bb0ba2dda5019cc0e76b":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_NETWORK_ADDRESS, GET_HOSTNAME, GET_UPDATE_SERVICE\n// signature: 8279530c75ac0d8091b7719ead5f12a74146c27964a2eb7896a9d56721a64ee5c9c17463b5cb79c452e9e95c275fefdb7d7bcae2df4b5fd49a2abd035725fc0b\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"netinfo: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\t\n\ttry {\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_ADDRESS_FIELD\")).replace(\"%s\", (await availableAPIs.getNetworkAddress())?.match(/.{1,4}/g)?.join(\":\") || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\")) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_AUTOHOST_FIELD\")).replace(\"%s\", (await availableAPIs.getHostname() || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\"))) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_UPDATES_FIELD\")).replace(\"%s\", (await availableAPIs.getUpdateService() || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\"))) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"netinfo: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); ","0bac06fe9607911acdfb6f6936da137f657f21b0f532801e6e890d11f482bc818483d85e96ae07dee7a6fdf7ae075ce0b3843efaf082ab72797ce1d2e5f872f2":"// =====BEGIN MANIFEST=====\n// allow: GET_LOCALE, RESOLVE_NAME, CONNFUL_CONNECT, IPC_CREATE_PIPE, FS_MOUNT, IPC_LISTEN_PIPE, CONNFUL_WRITE, CONNFUL_READ, IPC_SEND_PIPE, FS_READ\n// signer: automaticSigner\n// signature: 5af575b711babce7e229a818282457a0deaf83da5577e47e9cf5399cdf282d1bb9833d5c3182820294add0ec51a62a952982db907c22808ee56ff847a07c510a\n// =====END MANIFEST=====\nfunction IPv6Decompressor(ip) {\n\tlet array = ip.split(\":\");\n\tarray = array.slice(0, 8);\n\tlet foundTwoOrMoreZeroes = array.indexOf(\"\");\n\twhile (array.length != 8 && foundTwoOrMoreZeroes !== null) array.splice(foundTwoOrMoreZeroes, 0, \"0000\");\n\tarray = array.map(a => parseInt(a || \"0\", 16).toString(16).padStart(4, \"0\"));\n\treturn array.join(\":\");\n}\n(async function() {\n\t// @pcos-app-mode isolatable\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"networkfs: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.attachCLI();\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (ppos.length < 2) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"NETWORKFS_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"NETWORKFS_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"NETWORKFS_NOVERIFY\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"NETWORKFS_KEY\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"networkfs: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\tlet inPipe, outPipe, conn;\n\ttry {\n\t\tlet url = new URL(ppos[0]);\n\t\tif (url.protocol != \"netfs:\") throw new Error(await availableAPIs.lookupLocale(\"NETWORKFS_PROTO\"));\n\t\tif (url.port) throw new Error(await availableAPIs.lookupLocale(\"BLOG_BROWSER_GATESET\"));\n\t\tlet hostname = url.hostname, address;\n\t\tif (url.hostname.includes(\"[\")) {\n\t\t\thostname = IPv6Decompressor(url.hostname.slice(1, -1)).replaceAll(\":\", \"\");\n\t\t\taddress = hostname;\n\t\t} else address = await availableAPIs.resolve(hostname);\n\t\tif (!address) throw new Error(await availableAPIs.lookupLocale(\"HOSTNAME_RESOLUTION_FAILED\"));\n\t\tconn = await availableAPIs.connfulConnect({\n\t\t\tgate: url.username || \"netfs\",\n\t\t\taddress,\n\t\t\tverifyByDomain: hostname,\n\t\t\tkey: pargs.key ? JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: pargs.key\n\t\t\t})).key : undefined,\n\t\t\tprivate: pargs.key ? JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: pargs.key\n\t\t\t})).private : undefined,\n\t\t\tdoNotVerifyServer: pargs[\"no-verification\"]\n\t\t});\n\t\tawait availableAPIs.connfulConnectionSettled(conn);\n\t\tinPipe = await availableAPIs.createPipe();\n\t\toutPipe = await availableAPIs.createPipe();\n\t\tlet pipe2conn = (async function() {\n\t\t\twhile (true) {\n\t\t\t\tlet listenToPipe = await availableAPIs.listenToPipe(inPipe);\n\t\t\t\tavailableAPIs.connfulWrite({\n\t\t\t\t\tconnectionID: conn,\n\t\t\t\t\tdata: JSON.stringify(listenToPipe)\n\t\t\t\t});\n\t\t\t}\n\t\t})();\n\t\tlet conn2pipe = (async function() {\n\t\t\twhile (true) {\n\t\t\t\tlet networkListen = await availableAPIs.connfulRead(conn);\n\t\t\t\tavailableAPIs.sendToPipe({\n\t\t\t\t\tpipe: outPipe,\n\t\t\t\t\tdata: JSON.parse(networkListen)\n\t\t\t\t});\n\t\t\t}\n\t\t})();\n\t\tawait availableAPIs.fs_mount({\n\t\t\tmountpoint: ppos[1],\n\t\t\tfilesystem: \"IPCMount\",\n\t\t\tfilesystemOptions: {\n\t\t\t\tinputPipeId: inPipe,\n\t\t\t\toutputPipeId: outPipe\n\t\t\t}\n\t\t});\n\t\tawait Promise.all([pipe2conn, conn2pipe]);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"networkfs: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","d47e9a374383f65fdcd07e7164294f7d01c8a3902638c8cfbdb86bf8c0d9d6279ccb70ffbcbe352187f566933e343d679befd0ed35ec1c6ee7dffa3b0135d589":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FETCH_SEND, PCOS_NETWORK_PING, RESOLVE_NAME\n// signature: 05b1829ff443d2c863a9eb03b650d7820f2712368679a5d672b64b26ba6d31ff3ac8abfba7012cb605b3086e2c05e0ab9847eddbb5b02e6fdbe55965d5855e07\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"ping: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PING_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PING_DESCRIPTION\") + \"\\r\\n\")\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"PING_INTERNET_OPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"ping: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.includes(\"--internet\")) {\n\t\texec_args = exec_args.filter(a => a != \"--internet\");\n\t\tif (!exec_args.length) {\n\t\t\tawait availableAPIs.toMyCLI(\"ping: No URL specified\\r\\n\");\n\t\t\treturn availableAPIs.terminate();\n\t\t}\n\t\tawait availableAPIs.toMyCLI(\"Pinging \" + exec_args[0] + \" via HTTP...\\r\\n\");\n\t\tfor (let i = 1; i <= 4; i++) {\n\t\t\tawait new Promise((resolve) => setTimeout(() => resolve(\"ping\"), 500));\n\t\t\tlet time = performance.now();\n\t\t\ttry {\n\t\t\t\tif ((await Promise.race([availableAPIs.fetchSend({\n\t\t\t\t\turl: exec_args[0],\n\t\t\t\t\tinit: {\n\t\t\t\t\t\tnoArrayBuffer: true,\n\t\t\t\t\t\tmode: \"no-cors\"\n\t\t\t\t\t}\n\t\t\t\t}), new Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))])) == \"timeout\") throw new Error(\"Response timed out\");\n\t\t\t\ttime = performance.now() - time;\n\t\t\t\tawait availableAPIs.toMyCLI(\"http_seq=\" + i + \" time=\" + time.toFixed(2) + \" ms\\r\\n\");\n\t\t\t} catch (e) {\n\t\t\t\ttime = performance.now() - time;\n\t\t\t\tawait availableAPIs.toMyCLI(\"http_seq=\" + i + \" time=\" + time.toFixed(2) + \" ms err=\" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t\t}\n\t\t}\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet pingedAddress;\n\tif (exec_args[0].includes(\":\")) pingedAddress = exec_args[0].replaceAll(\":\", \"\");\n\telse {\n\t\ttry {\n\t\t\tpingedAddress = await Promise.race([\n\t\t\t\tavailableAPIs.resolve(exec_args[0]),\n\t\t\t\tnew Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))\n\t\t\t])\n\t\t\tif (pingedAddress == \"timeout\") throw new Error(\"Resolution timed out\");\n\t\t\tif (!pingedAddress) throw new Error(\"Could not resolve hostname\");\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"ping: \" + exec_args[0] + \": \" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(\"Pinging \" + exec_args[0] + \" (\" + pingedAddress.match(/.{1,4}/g).join(\":\") + \") via PCOS Network...\\r\\n\");\n\tfor (let i = 1; i <= 4; i++) {\n\t\tawait new Promise((resolve) => setTimeout(() => resolve(\"ping\"), 500));\n\t\tlet time = performance.now();\n\t\ttry {\n\t\t\tlet race = await Promise.race([availableAPIs.networkPing(pingedAddress), new Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))]);\n\t\t\tif (race == \"timeout\") throw new Error(\"Response timed out\");\n\t\t\ttime = performance.now() - time;\n\t\t\tawait availableAPIs.toMyCLI(\"count=\" + i + \" time=\" + time.toFixed(2) + \" ms\\r\\n\");\n\t\t} catch (e) {\n\t\t\ttime = performance.now() - time;\n\t\t\tawait availableAPIs.toMyCLI(\"count=\" + i + \" time=\" + time.toFixed(2) + \" ms err=\" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","41e151ae933d74a0e6efd29002fabe9b2a929a7fe66c15d2b75b0a0409eb68accadac98c14bdaea3cb31316f23d821e8ce701b7321fe9b87897b7dd9596428dd":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, RELOAD_NETWORK_CONFIG\n// signature: f3349f5a264b91c9887690156c699cb05135cc932ca6daea0f2a5561715036a9315f07310fa66e443e36981a923303c0c12e3259ffb7bfb16d77042b0f01890a\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"renetworkd: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tawait availableAPIs.reloadNetworkConfig();\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"renetworkd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","1870aaf5537310c1985261c0af54d6834ade739303aef21872e2fcb48498e8f6446c0aa9670279102c8bf8f0d96f8752afd1bf7e689ffaf84380d2c5f8b7a29e":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: FETCH_SEND, SET_FIRMWARE, SYSTEM_SHUTDOWN, GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 6e8ba454ef19fc90cad8e763168fadbbaf0d7c66c5fd7fccc4cc6c096b3b384ecc152ddb5aabfddacd3225cbdc58f2a927da579e2ffb6c77a304e863e118d30d\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"updatefw: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOADING\") + \"\\r\\n\");\n\tlet fwArchive;\n\tif (!exec_args.length) {\n\t\ttry {\n\t\t\tfwArchive = await availableAPIs.fetchSend({\n\t\t\t\turl: \"/init.js\",\n\t\t\t\tinit: {}\n\t\t\t});\n\t\t\tif (!fwArchive.ok) throw new Error(\"Non-OK response (\" + fwArchive.status + \" \" + fwArchive.statusText + \")\");\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tfwArchive = { arrayBuffer: new TextEncoder().encode(await availableAPIs.fs_read({\n\t\t\t\tpath: exec_args[0]\n\t\t\t})) };\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DECODING\") + \"\\r\\n\");\n\tfwArchive = fwArchive.arrayBuffer;\n\tfwArchive = new TextDecoder().decode(fwArchive);\n\ttry {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_SETTING\") + \"\\r\\n\");\n\t\tawait availableAPIs.setFirmware(fwArchive);\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RESTARTING\") + \"\\r\\n\");\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: true\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"updatefw: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1382","version":1382,"when":1755350877311,"signer":"moduleSigner","critical":false,"bootOrder":"50","signature":"b4ef51d2e63b22d342254a954d1ed13766a5829aa6138d751afd4a0eff91e142f038fee9f79a55b00d7348c241f821794df3c2318489a15800ae4cce04fe640c"}}