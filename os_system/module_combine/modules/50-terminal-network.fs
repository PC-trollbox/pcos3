{"backend":{"files":{"apps":{"basiccurl.js":"167e05835f83ace6fb903f96f7639339c5e439d13a7625e9f7e471b08d7d751d3c6282f3d9eeb23aa32801d25cbbe4f56955d3d1d1a4daadbceea8b7d607b0fc","diffupdate.js":"f50def38036beb3865c71ec54d11b2c4ae02b6ab52c446a235b17a96fbd39829164ec5d22e6c8e8302e882eceb8827d83ff8bc2da17816909306a14e1b66fe90","netinfo.js":"f155186095c6c768717fbd4e4d1ce1dbe36ca4fb2dd21ae79809114efbf5e42b9f28931fca64f215933d816bb00ee6c9143afb1b79b82c6d87a3aae0153ecad4","networkfs.js":"1f4a4497491be64dbe7a72ff48ea4b5cc620cc2de0192dcc2785d501662fa13521aab9d9aeb5e4de6711781435466defd73f2b6890a382c9b1217bce28e7e876","ping.js":"5fb5bb3cc8f880785382a720368aea3a2e7904d323a33fe4179981c67bb53549245234cd12aa25dde777794c5972557763ece52a68e1ab4efbbcef624e66042f","renetworkd.js":"7e762dab6a919d458613826adf32dfca76f35822ea862b9d9af8b8d7d446ae44c04dbb2c3ae6e47b6efeeaa63dfe77a22c09beb826ecae4eb5aea8bd53457026","updatefw.js":"cbed52474f3ed4f8a475ca3ea81e98eda5f24172af8144949e3bc94e0cd9d6823b9de77c876851269cc78617cb711e2e3c18d7e332bf76df7d823f74409f75be","updateos.js":"e0722c800fbead1675b1de8f2fa98046226d647f807c00110a15b593ea86cb3e5f4a94597c373c6dcd9ddbc7e6a91072591a62d7a62d59b8c50a6a2938e9e9a5"}},"permissions":{"apps/basiccurl.js":{"world":"rx"},"apps/diffupdate.js":{"world":"rx"},"apps/netinfo.js":{"world":"rx"},"apps/networkfs.js":{"world":"rx"},"apps/ping.js":{"world":"rx"},"apps/renetworkd.js":{"world":"rx"},"apps/updatefw.js":{"world":"rx"},"apps/updateos.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"167e05835f83ace6fb903f96f7639339c5e439d13a7625e9f7e471b08d7d751d3c6282f3d9eeb23aa32801d25cbbe4f56955d3d1d1a4daadbceea8b7d607b0fc":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FETCH_SEND, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION\n// signature: cd00b8e8012a24e53ddd463e8d95892404acbe85c78aa4d3ce64ac957a7096efb89cdd7619b120f997689a1e3be8fd27a4e1c5bc20a91c30c77d1b0708a9d7a5\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"basiccurl: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BASIC_CURL_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BASIC_CURL_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"basiccurl: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tlet downloadedFile = await availableAPIs.fetchSend({\n\t\t\turl: exec_args[0],\n\t\t\tinit: {}\n\t\t});\n\t\tdownloadedFile = downloadedFile.arrayBuffer;\n\t\tdownloadedFile = new TextDecoder().decode(downloadedFile);\n\t\tawait availableAPIs.fs_write({ path: exec_args[1], data: downloadedFile });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"basiccurl: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","f50def38036beb3865c71ec54d11b2c4ae02b6ab52c446a235b17a96fbd39829164ec5d22e6c8e8302e882eceb8827d83ff8bc2da17816909306a14e1b66fe90":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, PATCH_DIFF, RESOLVE_NAME, CONNFUL_CONNECT, CONNFUL_READ, CONNFUL_WRITE, CONNFUL_DISCONNECT, FS_LIST_PARTITIONS, CSP_OPERATIONS, START_TASK, LIST_TASKS, GET_UPDATE_SERVICE, CONNFUL_IDENTITY_GET\n// allow: FS_WRITE, RUN_KLVL_CODE, IPC_CREATE_PIPE, IPC_LISTEN_PIPE, GET_LOCALE, FS_LIST_PARTITIONS, SYSTEM_SHUTDOWN, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 2aed50b59c49f4b16c0893954c412deccd4c8ffd586dc15f5df699da9adc5b8dcd2b8861ea22ee83cd5b39d50b09f64c3733016c35e440ed333e77a1a71dc3f9\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (!pargs[\"override-modules\"]) {\n\t\tawait availableAPIs.toMyCLI(\"diffupdate no longer works on modular systems and will be replaced with a better version.\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"To run diffupdate anyway, re-run with --override-modules.\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\ttry {\n\t\tlet etcls = await availableAPIs.fs_ls({\n\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc\"\n\t\t});\n\t\tlet from = \"scratch\";\n\t\tlet originalVersion = \"\";\n\t\tif (etcls.includes(\"diffupdate_cache.js\")) {\n\t\t\toriginalVersion = await availableAPIs.fs_read({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/diffupdate_cache.js\"\n\t\t\t});\n\t\t\tfrom = originalVersion.split(\"\\n\")[5].match(/\\d\\w+/)[0];\n\t\t}\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"CURRENT_OSFILE_VERSION\")).replace(\"%s\", from) + \"\\r\\n\");\n\t\tlet serverDomainOrAddress = ppos[0] || ((await availableAPIs.getUpdateService()) || \"pcosserver.pc\");\n\t\tlet serverAddress = serverDomainOrAddress;\n\t\tif (!serverAddress.includes(\":\")) serverAddress = await availableAPIs.resolve(serverAddress);\n\t\tif (!serverAddress) throw new Error(await availableAPIs.lookupLocale(\"HOSTNAME_RESOLUTION_FAILED\"));\n\t\tserverAddress = serverAddress.replaceAll(\":\", \"\");\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"DOWNLOADING_OS_PATCH\")).replace(\"%s\", serverDomainOrAddress).replace(\"%s\", serverAddress.match(/.{1,4}/g).join(\":\")) + \"\\r\\n\");\n\t\tlet connection = await availableAPIs.connfulConnect({\n\t\t\tgate: \"deltaUpdate\",\n\t\t\taddress: serverAddress,\n\t\t\tverifyByDomain: serverDomainOrAddress.includes(\":\") ? serverAddress : serverDomainOrAddress,\n\t\t\tdoNotVerifyServer: pargs[\"fingerprint\"] || pargs[\"no-verification\"] || pargs[\"view-fingerprint\"]\n\t\t});\n\t\tawait availableAPIs.connfulConnectionSettled(connection);\n\t\tif (pargs[\"fingerprint\"] || pargs[\"view-fingerprint\"]) {\n\t\t\tlet identity = await availableAPIs.connfulIdentityGet(connection);\n\t\t\tlet hash = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"digest\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\talgorithm: \"SHA-256\",\n\t\t\t\t\tdata: new TextEncoder().encode(identity)\n\t\t\t\t}\n\t\t\t});\n\t\t\thash = Array.from(new Uint8Array(hash)).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\tif (pargs[\"view-fingerprint\"]) await availableAPIs.toMyCLI(\"--fingerprint=\" + hash + \"\\r\\n\");\n\t\t\tif (pargs[\"fingerprint\"] != hash) {\n\t\t\t\tawait availableAPIs.connfulDisconnect(connection);\n\t\t\t\tif (!pargs[\"view-fingerprint\"]) await availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"SERVER_SIGNATURE_VERIFICATION_FAILED\") + \"\\r\\n\");\n\t\t\t\treturn await availableAPIs.terminate();\n\t\t\t}\n\t\t}\n\t\tawait availableAPIs.connfulWrite({\n\t\t\tconnectionID: connection,\n\t\t\tdata: JSON.stringify({ from, handlesCtr: true })\n\t\t})\n\t\tlet patch = [];\n\t\twhile (true) {\n\t\t\tlet a = JSON.parse(await availableAPIs.connfulRead(connection));\n\t\t\tif (a.final) break;\n\t\t\tpatch[a.ctr] = a.hunk;\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\" + (await availableAPIs.lookupLocale(\"PATCH_HUNK_COUNT\")).replace(\"%s\", patch.length));\n\t\t}\n\t\tawait availableAPIs.connfulDisconnect(connection);\n\t\tawait availableAPIs.toMyCLI(\"\\r\" + (await availableAPIs.lookupLocale(\"PATCH_HUNK_COUNT\")).replace(\"%s\", patch.length) + \"\\r\\n\");\n\t\tif (patch.length == 0) {\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"SYSTEM_UP_TO_DATE\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/diffupdate_cache.js\",\n\t\t\tdata: (await availableAPIs.patchDiff({\n\t\t\t\toperation: \"applyPatch\",\n\t\t\t\targs: [ originalVersion, patch ]\n\t\t\t})).join(\"\")\n\t\t});\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"HANDOFF_UPDATE\") + \"\\r\\n\");\n\t\tlet task = await availableAPIs.startTask({\n\t\t\tfile: (await availableAPIs.getSystemMount()) + \"/apps/updateos.js\",\n\t\t\targPassed: [ (await availableAPIs.getSystemMount()) + \"/etc/diffupdate_cache.js\" ],\n\t\t\tsilent: true\n\t\t});\n\t\tawait availableAPIs.waitTermination(task);\n\t\tawait availableAPIs.terminate();\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"diffupdate: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","f155186095c6c768717fbd4e4d1ce1dbe36ca4fb2dd21ae79809114efbf5e42b9f28931fca64f215933d816bb00ee6c9143afb1b79b82c6d87a3aae0153ecad4":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_NETWORK_ADDRESS, GET_HOSTNAME, GET_UPDATE_SERVICE\n// signature: 0c2413828fa8ae6836508231711f8b72be0247e8e3b945efb2d3d05f4c3ffbe996aad3e75e50605139155178ba0ea9766365c40f6783babafc6ea02ffbdb0115\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"netinfo: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n    \n\ttry {\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_ADDRESS_FIELD\")).replace(\"%s\", (await availableAPIs.getNetworkAddress())?.match(/.{1,4}/g)?.join(\":\") || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\")) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_AUTOHOST_FIELD\")).replace(\"%s\", (await availableAPIs.getHostname() || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\"))) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_UPDATES_FIELD\")).replace(\"%s\", (await availableAPIs.getUpdateService() || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\"))) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"netinfo: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); ","1f4a4497491be64dbe7a72ff48ea4b5cc620cc2de0192dcc2785d501662fa13521aab9d9aeb5e4de6711781435466defd73f2b6890a382c9b1217bce28e7e876":"// =====BEGIN MANIFEST=====\n// allow: GET_LOCALE, RESOLVE_NAME, CONNFUL_CONNECT, IPC_CREATE_PIPE, FS_MOUNT, IPC_LISTEN_PIPE, CONNFUL_WRITE, CONNFUL_READ, IPC_SEND_PIPE, FS_READ\n// signer: automaticSigner\n// signature: 2983aeb278cad5c15523e27958dd43d08e091384f4a6bf1ed74f80973af23e7673522d23fc96713fc8e4a2d5a8cab2d14820db6191223ce85b81e3a95ae86946\n// =====END MANIFEST=====\nfunction IPv6Decompressor(ip) {\n\tlet array = ip.split(\":\");\n\tarray = array.slice(0, 8);\n\tlet foundTwoOrMoreZeroes = array.indexOf(\"\");\n\twhile (array.length != 8 && foundTwoOrMoreZeroes !== null) array.splice(foundTwoOrMoreZeroes, 0, \"0000\");\n\tarray = array.map(a => parseInt(a || \"0\", 16).toString(16).padStart(4, \"0\"));\n\treturn array.join(\":\");\n}\n(async function() {\n\t// @pcos-app-mode isolatable\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"networkfs: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.attachCLI();\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (ppos.length < 2) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"NETWORKFS_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"NETWORKFS_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"NETWORKFS_NOVERIFY\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"NETWORKFS_KEY\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"networkfs: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\tlet inPipe, outPipe, conn;\n\ttry {\n\t\tlet url = new URL(ppos[0]);\n\t\tif (url.protocol != \"netfs:\") throw new Error(await availableAPIs.lookupLocale(\"NETWORKFS_PROTO\"));\n\t\tif (url.port) throw new Error(await availableAPIs.lookupLocale(\"BLOG_BROWSER_GATESET\"));\n\t\tlet hostname = url.hostname, address;\n\t\tif (url.hostname.includes(\"[\")) {\n\t\t\thostname = IPv6Decompressor(url.hostname.slice(1, -1)).replaceAll(\":\", \"\");\n\t\t\taddress = hostname;\n\t\t} else address = await availableAPIs.resolve(hostname);\n\t\tif (!address) throw new Error(await availableAPIs.lookupLocale(\"HOSTNAME_RESOLUTION_FAILED\"));\n\t\tconn = await availableAPIs.connfulConnect({\n\t\t\tgate: url.username || \"netfs\",\n\t\t\taddress,\n\t\t\tverifyByDomain: hostname,\n\t\t\tkey: pargs.key ? JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: pargs.key\n\t\t\t})).key : undefined,\n\t\t\tprivate: pargs.key ? JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: pargs.key\n\t\t\t})).private : undefined,\n\t\t\tdoNotVerifyServer: pargs[\"no-verification\"]\n\t\t});\n\t\tawait availableAPIs.connfulConnectionSettled(conn);\n\t\tinPipe = await availableAPIs.createPipe();\n\t\toutPipe = await availableAPIs.createPipe();\n\t\tlet pipe2conn = (async function() {\n\t\t\twhile (true) {\n\t\t\t\tlet listenToPipe = await availableAPIs.listenToPipe(inPipe);\n\t\t\t\tavailableAPIs.connfulWrite({\n\t\t\t\t\tconnectionID: conn,\n\t\t\t\t\tdata: JSON.stringify(listenToPipe)\n\t\t\t\t});\n\t\t\t}\n\t\t})();\n\t\tlet conn2pipe = (async function() {\n\t\t\twhile (true) {\n\t\t\t\tlet networkListen = await availableAPIs.connfulRead(conn);\n\t\t\t\tavailableAPIs.sendToPipe({\n\t\t\t\t\tpipe: outPipe,\n\t\t\t\t\tdata: JSON.parse(networkListen)\n\t\t\t\t});\n\t\t\t}\n\t\t})();\n\t\tawait availableAPIs.fs_mount({\n\t\t\tmountpoint: ppos[1],\n\t\t\tfilesystem: \"IPCMount\",\n\t\t\tfilesystemOptions: {\n\t\t\t\tinputPipeId: inPipe,\n\t\t\t\toutputPipeId: outPipe\n\t\t\t}\n\t\t});\n\t\tawait Promise.all([pipe2conn, conn2pipe]);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"networkfs: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","5fb5bb3cc8f880785382a720368aea3a2e7904d323a33fe4179981c67bb53549245234cd12aa25dde777794c5972557763ece52a68e1ab4efbbcef624e66042f":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FETCH_SEND, PCOS_NETWORK_PING, RESOLVE_NAME\n// signature: 5047e69758d2953e87d7bd0891207872265484b3e65850eaf3c488fa22aef963345f1ce75a82183563be63a2aa3277330e7ee2835841bfce87cae882d31ff9f1\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"ping: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PING_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PING_DESCRIPTION\") + \"\\r\\n\")\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"PING_INTERNET_OPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"ping: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.includes(\"--internet\")) {\n\t\texec_args = exec_args.filter(a => a != \"--internet\");\n\t\tif (!exec_args.length) {\n\t\t\tawait availableAPIs.toMyCLI(\"ping: No URL specified\\r\\n\");\n\t\t\treturn availableAPIs.terminate();\n\t\t}\n\t\tawait availableAPIs.toMyCLI(\"Pinging \" + exec_args[0] + \" via HTTP...\\r\\n\");\n\t\tfor (let i = 1; i <= 4; i++) {\n\t\t\tawait new Promise((resolve) => setTimeout(() => resolve(\"ping\"), 500));\n\t\t\tlet time = performance.now();\n\t\t\ttry {\n\t\t\t\tif ((await Promise.race([availableAPIs.fetchSend({\n\t\t\t\t\turl: exec_args[0],\n\t\t\t\t\tinit: {\n\t\t\t\t\t\tnoArrayBuffer: true,\n\t\t\t\t\t\tmode: \"no-cors\"\n\t\t\t\t\t}\n\t\t\t\t}), new Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))])) == \"timeout\") throw new Error(\"Response timed out\");\n\t\t\t\ttime = performance.now() - time;\n\t\t\t\tawait availableAPIs.toMyCLI(\"http_seq=\" + i + \" time=\" + time.toFixed(2) + \" ms\\r\\n\");\n\t\t\t} catch (e) {\n\t\t\t\ttime = performance.now() - time;\n\t\t\t\tawait availableAPIs.toMyCLI(\"http_seq=\" + i + \" time=\" + time.toFixed(2) + \" ms err=\" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t\t}\n\t\t}\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet pingedAddress;\n\tif (exec_args[0].includes(\":\")) pingedAddress = exec_args[0].replaceAll(\":\", \"\");\n\telse {\n\t\ttry {\n\t\t\tpingedAddress = await Promise.race([\n\t\t\t\tavailableAPIs.resolve(exec_args[0]),\n\t\t\t\tnew Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))\n\t\t\t])\n\t\t\tif (pingedAddress == \"timeout\") throw new Error(\"Resolution timed out\");\n\t\t\tif (!pingedAddress) throw new Error(\"Could not resolve hostname\");\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"ping: \" + exec_args[0] + \": \" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(\"Pinging \" + exec_args[0] + \" (\" + pingedAddress.match(/.{1,4}/g).join(\":\") + \") via PCOS Network...\\r\\n\");\n\tfor (let i = 1; i <= 4; i++) {\n\t\tawait new Promise((resolve) => setTimeout(() => resolve(\"ping\"), 500));\n\t\tlet time = performance.now();\n\t\ttry {\n\t\t\tlet race = await Promise.race([availableAPIs.networkPing(pingedAddress), new Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))]);\n\t\t\tif (race == \"timeout\") throw new Error(\"Response timed out\");\n\t\t\ttime = performance.now() - time;\n\t\t\tawait availableAPIs.toMyCLI(\"count=\" + i + \" time=\" + time.toFixed(2) + \" ms\\r\\n\");\n\t\t} catch (e) {\n\t\t\ttime = performance.now() - time;\n\t\t\tawait availableAPIs.toMyCLI(\"count=\" + i + \" time=\" + time.toFixed(2) + \" ms err=\" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","7e762dab6a919d458613826adf32dfca76f35822ea862b9d9af8b8d7d446ae44c04dbb2c3ae6e47b6efeeaa63dfe77a22c09beb826ecae4eb5aea8bd53457026":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, RELOAD_NETWORK_CONFIG\n// signature: 6dc03482b02a1a2bfc9d10c68062758bdd995c0c016c25e5a712dc46469fe8b784c3d6b2306ad5a3bd192693918cebfc61c19cc342a3224dc0989cb9ae36e0c3\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"renetworkd: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tawait availableAPIs.reloadNetworkConfig();\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"renetworkd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","cbed52474f3ed4f8a475ca3ea81e98eda5f24172af8144949e3bc94e0cd9d6823b9de77c876851269cc78617cb711e2e3c18d7e332bf76df7d823f74409f75be":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: FETCH_SEND, SET_FIRMWARE, SYSTEM_SHUTDOWN, GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 7631023f591fd32f55896ab35781794d827a62c3b9dd4786f8aa9305afc4df1bfe4f2439473f1742579aafeabfe2547aa0aa92cfc48fd19c6c5b6a4cbf5dde07\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"updatefw: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOADING\") + \"\\r\\n\");\n\tlet fwArchive;\n\tif (!exec_args.length) {\n\t\ttry {\n\t\t\tfwArchive = await availableAPIs.fetchSend({\n\t\t\t\turl: \"/init.js\",\n\t\t\t\tinit: {}\n\t\t\t});\n\t\t\tif (!fwArchive.ok) throw new Error(\"Non-OK response (\" + fwArchive.status + \" \" + fwArchive.statusText + \")\");\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tfwArchive = { arrayBuffer: new TextEncoder().encode(await availableAPIs.fs_read({\n\t\t\t\tpath: exec_args[0]\n\t\t\t})) };\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DECODING\") + \"\\r\\n\");\n\tfwArchive = fwArchive.arrayBuffer;\n\tfwArchive = new TextDecoder().decode(fwArchive);\n\ttry {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_SETTING\") + \"\\r\\n\");\n\t\tawait availableAPIs.setFirmware(fwArchive);\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RESTARTING\") + \"\\r\\n\");\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: true\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"updatefw: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","e0722c800fbead1675b1de8f2fa98046226d647f807c00110a15b593ea86cb3e5f4a94597c373c6dcd9ddbc7e6a91072591a62d7a62d59b8c50a6a2938e9e9a5":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: FETCH_SEND, FS_WRITE, RUN_KLVL_CODE, IPC_CREATE_PIPE, IPC_LISTEN_PIPE, GET_LOCALE, FS_LIST_PARTITIONS, SYSTEM_SHUTDOWN, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 4dd84cee717b038ee31f45cc9022df36def519b1e263845004b3d4ddf0e3f63f04e24489f313476bab23a25d766af6f42b90a02985057c44e7057b1d7f97a8ad\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"updateos: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (!pargs[\"override-modules\"]) {\n\t\tawait availableAPIs.toMyCLI(\"updateos no longer works on modular systems and will be replaced with a better version.\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"To run updateos anyway, re-run with --override-modules.\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REINSTALL_DOWNLOADING\") + \"\\r\\n\");\n\tlet osArchive;\n\tif (!ppos[0]) {\n\t\ttry {\n\t\t\tosArchive = await availableAPIs.fetchSend({\n\t\t\t\turl: ppos.url || \"/os.js\",\n\t\t\t\tinit: {}\n\t\t\t});\n\t\t\tif (!osArchive.ok) throw new Error(\"Non-OK response (\" + osArchive.status + \" \" + osArchive.statusText + \")\");\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REINSTALL_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tosArchive = { arrayBuffer: new TextEncoder().encode(await availableAPIs.fs_read({\n\t\t\t\tpath: exec_args[0]\n\t\t\t})) };\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REINSTALL_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REINSTALL_DECODING\") + \"\\r\\n\");\n\tosArchive = osArchive.arrayBuffer;\n\tosArchive = new TextDecoder().decode(osArchive);\n\tlet files = osArchive.split(/\\/\\/ [0-9]+-.+.js\\n/g).slice(1);\n\tlet names = osArchive.match(/\\/\\/ [0-9]+-.+.js/g);\n\tlet appIndex = names.indexOf(\"// \" + \"1\" + \"5-ap\" + \"ps.js\");\n\tlet apps = files[appIndex].match(/async function (.+)Installer\\(target, token\\)/g).map(a => a.split(\" \")[2].split(\"(\")[0]);\n\tapps.splice(apps.indexOf(\"autoinstallerInstaller\"), 1);\n\tapps.splice(apps.indexOf(\"installerInstaller\"), 1);\n\tapps.splice(apps.indexOf(\"secondstageInstaller\"), 1);\n\tlet pipeResult = false;\n\ttry {\n\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\tpipeResult = availableAPIs.listenToPipe(ipcPipe);\n\t\tlet installerCode = \"\";\n\t\tfor (let app of apps) installerCode += `await ${app}(modules.defaultSystem, ${JSON.stringify(await availableAPIs.getProcessToken())});\\n`;\n\t\tawait availableAPIs.runKlvlCode(`(async function() {\n\t\t\ttry {\n\t\t\t\t${files[appIndex]}\n\t\t\t\t${installerCode}\n\t\t\t\tmodules.ipc.send(${JSON.stringify(ipcPipe)}, true);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\tmodules.ipc.send(${JSON.stringify(ipcPipe)}, false);\n\t\t\t}\n\t\t})();`);\n\t\tpipeResult = await pipeResult;\n\t\tawait availableAPIs.closePipe(ipcPipe);\n\t} catch {}\n\tif (!pipeResult) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATE_EXTRA_FAIL\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tfiles.splice(appIndex, 1);\n\tnames.splice(appIndex, 1);\n\tlet installerIndex = names.indexOf(\"// 1\" + \"0\" + \"-ins\" + \"taller.js\");\n\tfiles.splice(installerIndex, 1);\n\tnames.splice(installerIndex, 1);\n\tlet secondStageIndex = names.indexOf(\"// 1\" + \"7\" + \"-instal\" + \"ler-seconds\" + \"tage.js\");\n\tfiles.splice(secondStageIndex, 1);\n\tnames.splice(secondStageIndex, 1);\n\tfor (let file in files) {\n\t\tlet name = names[file].split(\" \").slice(1).join(\" \");\n\t\tlet content = files[file];\n\t\ttry {\n\t\t\tawait availableAPIs.toMyCLI(\"\\t/boot/\" + name + \"\\r\\n\");\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/\" + name,\n\t\t\t\tdata: content\n\t\t\t});\n\t\t} catch {\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATE_BOOT_FAIL\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tif (!pargs[\"no-reboot\"]) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RESTARTING\") + \"\\r\\n\");\n\t\ttry {\n\t\t\tawait availableAPIs.shutdown({\n\t\t\t\tisReboot: true,\n\t\t\t\tisKexec: true\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"updateos: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1323","when":1750879701601,"signer":"moduleSigner","critical":false,"signature":"31275a26f511850cd02e999b234b5c04d0f56422407e2bea56312d332d1481cd181f720622643735f1222a1b521b7f2b36d25eae2d47be58e9974590e00cafe4"}}