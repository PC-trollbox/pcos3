{"backend":{"files":{"apps":{"links":{"moduleManager.lnk":"2ee29e01ab3e9d295dc1c85c405e44316f63943b26eb12369ac82632fa267e772d383131d344deb87f5a79d67129f7c0d077b8d2bdba8819a445d27460c37a5d","pcosNetwork.lnk":"17d5df5609ed3e6e9b5a1f3eaddbba27c60f01ca7f0d24701cf1007ee64c9542451b0872731b6a9667ee5682234e41d87d2fee955cdd07c31ffc78834a8f848e","personalSecurity.lnk":"cd62764d2aeb3c9b8700ee7148ca552b25537f824f4f867be8951027fda08315fd1c857a41e1f52a78cc3b42cfbf0fd20c6699f9958ea2e0e265fbd8350a72b6","sysAdmin.lnk":"916d894b5f974cee90892ee231b6858a0e4232c4f7ac228cee5f522aa21712208520257e1c6435d1c900de79a95f036ffdc7869b7862fbccf48f7fba275c3b1e","systemSecurity.lnk":"831df6f1e43a2dd65121b3dc5c000d9856ceac1d22e120c252674db1e7a5272fc5577a645ae237ebacb3a06d38fe3e9b21ec05bc37fe641ca6fb9374b484f65e","taskManager.lnk":"215a022de20cf6c04c946a35a2cbb2542355290e3f0528ae807ea064e4cc00c60dcce07b31d6660547bac2ecafae40d995aee0a6f670c0f31ebd2af3f0f9e2f0"},"moduleManager.js":"26740c9f4b4a9a4dc1664a60e9a8f5dee21bf5f2c427ad582f2ab6192e7e95162b70c959580ce4e85329fd7e52630b96e878a1a236238c4d251b7331c3de0a2f","pcosNetwork.js":"a79de631b487087c72a6c983a42dfe5af6feb66399e6bf6ad3e05dbb39931a1b6af1d13732ac195cc4ee01e65294119d536efe6f03c76169cf08d9ec6e86de25","personalSecurity.js":"c5c1e73db9d30c748e617e2a79f1f05ee3bb6e5e1497b1995c9fc91ab519fe4283aae4f470e5b0d399b92b60cc3affdb921e55d524256790ae6bb9972151d37d","sysAdmin.js":"5d0b1a9486178d80f3b94776eac4d98304c4d53c5fd4c61399461314cffa9a16d4fc4c370e2dd20d243ef0883594cc2fd7f0ede9088956fa46d1757d1a84c500","systemSecurity.js":"32cbde05baf963ca07cf50f031f0d16d90c8bb8760672259eb224a645fbfa67e36ecfac52ec3b7dd81f28cec6f179a4334d26cd76cd33d8226e2718704488b63","taskManager.js":"2e64c15e22c54259b3336fcb33f823a4af5a8e438aedcb8f76bdd1b9f8eb83963373b6adeed8aba70a9ce427ad3fae37ece3c29c0f6094f6661e07e0084109a8"}},"permissions":{"apps/links/moduleManager.lnk":{"world":"rx"},"apps/links/pcosNetwork.lnk":{"world":"rx"},"apps/links/personalSecurity.lnk":{"world":"rx"},"apps/links/sysAdmin.lnk":{"world":"rx"},"apps/links/systemSecurity.lnk":{"world":"rx"},"apps/links/taskManager.lnk":{"world":"rx"},"apps/links/":{"world":"rx"},"apps/moduleManager.js":{"world":"rx"},"apps/pcosNetwork.js":{"world":"rx"},"apps/personalSecurity.js":{"world":"rx"},"apps/sysAdmin.js":{"world":"rx"},"apps/systemSecurity.js":{"world":"rx"},"apps/taskManager.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"2ee29e01ab3e9d295dc1c85c405e44316f63943b26eb12369ac82632fa267e772d383131d344deb87f5a79d67129f7c0d077b8d2bdba8819a445d27460c37a5d":"{\"path\":\"system/apps/moduleManager.js\",\"localeReferenceName\":\"MODMGR_TITLE\"}","17d5df5609ed3e6e9b5a1f3eaddbba27c60f01ca7f0d24701cf1007ee64c9542451b0872731b6a9667ee5682234e41d87d2fee955cdd07c31ffc78834a8f848e":"{\"path\":\"system/apps/pcosNetwork.js\",\"localeReferenceName\":\"NETCONFIG_TITLE\"}","cd62764d2aeb3c9b8700ee7148ca552b25537f824f4f867be8951027fda08315fd1c857a41e1f52a78cc3b42cfbf0fd20c6699f9958ea2e0e265fbd8350a72b6":"{\"path\":\"system/apps/personalSecurity.js\",\"localeReferenceName\":\"PERSONAL_SECURITY_TITLE\"}","916d894b5f974cee90892ee231b6858a0e4232c4f7ac228cee5f522aa21712208520257e1c6435d1c900de79a95f036ffdc7869b7862fbccf48f7fba275c3b1e":"{\"path\":\"system/apps/sysAdmin.js\",\"localeReferenceName\":\"SYSADMIN_TOOLS_TITLE\"}","831df6f1e43a2dd65121b3dc5c000d9856ceac1d22e120c252674db1e7a5272fc5577a645ae237ebacb3a06d38fe3e9b21ec05bc37fe641ca6fb9374b484f65e":"{\"path\":\"system/apps/systemSecurity.js\",\"localeReferenceName\":\"SYSTEM_SECURITY_TITLE\"}","215a022de20cf6c04c946a35a2cbb2542355290e3f0528ae807ea064e4cc00c60dcce07b31d6660547bac2ecafae40d995aee0a6f670c0f31ebd2af3f0f9e2f0":"{\"path\":\"system/apps/taskManager.js\",\"localeReferenceName\":\"TASK_MANAGER\"}","26740c9f4b4a9a4dc1664a60e9a8f5dee21bf5f2c427ad582f2ab6192e7e95162b70c959580ce4e85329fd7e52630b96e878a1a236238c4d251b7331c3de0a2f":"// =====BEGIN MANIFEST=====\n// allow: GET_ROOT_KEY, FS_UNMOUNT, FS_MOUNT, CSP_OPERATIONS, GET_THEME, GET_LOCALE, FS_REMOVE, FS_READ, FS_WRITE, FS_LIST_PARTITIONS, FS_BYPASS_PERMISSIONS, RESOLVE_NAME, CONNFUL_CONNECT, CONNFUL_READ, CONNFUL_WRITE, CONNFUL_DISCONNECT, GET_UPDATE_SERVICE, SYSTEM_SHUTDOWN, MANAGE_TOKENS, ELEVATE_PRIVILEGES\n// signer: automaticSigner\n// signature: 28bf09a233f4709cc1e2cbad911170f11598e6950f9a0b3b3d66a21a053022fd5459aa292952b50bda8d3c835a3a8c6690a7d2280ff0b81e1cf34f0e311bb400\n// =====END MANIFEST=====\nlet hexToU8A = (hex) => Uint8Array.from(hex.match(/.{1,2}/g).map(a => parseInt(a, 16)));\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"MODMGR_TITLE\"));\n\tlet privileges = await availableAPIs.getPrivileges();\n\tdocument.body.style.fontFamily = \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\";\n\tif (await availableAPIs.isDarkThemed()) document.body.style.color = \"white\";\n\tlet checklist = [ \"FS_UNMOUNT\", \"FS_MOUNT\", \"CSP_OPERATIONS\", \"FS_REMOVE\", \"FS_READ\", \"FS_WRITE\", \"FS_LIST_PARTITIONS\", \"FS_BYPASS_PERMISSIONS\", \"RESOLVE_NAME\", \"CONNFUL_CONNECT\", \"CONNFUL_READ\", \"CONNFUL_WRITE\", \"CONNFUL_DISCONNECT\", \"GET_UPDATE_SERVICE\", \"SYSTEM_SHUTDOWN\", \"MANAGE_TOKENS\", \"ELEVATE_PRIVILEGES\" ];\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tdocument.body.innerText = await availableAPIs.lookupLocale(\"MODMGR_PRIVFAIL\");\n\t\tlet currentToken = await availableAPIs.getProcessToken();\n\t\tlet newToken = await availableAPIs.consentGetToken({\n\t\t\tintent: await availableAPIs.lookupLocale(\"MODMGR_INTENT\"),\n\t\t\tname: await availableAPIs.lookupLocale(\"MODMGR_TITLE\")\n\t\t});\n\t\tif (!newToken) return;\n\t\tawait availableAPIs.setProcessToken(newToken);\n\t\tawait availableAPIs.revokeToken(currentToken);\n\t\tprivileges = await availableAPIs.getPrivileges();\n\t\tif (!checklist.every(p => privileges.includes(p))) return;\n\t}\n\tdocument.body.innerText = \"\";\n\n\tlet styleElement = document.createElement(\"style\");\n\tstyleElement.innerText = `th, td { border: 1px solid black; }\n\ttable { overflow: scroll; min-width: 100%; width: max-content; }`;\n\tdocument.head.appendChild(styleElement);\n\tlet container = document.createElement(\"div\");\n\tlet activityNote = document.createElement(\"div\");\n\tlet updateModCfgBtn = document.createElement(\"button\");\n\tlet installOnlineModuleBtn = document.createElement(\"button\");\n\tlet removeModuleBtn = document.createElement(\"button\");\n\tlet updateSystemButton = document.createElement(\"button\");\n\tlet regenerateKernelBtn = document.createElement(\"button\");\n\tlet repairOSBtn = document.createElement(\"button\");\n\tlet mountOfflineBtn = document.createElement(\"button\");\n\tlet umountOfflineBtn = document.createElement(\"button\");\n\tlet swapToSystemBtn = document.createElement(\"button\");\n\n\tupdateModCfgBtn.innerText = await availableAPIs.lookupLocale(\"UPDATE_MODCFG\");\n\tinstallOnlineModuleBtn.innerText = await availableAPIs.lookupLocale(\"INSTALL_ONLINE_MODULE\");\n\tremoveModuleBtn.innerText = await availableAPIs.lookupLocale(\"REMOVE_MODULES\");\n\tupdateSystemButton.innerText = await availableAPIs.lookupLocale(\"UPDATE_BUTTON\");\n\tregenerateKernelBtn.innerText = await availableAPIs.lookupLocale(\"REGENERATE_KERNEL\");\n\trepairOSBtn.innerText = await availableAPIs.lookupLocale(\"REPAIR_OS\");\n\tmountOfflineBtn.innerText = await availableAPIs.lookupLocale(\"MOUNT_OFFLINE_OS\");\n\tumountOfflineBtn.innerText = await availableAPIs.lookupLocale(\"UMOUNT_OFFLINE_OS\");\n\tswapToSystemBtn.innerText = await availableAPIs.lookupLocale(\"SWAP_OFFLINE_OS\");\n\n\tupdateModCfgBtn.addEventListener(\"click\", async function() {\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"UPDATING_MODCFG\");\n\t\ttry {\n\t\t\tlet updateService = new URL(\"bdp://localhost\");\n\t\t\tupdateService.hostname = await availableAPIs.getUpdateService();\n\t\t\tlet moduleConfig = JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\"\n\t\t\t}));\n\t\t\tmoduleConfig.remote = JSON.parse((await bdpGet(new URL(\"/module_repository/moduleConfig.json\", updateService))).content);\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\",\n\t\t\t\tdata: JSON.stringify(moduleConfig)\n\t\t\t});\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"UPDATE_COUNTING\");\n\t\t\tlet forUpdate = [];\n\t\t\tfor (let module in moduleConfig.local) if (moduleConfig.remote.hasOwnProperty(module))\n\t\t\t\tif (moduleConfig.remote[module].version > moduleConfig.local[module].version) \n\t\t\t\t\tforUpdate.push(module);\n\t\t\tactivityNote.innerText = (await availableAPIs.lookupLocale(\"UPDATE_COUNT\")).replace(\"%s\", forUpdate.length);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"FAILED_TO_UPDATE\");\n\t\t}\n\t\tcontainer.hidden = false;\n\t\tawait availableAPIs.closeability(true);\n\t});\n\n\tinstallOnlineModuleBtn.addEventListener(\"click\", async function() {\n\t\tcontainer.hidden = true;\n\t\tawait availableAPIs.closeability(false);\n\t\tactivityNote.innerText = \"\";\n\t\ttry {\n\t\t\tlet updateService = new URL(\"bdp://localhost\");\n\t\t\tupdateService.hostname = await availableAPIs.getUpdateService();\n\t\t\tlet moduleConfig = JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\"\n\t\t\t}));\n\t\t\tlet table = document.createElement(\"table\");\n\t\t\tlet tableHead = document.createElement(\"thead\");\n\t\t\tlet tableHeadRow = document.createElement(\"tr\");\n\t\t\tlet tableCellInstalled = document.createElement(\"th\");\n\t\t\tlet tableCellModName = document.createElement(\"th\");\n\t\t\tlet tableCellModVersion = document.createElement(\"th\");\n\t\t\tlet tableCellTargeting = document.createElement(\"th\");\n\t\t\tlet tableBody = document.createElement(\"tbody\");\n\t\t\tlet applyChangesBtn = document.createElement(\"button\");\n\t\t\tlet discardChangesBtn = document.createElement(\"button\");\n\t\t\ttableCellModName.innerText = await availableAPIs.lookupLocale(\"MODNAME_CELL\");\n\t\t\ttableCellModVersion.innerText = await availableAPIs.lookupLocale(\"MODVER_CELL\");\n\t\t\ttableCellTargeting.innerText = await availableAPIs.lookupLocale(\"MODTGT_CELL\");\n\t\t\tapplyChangesBtn.innerText = await availableAPIs.lookupLocale(\"APPLY_CHANGES\");\n\t\t\tdiscardChangesBtn.innerText = await availableAPIs.lookupLocale(\"DISCARD_CHANGES\");\n\t\t\tlet lostModules = Object.keys(moduleConfig.local).filter(a => !(moduleConfig.remote || {})[a]).sort((a, b) => a.localeCompare(b));\n\t\t\tlet remoteModules = Object.keys(moduleConfig.remote || {}).sort((a, b) => a.localeCompare(b));\n\t\t\tlet toInstall = [];\n\t\t\tlet isRegenNeeded = false;\n\t\t\tfor (let module of lostModules) {\n\t\t\t\tlet tableRow = document.createElement(\"tr\");\n\t\t\t\tlet tableCellInstalled = document.createElement(\"td\");\n\t\t\t\tlet tableCellModName = document.createElement(\"td\");\n\t\t\t\tlet tableCellModVersion = document.createElement(\"td\");\n\t\t\t\tlet tableCellTargeting = document.createElement(\"td\");\n\t\t\t\tlet checkboxInstalled = document.createElement(\"input\");\n\t\t\t\tcheckboxInstalled.type = \"checkbox\";\n\t\t\t\tcheckboxInstalled.checked = true;\n\t\t\t\tcheckboxInstalled.disabled = true;\n\t\t\t\ttableCellModName.innerText = module;\n\t\t\t\ttableCellModVersion.innerText = moduleConfig.local[module].version;\n\t\t\t\ttableCellTargeting.innerText = moduleConfig.local[module].for;\n\t\t\t\ttableCellInstalled.appendChild(checkboxInstalled);\n\t\t\t\ttableRow.appendChild(tableCellInstalled);\n\t\t\t\ttableRow.appendChild(tableCellModName);\n\t\t\t\ttableRow.appendChild(tableCellModVersion);\n\t\t\t\ttableRow.appendChild(tableCellTargeting);\n\t\t\t\ttableBody.appendChild(tableRow);\n\t\t\t}\n\t\t\tfor (let module of remoteModules) {\n\t\t\t\tlet tableRow = document.createElement(\"tr\");\n\t\t\t\tlet tableCellInstalled = document.createElement(\"td\");\n\t\t\t\tlet tableCellModName = document.createElement(\"td\");\n\t\t\t\tlet tableCellModVersion = document.createElement(\"td\");\n\t\t\t\tlet tableCellTargeting = document.createElement(\"td\");\n\t\t\t\tlet checkboxInstalled = document.createElement(\"input\");\n\t\t\t\tcheckboxInstalled.type = \"checkbox\";\n\t\t\t\tlet isInstalled = false, isUpdatable = false;\n\t\t\t\tcheckboxInstalled.checked = checkboxInstalled.disabled = moduleConfig.local[module];\n\t\t\t\tif (checkboxInstalled.checked) isInstalled = true;\n\t\t\t\tif (checkboxInstalled.checked && moduleConfig.remote[module].version > moduleConfig.local[module].version) {\n\t\t\t\t\tcheckboxInstalled.checked = checkboxInstalled.disabled = false;\n\t\t\t\t\tcheckboxInstalled.indeterminate = true;\n\t\t\t\t\tisUpdatable = true;\n\t\t\t\t}\n\n\t\t\t\tcheckboxInstalled.onchange = function() {\n\t\t\t\t\tif (!checkboxInstalled.checked && isUpdatable) checkboxInstalled.indeterminate = true;\n\t\t\t\t\tif (toInstall.includes(module)) toInstall.splice(toInstall.indexOf(module), 1);\n\t\t\t\t\telse toInstall.push(module);\n\t\t\t\t};\n\n\t\t\t\ttableCellModName.innerText = module;\n\t\t\t\ttableCellModVersion.innerText = moduleConfig.remote[module].version;\n\t\t\t\tif (isInstalled && moduleConfig.remote[module].version > moduleConfig.local[module].version)\n\t\t\t\t\ttableCellModVersion.innerText = moduleConfig.local[module].version + \" -> \" + tableCellModVersion.innerText;\n\t\t\t\telse if (isInstalled && moduleConfig.remote[module].version < moduleConfig.local[module].version)\n\t\t\t\t\ttableCellModVersion.innerText = moduleConfig.local[module].version + \" <- \" + tableCellModVersion.innerText;\n\t\t\t\ttableCellTargeting.innerText = moduleConfig.remote[module].for;\n\t\t\t\tif (isInstalled && moduleConfig.remote[module].for != moduleConfig.local[module].for)\n\t\t\t\t\ttableCellTargeting.innerText = moduleConfig.local[module].version + \" -> \" + tableCellTargeting.innerText;\n\n\t\t\t\ttableCellInstalled.appendChild(checkboxInstalled);\n\t\t\t\ttableRow.appendChild(tableCellInstalled);\n\t\t\t\ttableRow.appendChild(tableCellModName);\n\t\t\t\ttableRow.appendChild(tableCellModVersion);\n\t\t\t\ttableRow.appendChild(tableCellTargeting);\n\t\t\t\ttableBody.appendChild(tableRow);\n\t\t\t}\n\t\t\ttableHeadRow.appendChild(tableCellInstalled);\n\t\t\ttableHeadRow.appendChild(tableCellModName);\n\t\t\ttableHeadRow.appendChild(tableCellModVersion);\n\t\t\ttableHeadRow.appendChild(tableCellTargeting);\n\t\t\ttableHead.appendChild(tableHeadRow);\n\t\t\ttable.appendChild(tableHead);\n\t\t\ttable.appendChild(tableBody);\n\t\t\tactivityNote.appendChild(table);\n\t\t\tactivityNote.appendChild(applyChangesBtn);\n\t\t\tactivityNote.appendChild(discardChangesBtn);\n\t\t\tawait new Promise(async function(resolve, reject) {\n\t\t\t\tdiscardChangesBtn.onclick = _ => reject();\n\t\t\t\tapplyChangesBtn.onclick = async function() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet modNum = 0;\n\t\t\t\t\t\tfor (let module of toInstall) {\n\t\t\t\t\t\t\tactivityNote.innerText = (await availableAPIs.lookupLocale(\"INSTALLING_MODULE\")).replace(\"%s\", module).replace(\"%s\", modNum + 1).replace(\"%s\", toInstall.length).replace(\"%s\", (modNum / toInstall.length * 100).toFixed(2));\n\t\t\t\t\t\t\tif (moduleConfig.local[module] && moduleConfig.remote[module].bootOrder != moduleConfig.local[module].bootOrder)\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_rm({\n\t\t\t\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + moduleConfig.local[module].bootOrder + \"-\" + module + \".fs\"\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet moduleContent = (await bdpGet(new URL(\"/module_repository/\" + moduleConfig.remote[module].bootOrder + \"-\" + module + \".fs\", updateService))).content;\n\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + moduleConfig.remote[module].bootOrder + \"-\" + module + \".fs\",\n\t\t\t\t\t\t\t\tdata: moduleContent\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (JSON.parse(moduleContent).backend?.files?.boot) isRegenNeeded = true;\n\t\t\t\t\t\t\tmoduleConfig.local[module] = JSON.parse(moduleContent).buildInfo;\n\t\t\t\t\t\t\tmodNum++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\",\n\t\t\t\t\t\t\tdata: JSON.stringify(moduleConfig)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"RELOADING_MODULES\");\n\t\t\t\t\t\tawait reloadModules(await availableAPIs.getSystemMount());\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (isRegenNeeded) await regenerateKernel();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"REGENERATING_KERNEL_FAILED\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\");\n\t\t\t\t\t\tif (isRegenNeeded) activityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP_REBOOT\");\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} catch (e) { reject(e); }\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"FAILED_OP\");\n\t\t}\n\t\tcontainer.hidden = false;\n\t\tawait availableAPIs.closeability(true);\n\t});\n\n\tremoveModuleBtn.addEventListener(\"click\", async function() {\n\t\tcontainer.hidden = true;\n\t\tawait availableAPIs.closeability(false);\n\t\tactivityNote.innerText = \"\";\n\t\ttry {\n\t\t\tlet updateService = new URL(\"bdp://localhost\");\n\t\t\tupdateService.hostname = await availableAPIs.getUpdateService();\n\t\t\tlet moduleConfig = JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\"\n\t\t\t}));\n\t\t\tlet table = document.createElement(\"table\");\n\t\t\tlet tableHead = document.createElement(\"thead\");\n\t\t\tlet tableHeadRow = document.createElement(\"tr\");\n\t\t\tlet tableCellInstalled = document.createElement(\"th\");\n\t\t\tlet tableCellModName = document.createElement(\"th\");\n\t\t\tlet tableCellModVersion = document.createElement(\"th\");\n\t\t\tlet tableCellTargeting = document.createElement(\"th\");\n\t\t\tlet tableBody = document.createElement(\"tbody\");\n\t\t\tlet applyChangesBtn = document.createElement(\"button\");\n\t\t\tlet discardChangesBtn = document.createElement(\"button\");\n\t\t\ttableCellModName.innerText = await availableAPIs.lookupLocale(\"MODNAME_CELL\");\n\t\t\ttableCellModVersion.innerText = await availableAPIs.lookupLocale(\"MODVER_CELL\");\n\t\t\ttableCellTargeting.innerText = await availableAPIs.lookupLocale(\"MODTGT_CELL\");\n\t\t\tapplyChangesBtn.innerText = await availableAPIs.lookupLocale(\"APPLY_CHANGES\");\n\t\t\tdiscardChangesBtn.innerText = await availableAPIs.lookupLocale(\"DISCARD_CHANGES\");\n\t\t\tlet toRemove = [];\n\t\t\tlet unremovable = [ \"bootable\", \"core\", \"keys\" ];\n\t\t\tlet isRegenNeeded = false;\n\t\t\tlet localModules = Object.keys(moduleConfig.local).sort((a, b) => a.localeCompare(b));\n\t\t\tfor (let module of localModules) {\n\t\t\t\tlet tableRow = document.createElement(\"tr\");\n\t\t\t\tlet tableCellInstalled = document.createElement(\"td\");\n\t\t\t\tlet tableCellModName = document.createElement(\"td\");\n\t\t\t\tlet tableCellModVersion = document.createElement(\"td\");\n\t\t\t\tlet tableCellTargeting = document.createElement(\"td\");\n\t\t\t\tlet checkboxInstalled = document.createElement(\"input\");\n\t\t\t\tcheckboxInstalled.type = \"checkbox\";\n\t\t\t\tcheckboxInstalled.checked = true;\n\t\t\t\tcheckboxInstalled.disabled = unremovable.includes(module);\n\n\t\t\t\tcheckboxInstalled.onchange = function() {\n\t\t\t\t\tif (toRemove.includes(module)) toRemove.splice(toRemove.indexOf(module), 1);\n\t\t\t\t\telse toRemove.push(module);\n\t\t\t\t};\n\n\t\t\t\ttableCellModName.innerText = module;\n\t\t\t\ttableCellModVersion.innerText = moduleConfig.local[module].version;\n\t\t\t\ttableCellTargeting.innerText = moduleConfig.local[module].for;\n\n\t\t\t\ttableCellInstalled.appendChild(checkboxInstalled);\n\t\t\t\ttableRow.appendChild(tableCellInstalled);\n\t\t\t\ttableRow.appendChild(tableCellModName);\n\t\t\t\ttableRow.appendChild(tableCellModVersion);\n\t\t\t\ttableRow.appendChild(tableCellTargeting);\n\t\t\t\ttableBody.appendChild(tableRow);\n\t\t\t}\n\t\t\ttableHeadRow.appendChild(tableCellInstalled);\n\t\t\ttableHeadRow.appendChild(tableCellModName);\n\t\t\ttableHeadRow.appendChild(tableCellModVersion);\n\t\t\ttableHeadRow.appendChild(tableCellTargeting);\n\t\t\ttableHead.appendChild(tableHeadRow);\n\t\t\ttable.appendChild(tableHead);\n\t\t\ttable.appendChild(tableBody);\n\t\t\tactivityNote.appendChild(table);\n\t\t\tactivityNote.appendChild(applyChangesBtn);\n\t\t\tactivityNote.appendChild(discardChangesBtn);\n\t\t\tawait new Promise(async function(resolve, reject) {\n\t\t\t\tdiscardChangesBtn.onclick = _ => reject();\n\t\t\t\tapplyChangesBtn.onclick = async function() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet modNum = 0;\n\t\t\t\t\t\tfor (let module of toRemove) {\n\t\t\t\t\t\t\tactivityNote.innerText = (await availableAPIs.lookupLocale(\"REMOVING_MODULE\")).replace(\"%s\", module).replace(\"%s\", modNum + 1).replace(\"%s\", toRemove.length).replace(\"%s\", (modNum / toRemove.length * 100).toFixed(2));\n\t\t\t\t\t\t\tisRegenNeeded = isRegenNeeded || !!(JSON.parse(await availableAPIs.fs_read({\n\t\t\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + moduleConfig.local[module].bootOrder + \"-\" + module + \".fs\"\n\t\t\t\t\t\t\t})).backend?.files?.boot);\n\t\t\t\t\t\t\tawait availableAPIs.fs_rm({\n\t\t\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + moduleConfig.local[module].bootOrder + \"-\" + module + \".fs\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdelete moduleConfig.local[module];\n\t\t\t\t\t\t\tmodNum++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\",\n\t\t\t\t\t\t\tdata: JSON.stringify(moduleConfig)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"RELOADING_MODULES\");\n\t\t\t\t\t\tawait reloadModules(await availableAPIs.getSystemMount());\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (isRegenNeeded) await regenerateKernel();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"REGENERATING_KERNEL_FAILED\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\");\n\t\t\t\t\t\tif (isRegenNeeded) activityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP_REBOOT\");\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} catch (e) { reject(e); }\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"FAILED_OP\");\n\t\t}\n\t\tcontainer.hidden = false;\n\t\tawait availableAPIs.closeability(true);\n\t});\n\n\tupdateSystemButton.addEventListener(\"click\", async function() {\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"UPDATING_MODULES\");\n\t\ttry {\n\t\t\tlet updateService = new URL(\"bdp://localhost\");\n\t\t\tupdateService.hostname = await availableAPIs.getUpdateService();\n\t\t\tlet moduleConfig = JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\"\n\t\t\t}));\n\t\t\tlet forUpdate = [];\n\t\t\tlet isRegenNeeded = false;\n\t\t\tfor (let module in moduleConfig.local) if (moduleConfig.remote.hasOwnProperty(module))\n\t\t\t\tif (moduleConfig.remote[module].version > moduleConfig.local[module].version) \n\t\t\t\t\tforUpdate.push(module);\n\t\t\tlet modNum = 0;\n\t\t\tfor (let module of forUpdate) {\n\t\t\t\tactivityNote.innerText = (await availableAPIs.lookupLocale(\"INSTALLING_MODULE\")).replace(\"%s\", module).replace(\"%s\", modNum + 1).replace(\"%s\", forUpdate.length).replace(\"%s\", (modNum / forUpdate.length * 100).toFixed(2));\n\t\t\t\tif (moduleConfig.remote[module].bootOrder != moduleConfig.local[module].bootOrder)\n\t\t\t\t\tawait availableAPIs.fs_rm({\n\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + moduleConfig.local[module].bootOrder + \"-\" + module + \".fs\"\n\t\t\t\t\t});\n\t\t\t\tlet moduleContent = (await bdpGet(new URL(\"/module_repository/\" + moduleConfig.remote[module].bootOrder + \"-\" + module + \".fs\", updateService))).content;\n\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + moduleConfig.remote[module].bootOrder + \"-\" + module + \".fs\",\n\t\t\t\t\tdata: moduleContent\n\t\t\t\t});\n\t\t\t\tif (JSON.parse(moduleContent).backend?.files?.boot) isRegenNeeded = true;\n\t\t\t\tmoduleConfig.local[module] = JSON.parse(moduleContent).buildInfo;\n\t\t\t\tmodNum++;\n\t\t\t}\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\",\n\t\t\t\tdata: JSON.stringify(moduleConfig)\n\t\t\t});\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"RELOADING_MODULES\");\n\t\t\tawait reloadModules(await availableAPIs.getSystemMount());\n\t\t\t\n\t\t\ttry {\n\t\t\t\tif (isRegenNeeded) await regenerateKernel();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"REGENERATING_KERNEL_FAILED\");\n\t\t\t}\n\t\t\tif (forUpdate.length) {\n\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\");\n\t\t\t\tif (isRegenNeeded) activityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP_REBOOT\");\n\t\t\t} else if (!forUpdate.length) activityNote.innerText = await availableAPIs.lookupLocale(\"SYSTEM_UP_TO_DATE\");\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"FAILED_TO_UPDATE\");\n\t\t}\n\t\tcontainer.hidden = false;\n\t\tawait availableAPIs.closeability(true);\n\t});\n\n\tasync function regenerateKernel() {\n\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"GENERATING_KERNEL\");\n\t\tlet entireBoot = [];\n\t\tlet bootFiles = await availableAPIs.fs_ls({ path: (await availableAPIs.getSystemMount()) + \"/boot\" });\n\t\tif (bootFiles.includes(\"00-compiled.js\")) bootFiles.splice(bootFiles.indexOf(\"00-compiled.js\"), 1);\n\t\tif (bootFiles.includes(\"99-zzpatchfinisher.js\")) bootFiles.splice(bootFiles.indexOf(\"99-zzpatchfinisher.js\"), 1);\n\t\tfor (let bootFile of bootFiles) {\n\t\t\tentireBoot.push([ bootFile, await availableAPIs.fs_read({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/\" + bootFile\n\t\t\t}) ]);\n\t\t}\n\t\tentireBoot = entireBoot.sort((a, b) => a[0].localeCompare(b[0]))\n\t\t\t.map(a => \"// modules/.../boot/\" + a[0] + \"\\n\" + a[1]).join(\"\\n\");\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/00-compiled.js\",\n\t\t\tdata: entireBoot + \"\\nreturn;/*\"\n\t\t});\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/99-zzpatchfinisher.js\",\n\t\t\tdata: \"*/\"\n\t\t});\n\t}\n\n\tregenerateKernelBtn.addEventListener(\"click\", async function() {\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\ttry {\n\t\t\tawait regenerateKernel();\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"REGENERATING_KERNEL_FAILED\");\n\t\t}\n\t\tawait availableAPIs.closeability(true);\n\t\tcontainer.hidden = false;\n\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\");\n\t});\n\n\trepairOSBtn.addEventListener(\"click\", async function() {\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"REPAIRING_SYSTEM\");\n\t\ttry {\n\t\t\tlet updateService = new URL(\"bdp://localhost\");\n\t\t\tupdateService.hostname = await availableAPIs.getUpdateService();\n\t\t\tlet moduleConfig = JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\"\n\t\t\t}));\n\t\t\tlet toRepair = Object.keys(moduleConfig.local).filter(a => !!(moduleConfig.remote || {})[a]).sort((a, b) => a.localeCompare(b));\n\t\t\tlet modNum = 0;\n\t\t\tfor (let module of toRepair) {\n\t\t\t\tactivityNote.innerText = (await availableAPIs.lookupLocale(\"REPAIRING_MODULE\")).replace(\"%s\", module).replace(\"%s\", modNum + 1).replace(\"%s\", toRepair.length).replace(\"%s\", (modNum / toRepair.length * 100).toFixed(2));\n\t\t\t\tlet moduleContent = (await bdpGet(new URL(\"/module_repository/\" + moduleConfig.remote[module].bootOrder + \"-\" + module + \".fs\", updateService))).content;\n\t\t\t\tawait availableAPIs.fs_rm({\n\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + moduleConfig.local[module].bootOrder + \"-\" + module + \".fs\"\n\t\t\t\t});\n\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/modules/\" + moduleConfig.remote[module].bootOrder + \"-\" + module + \".fs\",\n\t\t\t\t\tdata: moduleContent\n\t\t\t\t});\n\t\t\t\tmoduleConfig.local[module] = JSON.parse(moduleContent).buildInfo;\n\t\t\t\tmodNum++;\n\t\t\t}\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/moduleConfig.json\",\n\t\t\t\tdata: JSON.stringify(moduleConfig)\n\t\t\t});\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"RELOADING_MODULES\");\n\t\t\tawait reloadModules(await availableAPIs.getSystemMount());\n\t\t\ttry {\n\t\t\t\tawait regenerateKernel();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"REGENERATING_KERNEL_FAILED\");\n\t\t\t}\n\t\t\tawait availableAPIs.shutdown({ isReboot: true });\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"REPAIR_FAILED\");\n\t\t}\n\t\tcontainer.hidden = false;\n\t\tawait availableAPIs.closeability(true);\n\t});\n\n\tmountOfflineBtn.addEventListener(\"click\", async function() {\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\tactivityNote.innerText = \"\";\n\t\ttry {\n\t\t\tlet modSys = JSON.parse(await availableAPIs.fs_read({ path: \"ram/run/moduleSystem.json\" }));\n\t\t\tlet mountRelated = Object.entries(modSys).flat(Infinity);\n\t\t\tawait new Promise(async function(resolve, reject) {\n\t\t\t\tlet discardChangesBtn = document.createElement(\"button\");\n\t\t\t\tdiscardChangesBtn.onclick = _ => reject();\n\t\t\t\tdiscardChangesBtn.innerText = await availableAPIs.lookupLocale(\"DISCARD_CHANGES\");\n\t\t\t\tactivityNote.appendChild(discardChangesBtn);\n\t\t\t\tlet mountpoints = (await availableAPIs.fs_mounts()).filter(a => !mountRelated.includes(a));\n\t\t\t\tfor (let mountpoint of mountpoints) {\n\t\t\t\t\tlet mountBtn = document.createElement(\"button\");\n\t\t\t\t\tmountBtn.innerText = mountpoint;\n\t\t\t\t\tmountBtn.onclick = async function() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"RELOADING_MODULES\");\n\t\t\t\t\t\t\tawait reloadModules(mountpoint, await availableAPIs.getSystemMount(), mountpoint + \"-sys\");\n\t\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\");\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\treject(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tactivityNote.appendChild(mountBtn);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"FAILED_OP\");\n\t\t}\n\t\tcontainer.hidden = false;\n\t\tawait availableAPIs.closeability(true);\n\t});\n\n\tumountOfflineBtn.addEventListener(\"click\", async function() {\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\tactivityNote.innerText = \"\";\n\t\ttry {\n\t\t\tlet modSys = JSON.parse(await availableAPIs.fs_read({ path: \"ram/run/moduleSystem.json\" }));\n\t\t\tlet systemMount = await availableAPIs.getSystemMount();\n\t\t\tawait new Promise(async function(resolve, reject) {\n\t\t\t\tlet discardChangesBtn = document.createElement(\"button\");\n\t\t\t\tdiscardChangesBtn.onclick = _ => reject();\n\t\t\t\tdiscardChangesBtn.innerText = await availableAPIs.lookupLocale(\"DISCARD_CHANGES\");\n\t\t\t\tactivityNote.appendChild(discardChangesBtn);\n\t\t\t\tlet mountpoints = (await availableAPIs.fs_mounts()).filter(a => modSys.hasOwnProperty(a) && a != systemMount);\n\t\t\t\tfor (let mountpoint of mountpoints) {\n\t\t\t\t\tlet mountBtn = document.createElement(\"button\");\n\t\t\t\t\tmountBtn.innerText = mountpoint;\n\t\t\t\t\tmountBtn.onclick = async function() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"UNMOUNTING_MOUNTS\");\n\t\t\t\t\t\t\tawait availableAPIs.fs_unmount({ mount: mountpoint });\n\t\t\t\t\t\t\tfor (let mount of modSys[mountpoint].slice(1))\n\t\t\t\t\t\t\t\tawait availableAPIs.fs_unmount({ mount });\n\t\t\t\t\t\t\tdelete modSys[mountpoint];\n\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\tpath: \"ram/run/moduleSystem.json\",\n\t\t\t\t\t\t\t\tdata: JSON.stringify(modSys)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\");\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\treject(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tactivityNote.appendChild(mountBtn);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"FAILED_OP\");\n\t\t}\n\t\tcontainer.hidden = false;\n\t\tawait availableAPIs.closeability(true);\n\t});\n\n\tswapToSystemBtn.addEventListener(\"click\", async function() {\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\tactivityNote.innerText = \"\";\n\t\ttry {\n\t\t\tlet modSys = JSON.parse(await availableAPIs.fs_read({ path: \"ram/run/moduleSystem.json\" }));\n\t\t\tlet systemMount = await availableAPIs.getSystemMount();\n\t\t\tawait new Promise(async function(resolve, reject) {\n\t\t\t\tlet discardChangesBtn = document.createElement(\"button\");\n\t\t\t\tdiscardChangesBtn.onclick = _ => reject();\n\t\t\t\tdiscardChangesBtn.innerText = await availableAPIs.lookupLocale(\"DISCARD_CHANGES\");\n\t\t\t\tactivityNote.appendChild(discardChangesBtn);\n\t\t\t\tlet mountpoints = (await availableAPIs.fs_mounts()).filter(a => modSys.hasOwnProperty(a) && a != systemMount);\n\t\t\t\tfor (let mountpoint of mountpoints) {\n\t\t\t\t\tlet mountBtn = document.createElement(\"button\");\n\t\t\t\t\tmountBtn.innerText = mountpoint;\n\t\t\t\t\tmountBtn.onclick = async function() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"SWAPPING_SYSTEMS\");\n\t\t\t\t\t\t\tlet oldSysName = await availableAPIs.getSystemMount();\n\t\t\t\t\t\t\tlet newOldSysName = await availableAPIs.getSystemMount();\n\t\t\t\t\t\t\twhile (modSys[newOldSysName]) newOldSysName = newOldSysName + \"~\";\n\t\t\t\t\t\t\tmodSys[newOldSysName] = modSys[oldSysName];\n\t\t\t\t\t\t\tmodSys[oldSysName] = modSys[mountpoint];\n\t\t\t\t\t\t\tdelete modSys[mountpoint];\n\t\t\t\t\t\t\tawait availableAPIs.fs_unmount({ mount: oldSysName });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mount({\n\t\t\t\t\t\t\t\tmountpoint: newOldSysName,\n\t\t\t\t\t\t\t\tfilesystem: \"overlayMount\",\n\t\t\t\t\t\t\t\tfilesystemOptions: {\n\t\t\t\t\t\t\t\t\tmounts: modSys[newOldSysName]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.fs_unmount({ mount: mountpoint });\n\t\t\t\t\t\t\tawait availableAPIs.fs_mount({\n\t\t\t\t\t\t\t\tmountpoint: oldSysName,\n\t\t\t\t\t\t\t\tfilesystem: \"overlayMount\",\n\t\t\t\t\t\t\t\tfilesystemOptions: {\n\t\t\t\t\t\t\t\t\tmounts: modSys[oldSysName]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\t\t\tpath: \"ram/run/moduleSystem.json\",\n\t\t\t\t\t\t\t\tdata: JSON.stringify(modSys)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\");\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\treject(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tactivityNote.appendChild(mountBtn);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tactivityNote.innerText = await availableAPIs.lookupLocale(\"FAILED_OP\");\n\t\t}\n\t\tcontainer.hidden = false;\n\t\tawait availableAPIs.closeability(true);\n\t});\n\n\tcontainer.appendChild(updateModCfgBtn);\n\tcontainer.appendChild(installOnlineModuleBtn);\n\tcontainer.appendChild(removeModuleBtn);\n\tcontainer.appendChild(updateSystemButton);\n\tcontainer.appendChild(regenerateKernelBtn);\n\tcontainer.appendChild(repairOSBtn);\n\tcontainer.appendChild(mountOfflineBtn);\n\tcontainer.appendChild(umountOfflineBtn);\n\tcontainer.appendChild(swapToSystemBtn);\n\tdocument.body.appendChild(container);\n\tdocument.body.appendChild(activityNote);\n})();\nasync function recursiveKeyVerify(mnt, key, khrl) {\n\tif (!key) throw new Error(\"NO_KEY\");\n\tif (key.keyInfo.dates?.since > Date.now()) throw new Error(\"KEY_NOT_IN_TIME\");\n\tif (Date.now() > key.keyInfo.dates?.until) throw new Error(\"KEY_NOT_IN_TIME\");\n\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\tlet hash = u8aToHex(new Uint8Array(await availableAPIs.cspOperation({\n\t\tcspProvider: \"basic\",\n\t\toperation: \"digest\",\n\t\tcspArgument: {\n\t\t\talgorithm: \"SHA-256\",\n\t\t\tdata: new TextEncoder().encode((key.keyInfo.key).x)\n\t\t}\n\t})));\n\tif (khrl.includes(hash)) throw new Error(\"KEY_REVOKED\");\n\tlet signedByKey;\n\tif (key.keyInfo.signedBy) {\n\t\tsignedByKey = JSON.parse(await availableAPIs.fs_read({ path: mnt + \"/etc/keys/\" + key.keyInfo.signedBy }));\n\t\tif (!signedByKey.keyInfo.usages.includes(\"keyTrust\")) throw new Error(\"NOT_KEY_AUTHORITY\");\n\t\tawait recursiveKeyVerify(mnt, signedByKey, khrl);\n\t} else signedByKey = { keyInfo: { key: await availableAPIs.getRootKey() } };\n\tsignedByKey = await availableAPIs.cspOperation({\n\t\tcspProvider: \"basic\",\n\t\toperation: \"importKey\",\n\t\tcspArgument: {\n\t\t\tformat: \"jwk\",\n\t\t\tkeyData: signedByKey.keyInfo.key,\n\t\t\talgorithm: { name: \"Ed25519\" },\n\t\t\textractable: false,\n\t\t\tkeyUsages: [ \"verify\" ]\n\t\t}\n\t});\n\tlet verify = await availableAPIs.cspOperation({\n\t\tcspProvider: \"basic\",\n\t\toperation: \"verify\",\n\t\tcspArgument: {\n\t\t\talgorithm: { name: \"Ed25519\" },\n\t\t\tkey: signedByKey,\n\t\t\tsignature: hexToU8A(key.signature),\n\t\t\tdata: new TextEncoder().encode(JSON.stringify(key.keyInfo))\n\t\t}\n\t});\n\tawait availableAPIs.cspOperation({\n\t\tcspProvider: \"basic\",\n\t\toperation: \"unloadKey\",\n\t\tcspArgument: signedByKey\n\t});\n\tif (!verify) throw new Error(\"KEY_SIGNATURE_VERIFICATION_FAILED\");\n\treturn true;\n}\nasync function reloadModules(mnt, getKeysFrom, newName) {\n\tlet khrlFiles = await availableAPIs.fs_ls({ path: (getKeysFrom || mnt) + \"/etc/keys/khrl\" });\n\tlet khrl = [];\n\tlet rootKeyImport = await availableAPIs.cspOperation({\n\t\tcspProvider: \"basic\",\n\t\toperation: \"importKey\",\n\t\tcspArgument: {\n\t\t\tformat: \"jwk\",\n\t\t\tkeyData: await availableAPIs.getRootKey(),\n\t\t\talgorithm: { name: \"Ed25519\" },\n\t\t\textractable: false,\n\t\t\tkeyUsages: [ \"verify\" ]\n\t\t}\n\t});\n\tfor (let file of khrlFiles) {\n\t\tlet khrlFile = JSON.parse(await availableAPIs.fs_read({ path: (getKeysFrom || mnt) + \"/etc/keys/khrl/\" + file }));\n\t\tif (await availableAPIs.cspOperation({\n\t\t\tcspProvider: \"basic\",\n\t\t\toperation: \"verify\",\n\t\t\tcspArgument: {\n\t\t\t\talgorithm: { name: \"Ed25519\" },\n\t\t\t\tkey: rootKeyImport,\n\t\t\t\tsignature: hexToU8A(khrlFile.signature),\n\t\t\t\tdata: new TextEncoder().encode(JSON.stringify(khrlFile.list))\n\t\t\t}\n\t\t})) khrl.push(...khrlFile.list);\n\t}\n\tawait availableAPIs.cspOperation({\n\t\tcspProvider: \"basic\",\n\t\toperation: \"unloadKey\",\n\t\tcspArgument: rootKeyImport\n\t});\n\tlet modSys = JSON.parse(await availableAPIs.fs_read({ path: \"ram/run/moduleSystem.json\" }));\n\tlet prevMnt = modSys[mnt];\n\tif (prevMnt) prevMnt = prevMnt[0];\n\tlet moduleFiles = await availableAPIs.fs_ls({ path: mnt + \"/modules\" });\n\tlet mntList = [];\n\tfor (let moduleName of moduleFiles) {\n\t\ttry {\n\t\t\tlet fullModuleFile = {};\n\t\t\ttry {\n\t\t\t\tfullModuleFile = JSON.parse(await availableAPIs.fs_read({ path: mnt + \"/modules/\" + moduleName }));\n\t\t\t} catch {}\n\t\t\tif (!fullModuleFile.buildInfo) continue;\n\t\t\tlet fullModuleSignature = fullModuleFile.buildInfo.signature;\n\t\t\tdelete fullModuleFile.buildInfo.signature;\n\t\t\tif (moduleName != \"00-keys.fs\") {\n\t\t\t\tlet critical = fullModuleFile.buildInfo.critical;\n\t\t\t\ttry {\n\t\t\t\t\tlet signingKey = JSON.parse(await availableAPIs.fs_read({ path: (getKeysFrom || mnt) + \"/etc/keys/\" + fullModuleFile.buildInfo.signer }));\n\t\t\t\t\tif (!signingKey.keyInfo.usages.includes(\"moduleTrust\")) throw new Error(\"NOT_MODULE_SIGNING_KEY\");\n\t\t\t\t\tawait recursiveKeyVerify(getKeysFrom || mnt, signingKey, khrl);\n\t\t\t\t\tlet importSigningKey = await availableAPIs.cspOperation({\n\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\tformat: \"jwk\",\n\t\t\t\t\t\t\tkeyData: signingKey.keyInfo.key,\n\t\t\t\t\t\t\talgorithm: { name: \"Ed25519\" },\n\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\tkeyUsages: [ \"verify\" ]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tfullModuleFile = JSON.stringify(fullModuleFile);\n\t\t\t\t\tlet verify = await availableAPIs.cspOperation({\n\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\toperation: \"verify\",\n\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\talgorithm: { name: \"Ed25519\" },\n\t\t\t\t\t\t\tkey: importSigningKey,\n\t\t\t\t\t\t\tsignature: hexToU8A(fullModuleSignature),\n\t\t\t\t\t\t\tdata: new TextEncoder().encode(fullModuleFile)\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\tcspArgument: importSigningKey\n\t\t\t\t\t});\n\t\t\t\t\tif (!verify) throw new Error(\"MODULE_SIGNATURE_VERIFICATION_FAILED\");\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (critical) throw e;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet randomMntName = \".\" + (await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"random\",\n\t\t\t\tcspArgument: new Uint8Array(8)\n\t\t\t})).reduce((a, b) => a + b.toString(16).padStart(2, \"0\"), \"\");\n\t\t\tawait availableAPIs.fs_mount({\n\t\t\t\tmountpoint: randomMntName,\n\t\t\t\tfilesystem: \"fileMount\",\n\t\t\t\tfilesystemOptions: {\n\t\t\t\t\tsrcFile: mnt + \"/modules/\" + moduleName,\n\t\t\t\t\tread_only: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tmntList.push(randomMntName);\n\t\t} catch (e) {\n\t\t\tfor (let mount of mntList)\n\t\t\t\tawait availableAPIs.fs_unmount({ mount });\n\t\t\tthrow e;\n\t\t}\n\t}\n\tif (!newName) {\n\t\tawait availableAPIs.fs_unmount({ mount: mnt });\n\t\tfor (let mount of modSys[mnt].slice(1))\n\t\t\tawait availableAPIs.fs_unmount({ mount });\n\t}\n\tmodSys[newName || mnt] = [ prevMnt || mnt, ...mntList ];\n\tawait availableAPIs.fs_mount({\n\t\tmountpoint: newName || mnt,\n\t\tfilesystem: \"overlayMount\",\n\t\tfilesystemOptions: {\n\t\t\tmounts: modSys[newName || mnt]\n\t\t}\n\t});\n\tawait availableAPIs.fs_write({\n\t\tpath: \"ram/run/moduleSystem.json\",\n\t\tdata: JSON.stringify(modSys)\n\t});\n}\nasync function bdpGet(path) {\n\tlet url = new URL(path);\n\tif (url.protocol != \"bdp:\") throw new Error(await availableAPIs.lookupLocale(\"BLOG_BROWSER_PROTO\"));\n\tif (url.port) throw new Error(await availableAPIs.lookupLocale(\"BLOG_BROWSER_GATESET\"));\n\tlet hostname = url.hostname, address;\n\tif (url.hostname.includes(\"[\")) {\n\t\thostname = IPv6Decompressor(url.hostname.slice(1, -1)).replaceAll(\":\", \"\");\n\t\taddress = hostname;\n\t} else address = await availableAPIs.resolve(hostname);\n\tif (!address) throw new Error(await availableAPIs.lookupLocale(\"HOSTNAME_RESOLUTION_FAILED\"));\n\tlet connection = await availableAPIs.connfulConnect({\n\t\tgate: url.username || \"blog\",\n\t\taddress,\n\t\tverifyByDomain: hostname\n\t});\n\tawait availableAPIs.connfulConnectionSettled(connection);\n\tawait availableAPIs.connfulWrite({\n\t\tconnectionID: connection,\n\t\tdata: url.pathname + url.search,\n\t\thost: hostname\n\t});\n\tlet data = await availableAPIs.connfulRead(connection);\n\tdata = JSON.parse(data);\n\tlet chunks = [];\n\twhile (chunks.length != data.length) {\n\t\tlet newData = await availableAPIs.connfulRead(connection);\n\t\tnewData = JSON.parse(newData);\n\t\tchunks[newData.ctr] = newData.chunk;\n\t}\n\ttry {\n\t\tawait availableAPIs.connfulClose(connection);\n\t} catch {}\n\treturn { ...data, content: chunks.join(\"\") };\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","a79de631b487087c72a6c983a42dfe5af6feb66399e6bf6ad3e05dbb39931a1b6af1d13732ac195cc4ee01e65294119d536efe6f03c76169cf08d9ec6e86de25":"// =====BEGIN MANIFEST=====\n// link: lrn:NETCONFIG_TITLE\n// signer: automaticSigner\n// fnName: networkInstaller\n// allow: RELOAD_NETWORK_CONFIG, IDENTIFY_SYSTEM, CSP_OPERATIONS, FS_READ, FS_WRITE, FS_REMOVE, FS_LIST_PARTITIONS, GET_LOCALE, GET_SERVER_URL, LIST_TASKS, GET_THEME, FS_BYPASS_PERMISSIONS\n// signature: 40e99fe854a9a23d939473764be794d2e044c1bc8805d55e479bdfbf04926e22c567c2db396c95c35f4ae137a4ff5a3fd5bf70683584b122c5acb263e8e0ae0a\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"NETCONFIG_TITLE\") || \"PCOS Network configurator\");\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"IDENTIFY_SYSTEM\", \"CSP_OPERATIONS\", \"FS_READ\", \"FS_WRITE\", \"FS_LIST_PARTITIONS\", \"GET_LOCALE\", \"GET_SERVER_URL\", \"LIST_TASKS\" ];\n\tdocument.body.style.fontFamily = \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\";\n\ttry {\n\t\tif (await availableAPIs.isDarkThemed()) document.body.style.color = \"white\";\n\t} catch {}\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tdocument.body.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_DENY\") || \"Insufficient privileges.\";\n\t\treturn;\n\t}\n\tlet existingConfig = {};\n\ttry {\n\t\texistingConfig = JSON.parse(await availableAPIs.fs_read({\n\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/network.json\"\n\t\t}));\n\t} catch {}\n\tlet descriptionNetworkURL = document.createElement(\"span\");\n\tlet descriptionUCBits = document.createElement(\"span\");\n\tlet descriptionHostname = document.createElement(\"span\");\n\tlet descriptionUpdates = document.createElement(\"span\");\n\tlet paramNetworkURL = document.createElement(\"input\");\n\tlet ucBits = document.createElement(\"input\");\n\tlet paramHostname = document.createElement(\"input\");\n\tlet paramUpdates = document.createElement(\"input\");\n\tlet saveBtn = document.createElement(\"button\");\n\tlet updatePredictBtn = document.createElement(\"button\");\n\tlet addressPrediction = document.createElement(\"span\");\n\tlet form = document.createElement(\"form\");\n\tlet originUrl = new URL(await availableAPIs.runningServer());\n\toriginUrl.protocol = \"ws\" + (originUrl.protocol == \"https:\" ? \"s\" : \"\") + \":\";\n\tdescriptionNetworkURL.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_URLF\");\n\tdescriptionUCBits.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_UC\");\n\tdescriptionHostname.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_HOSTNAME\");\n\tdescriptionUpdates.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_UPDATES\");\n\tparamNetworkURL.value = existingConfig.url || originUrl.origin;\n\tucBits.type = \"number\";\n\tucBits.min = 0;\n\tucBits.max = 4294967295;\n\tucBits.value = existingConfig.ucBits;\n\tparamHostname.value = existingConfig.hostname || \"\";\n\tparamUpdates.value = existingConfig.updates || \"pcosserver.pc\";\n\tsaveBtn.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_SAVE\");\n\tupdatePredictBtn.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_PREDICT\");\n\tform.appendChild(descriptionNetworkURL);\n\tform.appendChild(paramNetworkURL);\n\tform.appendChild(document.createElement(\"br\"));\n\tform.appendChild(descriptionUCBits);\n\tform.appendChild(ucBits);\n\tform.appendChild(document.createElement(\"br\"));\n\tform.appendChild(descriptionHostname);\n\tform.appendChild(paramHostname);\n\tform.appendChild(document.createElement(\"br\"));\n\tform.appendChild(descriptionUpdates);\n\tform.appendChild(paramUpdates);\n\tform.appendChild(document.createElement(\"br\"));\n\tform.appendChild(saveBtn);\n\tform.appendChild(updatePredictBtn);\n\taddressPrediction.innerText = await availableAPIs.lookupLocale(\"EMPTY_STATUSBAR\");\n\tdocument.body.appendChild(form);\n\tdocument.body.appendChild(document.createElement(\"hr\"));\n\tdocument.body.appendChild(addressPrediction);\n\tsaveBtn.addEventListener(\"click\", async function(e) {\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/network.json\",\n\t\t\t\tdata: JSON.stringify({\n\t\t\t\t\turl: paramNetworkURL.value,\n\t\t\t\t\tucBits: Math.round(Math.abs(Number(ucBits.value))),\n\t\t\t\t\thostname: paramHostname.value,\n\t\t\t\t\tupdates: paramUpdates.value\n\t\t\t\t}, null, \"\\t\")\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait availableAPIs.fs_rm({\n\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/apps/services/networkd.lnk\"\n\t\t\t\t});\n\t\t\t} catch {}\n\t\t\ttry {\n\t\t\t\tawait availableAPIs.reloadNetworkConfig();\n\t\t\t} catch {}\n\t\t\taddressPrediction.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_SAVE_OK\");\n\t\t} catch {\n\t\t\taddressPrediction.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_SAVE_FAIL\");\n\t\t}\n\t});\n\tupdatePredictBtn.addEventListener(\"click\", function(e) {\n\t\te.preventDefault();\n\t\tupdatePrediction({ addressPrediction, ucBits });\n\t});\n})();\nfunction findInputNumberString(output, chars) {\n\tlet inputNum = 0n;\n\tfor (let i = 0n; i < output.length; i++) {\n\t\tconst charIndex = chars.indexOf(output[i]);\n\t\tif (charIndex === -1) throw new Error(`Invalid character '${output[i]}' in output string`);\n\t\tinputNum = inputNum * BigInt(chars.length) + BigInt(charIndex);\n\t}\n\treturn inputNum;\n}\nfunction generateString(num, chars) {\n\tlet base = BigInt(chars.length), result = '';\n\twhile (num > 0n) result = chars[Number(num % base)] + result, num /= base;\n\treturn result;\n}\n\nasync function updatePrediction(elementInterface) {\n\tlet publicSystemID = await availableAPIs.getPublicSystemID();\n\tif (!publicSystemID) return elementInterface.addressPrediction.innerText = await availableAPIs.lookupLocale(\"NETCONFIG_SYSIDM\");\n\tlet sysIDx = u8aToHex(new Uint8Array(await availableAPIs.cspOperation({\n\t\tcspProvider: \"basic\",\n\t\toperation: \"digest\",\n\t\tcspArgument: {\n\t\t\talgorithm: \"SHA-256\",\n\t\t\tdata: hexToU8A(generateString(findInputNumberString(publicSystemID.x, base64Charset), hexCharset))\n\t\t}\n\t}))).padStart(16, \"0\").slice(0, 16);\n\tlet ucPredict = Math.round(Math.abs(Number(elementInterface.ucBits.value))).toString(16).padStart(8, \"0\").slice(0, 8);\n\treturn elementInterface.addressPrediction.innerText = (\"xxxxxxxx\" + sysIDx + ucPredict).match(/.{1,4}/g).join(\":\");\n}\nlet hexToU8A = (hex) => Uint8Array.from(hex.match(/.{1,2}/g).map(a => parseInt(a, 16)));\nlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\nlet base64Charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\nlet hexCharset = \"0123456789abcdef\";\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","c5c1e73db9d30c748e617e2a79f1f05ee3bb6e5e1497b1995c9fc91ab519fe4283aae4f470e5b0d399b92b60cc3affdb921e55d524256790ae6bb9972151d37d":"// =====BEGIN MANIFEST=====\n// link: lrn:PERSONAL_SECURITY_TITLE\n// signer: automaticSigner\n// allow: SET_SECURITY_CHECKS, GET_USER_INFO, CSP_OPERATIONS, GET_LOCALE, GET_THEME\n// signature: 14abc95ac974897136d2a4280f446972ed7c06e1be999d0aaa00c03b1e8bad658dc68bc9f4853a0d373458d9bd849ffbfd3cd9807996eca89c23d729b9f7b800\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"PERSONAL_SECURITY_TITLE\"));\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"SET_SECURITY_CHECKS\", \"GET_USER_INFO\", \"CSP_OPERATIONS\" ];\n\tdocument.body.style.fontFamily = \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\";\n\tif (await availableAPIs.isDarkThemed()) document.body.style.color = \"white\";\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tdocument.body.innerText = await availableAPIs.lookupLocale(\"PERSONAL_SECURITY_DENY\");\n\t\tlet currentToken = await availableAPIs.getProcessToken();\n\t\tlet newToken = await availableAPIs.consentGetToken({\n\t\t\tintent: await availableAPIs.lookupLocale(\"PERSONAL_SECURITY_INTENT\"),\n\t\t\tname: await availableAPIs.lookupLocale(\"PERSONAL_SECURITY_TITLE\"),\n\t\t\tdesiredUser: await availableAPIs.getUser()\n\t\t});\n\t\tif (!newToken) return;\n\t\tawait availableAPIs.setProcessToken(newToken);\n\t\tawait availableAPIs.revokeToken(currentToken);\n\t\tprivileges = await availableAPIs.getPrivileges();\n\t\tif (!checklist.every(p => privileges.includes(p))) return;\n\t}\n\tlet toolbar = document.createElement(\"div\");\n\tlet saveBtn = document.createElement(\"button\");\n\tlet loadBtn = document.createElement(\"button\");\n\tlet addBtn = document.createElement(\"button\");\n\ttoolbar.appendChild(saveBtn);\n\ttoolbar.appendChild(loadBtn);\n\ttoolbar.appendChild(addBtn);\n\tsaveBtn.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\tloadBtn.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\taddBtn.innerText = await availableAPIs.lookupLocale(\"ADD_BTN\");\n\tsaveBtn.onclick = async function() {\n\t\tawait availableAPIs.setOwnSecurityChecks({ checks });\n\t\tchecks = (await availableAPIs.getUserInfo({ desiredUser: await availableAPIs.getUser(), sensitive: true })).securityChecks;\n\t\treparse();\n\t};\n\tloadBtn.onclick = async function() {\n\t\tchecks = (await availableAPIs.getUserInfo({ desiredUser: await availableAPIs.getUser(), sensitive: true })).securityChecks;\n\t\treparse();\n\t};\n\taddBtn.onclick = function() {\n\t\tadd();\n\t}\n\tdocument.body.appendChild(toolbar);\n\tdocument.body.appendChild(document.createElement(\"hr\"));\n\tlet secCheck = document.createElement(\"div\");\n\tlet types = [\n\t\t\"pbkdf2\",\n\t\t\"informative\",\n\t\t\"informative_deny\",\n\t\t\"timeout\",\n\t\t\"timeout_deny\",\n\t\t\"serverReport\",\n\t\t\"pc-totp\",\n\t\t\"totp\",\n\t\t\"workingHours\",\n\t\t\"zkpp\"\n\t];\n\tlet checks = (await availableAPIs.getUserInfo({ desiredUser: await availableAPIs.getUser(), sensitive: true })).securityChecks;\n\n\tlet checkLocales = {\n\t\t\"pbkdf2\": \"PBKDF2_OPTION\",\n\t\t\"informative\": \"INFORMATIVE_MESSAGE_OPTION\",\n\t\t\"informative_deny\": \"INFORMATIVE_MESSAGE_DENY_OPTION\",\n\t\t\"timeout\": \"TIMEOUT_OPTION\",\n\t\t\"timeout_deny\": \"TIMEOUT_DENY_OPTION\",\n\t\t\"serverReport\": \"SERVER_REPORT_OPTION\",\n\t\t\"pc-totp\": \"PCTOTP_OPTION\",\n\t\t\"totp\": \"RFCTOTP_OPTION\",\n\t\t\"workingHours\": \"WORKING_HOURS_OPTION\",\n\t\t\"zkpp\": \"ZKPP_OPTION\"\n\t};\n\n\tasync function reparse() {\n\t\tsecCheck.remove();\n\t\tsecCheck = document.createElement(\"div\");\n\n\t\tfor (let check in checks) {\n\t\t\tlet checkInfo = checks[check];\n\t\t\tlet checkDiv = document.createElement(\"div\");\n\t\t\tcheckDiv.style.display = \"flex\";\n\t\t\tlet checkTitle = document.createElement(\"div\");\n\t\t\tcheckTitle.style.flex = 100;\n\t\t\tlet checkBtns = document.createElement(\"div\");\n\t\t\tcheckTitle.innerText = await availableAPIs.lookupLocale(checkLocales[checkInfo.type]);\n\t\t\tlet btnConfig = document.createElement(\"button\");\n\t\t\tlet btnUp = document.createElement(\"button\");\n\t\t\tlet btnDown = document.createElement(\"button\");\n\t\t\tlet btnDelete = document.createElement(\"button\");\n\t\t\tbtnConfig.innerText = \"*\";\n\t\t\tbtnUp.innerText = \"/\\\\\";\n\t\t\tbtnUp.disabled = check == 0;\n\t\t\tbtnDown.disabled = check == checks.length - 1;\n\t\t\tbtnDown.innerText = \"\\\\/\";\n\t\t\tbtnDelete.innerText = \"x\";\n\t\t\tcheckBtns.appendChild(btnConfig);\n\t\t\tcheckBtns.appendChild(btnUp);\n\t\t\tcheckBtns.appendChild(btnDown);\n\t\t\tcheckBtns.appendChild(btnDelete);\n\t\t\tcheckDiv.appendChild(checkTitle);\n\t\t\tcheckDiv.appendChild(checkBtns);\n\t\t\tbtnDelete.addEventListener(\"click\", function() {\n\t\t\t\tchecks.splice(check, 1);\n\t\t\t\treparse();\n\t\t\t});\n\t\t\tsecCheck.appendChild(checkDiv);\n\t\t\tbtnUp.addEventListener(\"click\", function() {\n\t\t\t\tchecks.splice(check, 1);\n\t\t\t\tchecks.splice(check - 1, 0, checkInfo);\n\t\t\t\treparse();\n\t\t\t});\n\t\t\tbtnDown.addEventListener(\"click\", function() {\n\t\t\t\tchecks.splice(check, 1);\n\t\t\t\tchecks.splice(check - 1 + 2, 0, checkInfo);\n\t\t\t\treparse();\n\t\t\t});\n\t\t\tbtnConfig.addEventListener(\"click\", function() {\n\t\t\t\tcheckConfig(check);\n\t\t\t});\n\t\t}\n\t\tdocument.body.appendChild(secCheck);\n\t}\n\n\tasync function checkConfig(check) {\n\t\tsecCheck.remove();\n\t\tsecCheck = document.createElement(\"div\");\n\t\tlet checkInfo = checks[check];\n\t\tlet checkBack = document.createElement(\"button\");\n\t\tlet checkName = document.createElement(\"b\");\n\t\tcheckBack.innerText = \"<-\";\n\t\tcheckName.innerText = await availableAPIs.lookupLocale(checkLocales[checkInfo.type]);\n\t\tsecCheck.appendChild(checkBack);\n\t\tsecCheck.appendChild(checkName);\n\t\tsecCheck.appendChild(document.createElement(\"br\"));\n\t\tcheckBack.addEventListener(\"click\", function() {\n\t\t\treparse();\n\t\t});\n\t\tif (checkInfo.type == \"pbkdf2\") {\n\t\t\tlet inputDescribe = document.createElement(\"span\");\n\t\t\tlet inputBox = document.createElement(\"input\");\n\t\t\tlet inputAccept = document.createElement(\"button\");\n\t\t\tinputDescribe.innerText = await availableAPIs.lookupLocale(\"PASSWORD\") + \": \";\n\t\t\tinputBox.type = \"password\";\n\t\t\tsecCheck.appendChild(inputDescribe);\n\t\t\tsecCheck.appendChild(inputBox);\n\t\t\tsecCheck.appendChild(inputAccept);\n\t\t\tinputAccept.innerText = await availableAPIs.lookupLocale(\"CONFIRM\");\n\t\t\tinputAccept.addEventListener(\"click\", async function() {\n\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"random\",\n\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t});\n\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\tkeyData: new TextEncoder().encode(inputBox.value),\n\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\tlength: 256\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\tcspArgument: key\n\t\t\t\t});\n\t\t\t\tchecks[check] = {\n\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t};\n\t\t\t\treparse();\n\t\t\t});\n\t\t} else if (checkInfo.type == \"informative\" || checkInfo.type == \"informative_deny\") {\n\t\t\tlet textarea = document.createElement(\"textarea\");\n\t\t\tlet inputAccept = document.createElement(\"button\");\n\t\t\ttextarea.placeholder = await availableAPIs.lookupLocale(\"MESSAGE_ENTER\");\n\t\t\ttextarea.value = checkInfo.message;\n\t\t\tsecCheck.appendChild(textarea);\n\t\t\tsecCheck.appendChild(document.createElement(\"br\"));\n\t\t\tsecCheck.appendChild(inputAccept);\n\t\t\tinputAccept.innerText = await availableAPIs.lookupLocale(\"CONFIRM\");\n\t\t\tinputAccept.addEventListener(\"click\", function() {\n\t\t\t\tchecks[check].message = textarea.value;\n\t\t\t\treparse();\n\t\t\t});\n\t\t} else if (checkInfo.type == \"timeout\" || checkInfo.type == \"timeout_deny\") {\n\t\t\tlet inputDescribe = document.createElement(\"span\");\n\t\t\tlet inputBox = document.createElement(\"input\");\n\t\t\tlet inputAccept = document.createElement(\"button\");\n\t\t\tinputDescribe.innerText = await availableAPIs.lookupLocale(\"TIMEOUT_FIELD\") + \": \";\n\t\t\tinputBox.type = \"number\";\n\t\t\tinputBox.value = checkInfo.timeout;\n\t\t\tinputAccept.innerText = await availableAPIs.lookupLocale(\"CONFIRM\");\n\t\t\tsecCheck.appendChild(inputDescribe);\n\t\t\tsecCheck.appendChild(inputBox);\n\t\t\tsecCheck.appendChild(inputAccept);\n\t\t\tinputAccept.addEventListener(\"click\", function() {\n\t\t\t\tchecks[check].timeout = inputBox.value;\n\t\t\t\treparse();\n\t\t\t});\n\t\t} else if (checkInfo.type == \"serverReport\") {\n\t\t\tlet inputDescribe = document.createElement(\"span\");\n\t\t\tlet inputBox = document.createElement(\"input\");\n\t\t\tlet inputAccept = document.createElement(\"button\");\n\t\t\tinputDescribe.innerText = \"URL: \";\n\t\t\tinputBox.type = \"text\";\n\t\t\tinputBox.placeholder = \"https://example.org/report\";\n\t\t\tinputBox.value = checkInfo.url;\n\t\t\tinputAccept.innerText = await availableAPIs.lookupLocale(\"CONFIRM\");\n\t\t\tsecCheck.appendChild(inputDescribe);\n\t\t\tsecCheck.appendChild(inputBox);\n\t\t\tsecCheck.appendChild(inputAccept);\n\t\t\tinputAccept.addEventListener(\"click\", function() {\n\t\t\t\tchecks[check].url = inputBox.value;\n\t\t\t\treparse();\n\t\t\t});\n\t\t} else if (checkInfo.type == \"pc-totp\") {\n\t\t\tlet inputDescribe = document.createElement(\"span\");\n\t\t\tlet inputBox = document.createElement(\"input\");\n\t\t\tlet regen = document.createElement(\"button\");\n\t\t\tlet inputAccept = document.createElement(\"button\");\n\t\t\tinputDescribe.innerText = await availableAPIs.lookupLocale(\"SECRET_FIELD_TXT\") + \": \";\n\t\t\tinputBox.type = \"text\";\n\t\t\tinputBox.value = checkInfo.secret;\n\t\t\tregen.innerText = await availableAPIs.lookupLocale(\"REGENERATE\");\n\t\t\tinputAccept.innerText = await availableAPIs.lookupLocale(\"CONFIRM\");\n\t\t\tsecCheck.appendChild(inputDescribe);\n\t\t\tsecCheck.appendChild(inputBox);\n\t\t\tsecCheck.appendChild(document.createElement(\"br\"));\n\t\t\tsecCheck.appendChild(regen);\n\t\t\tsecCheck.appendChild(inputAccept);\n\t\t\tregen.addEventListener(\"click\", async function() {\n\t\t\t\tlet randomValues = await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"random\",\n\t\t\t\t\tcspArgument: new Uint8Array(32)\n\t\t\t\t});\n\t\t\t\tinputBox.value = Array.from(randomValues).map(x => x.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t});\n\t\t\tinputAccept.addEventListener(\"click\", function() {\n\t\t\t\tchecks[check].secret = inputBox.value;\n\t\t\t\treparse();\n\t\t\t});\n\t\t} else if (checkInfo.type == \"totp\") {\n\t\t\tlet inputDescribe = document.createElement(\"span\");\n\t\t\tlet inputBox = document.createElement(\"input\");\n\t\t\tlet regen = document.createElement(\"button\");\n\t\t\tlet inputAccept = document.createElement(\"button\");\n\t\t\tinputDescribe.innerText = await availableAPIs.lookupLocale(\"SECRET_FIELD_HEX\") + \": \";\n\t\t\tinputBox.type = \"text\";\n\t\t\tinputBox.value = checkInfo.secret;\n\t\t\tregen.innerText = await availableAPIs.lookupLocale(\"REGENERATE\");\n\t\t\tinputAccept.innerText = await availableAPIs.lookupLocale(\"CONFIRM\");\n\t\t\tsecCheck.appendChild(inputDescribe);\n\t\t\tsecCheck.appendChild(inputBox);\n\t\t\tsecCheck.appendChild(document.createElement(\"br\"));\n\t\t\tsecCheck.appendChild(regen);\n\t\t\tsecCheck.appendChild(inputAccept);\n\t\t\tregen.addEventListener(\"click\", async function() {\n\t\t\t\tlet randomValues = await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"random\",\n\t\t\t\t\tcspArgument: new Uint8Array(10)\n\t\t\t\t});\n\t\t\t\tinputBox.value = Array.from(randomValues).map(x => x.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t});\n\t\t\tinputAccept.addEventListener(\"click\", function() {\n\t\t\t\tchecks[check].secret = inputBox.value;\n\t\t\t\treparse();\n\t\t\t});\n\t\t} else if (checkInfo.type == \"workingHours\") {\n\t\t\tlet inputStartDescribe = document.createElement(\"span\");\n\t\t\tlet inputEndDescribe = document.createElement(\"span\");\n\t\t\tlet inputBoxStart = document.createElement(\"input\");\n\t\t\tlet inputBoxEnd = document.createElement(\"input\");\n\t\t\tlet inputAccept = document.createElement(\"button\");\n\t\t\tinputStartDescribe.innerText = await availableAPIs.lookupLocale(\"START_TIME_FIELD\") + \": \";\n\t\t\tinputBoxStart.type = \"time\";\n\t\t\tinputBoxStart.step = 1;\n\t\t\tif (checkInfo.start) inputBoxStart.value = String(checkInfo.start.hours).padStart(2, \"0\") + \":\" + String(checkInfo.start.minutes).padStart(2, \"0\") + \":\" + String(checkInfo.start.seconds).padStart(2, \"0\");\n\t\t\tinputEndDescribe.innerText = await availableAPIs.lookupLocale(\"END_TIME_FIELD\") + \": \";\n\t\t\tinputBoxEnd.type = \"time\";\n\t\t\tinputBoxEnd.step = 1;\n\t\t\tif (checkInfo.end) inputBoxEnd.value = String(checkInfo.end.hours).padStart(2, \"0\") + \":\" + String(checkInfo.end.minutes).padStart(2, \"0\") + \":\" + String(checkInfo.end.seconds).padStart(2, \"0\");\n\t\t\tinputAccept.innerText = await availableAPIs.lookupLocale(\"CONFIRM\");\n\t\t\tsecCheck.appendChild(inputStartDescribe);\n\t\t\tsecCheck.appendChild(inputBoxStart);\n\t\t\tsecCheck.appendChild(document.createElement(\"br\"));\n\t\t\tsecCheck.appendChild(inputEndDescribe);\n\t\t\tsecCheck.appendChild(inputBoxEnd);\n\t\t\tsecCheck.appendChild(document.createElement(\"br\"));\n\t\t\tsecCheck.appendChild(inputAccept);\n\t\t\tinputAccept.addEventListener(\"click\", function() {\n\t\t\t\tchecks[check].start = {\n\t\t\t\t\thours: Number(inputBoxStart.value.split(\":\")[0]),\n\t\t\t\t\tminutes: Number(inputBoxStart.value.split(\":\")[1]),\n\t\t\t\t\tseconds: Number(inputBoxStart.value.split(\":\")[2])\n\t\t\t\t};\n\t\t\t\tchecks[check].end = {\n\t\t\t\t\thours: Number(inputBoxEnd.value.split(\":\")[0]),\n\t\t\t\t\tminutes: Number(inputBoxEnd.value.split(\":\")[1]),\n\t\t\t\t\tseconds: Number(inputBoxEnd.value.split(\":\")[2])\n\t\t\t\t};\n\t\t\t\treparse();\n\t\t\t});\n\t\t} else if (checkInfo.type == \"zkpp\") {\n\t\t\tlet inputDescribe = document.createElement(\"span\");\n\t\t\tlet inputBox = document.createElement(\"input\");\n\t\t\tlet inputAccept = document.createElement(\"button\");\n\t\t\tinputDescribe.innerText = await availableAPIs.lookupLocale(\"PASSWORD\") + \": \";\n\t\t\tinputBox.type = \"password\";\n\t\t\tsecCheck.appendChild(inputDescribe);\n\t\t\tsecCheck.appendChild(inputBox);\n\t\t\tsecCheck.appendChild(inputAccept);\n\t\t\tinputAccept.innerText = await availableAPIs.lookupLocale(\"CONFIRM\");\n\t\t\tinputAccept.addEventListener(\"click\", async function() {\n\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\tkeyData: new TextEncoder().encode(inputBox.value),\n\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\tsalt: new Uint8Array(32),\n\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\tlength: 256\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\tcspArgument: key\n\t\t\t\t});\n\t\t\t\tlet publicKey = (await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"tweetnacl\",\n\t\t\t\t\toperation: \"deriveKey\",\n\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\ttype: \"sign\",\n\t\t\t\t\t\tseed: derived\n\t\t\t\t\t}\n\t\t\t\t})).publicKey;\n\t\t\t\tchecks[check] = {\n\t\t\t\t\ttype: \"zkpp\",\n\t\t\t\t\tpublicKey: u8aToHex(publicKey)\n\t\t\t\t};\n\t\t\t\treparse();\n\t\t\t});\n\t\t}\n\t\tdocument.body.appendChild(secCheck);\n\t}\n\n\tasync function add() {\n\t\tsecCheck.remove();\n\t\tsecCheck = document.createElement(\"div\");\n\t\tlet backBtn = document.createElement(\"button\");\n\t\tbackBtn.innerText = \"<-\";\n\t\tbackBtn.addEventListener(\"click\", function() {\n\t\t\treparse();\n\t\t});\n\t\tsecCheck.appendChild(backBtn);\n\t\tfor (let type of types) {\n\t\t\tlet btn = document.createElement(\"button\");\n\t\t\tbtn.innerText = await availableAPIs.lookupLocale(checkLocales[type]);\n\t\t\tbtn.addEventListener(\"click\", function() {\n\t\t\t\tchecks.push({ type });\n\t\t\t\treparse();\n\t\t\t});\n\t\t\tsecCheck.appendChild(btn);\n\t\t}\n\t\tdocument.body.appendChild(secCheck);\n\t}\n\treparse();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","5d0b1a9486178d80f3b94776eac4d98304c4d53c5fd4c61399461314cffa9a16d4fc4c370e2dd20d243ef0883594cc2fd7f0ede9088956fa46d1757d1a84c500":"// =====BEGIN MANIFEST=====\n// link: lrn:SYSADMIN_TOOLS_TITLE\n// signer: automaticSigner\n// fnName: sysadminInstaller\n// allow: SYSTEM_SHUTDOWN, FETCH_SEND, LLDISK_WRITE, RUN_KLVL_CODE, FS_READ, FS_WRITE, FS_LIST_PARTITIONS, GET_LOCALE, GET_THEME, IPC_CREATE_PIPE, IPC_LISTEN_PIPE, FS_BYPASS_PERMISSIONS, LLDISK_READ, LLDISK_LIST_PARTITIONS, LLDISK_INIT_PARTITIONS, LLDISK_REMOVE, LLDISK_IDB_READ, LLDISK_IDB_WRITE, LLDISK_IDB_REMOVE, LLDISK_IDB_LIST, LLDISK_IDB_SYNC, IPC_SEND_PIPE, START_TASK, FS_REMOVE, FS_MOUNT, SET_FIRMWARE, GET_USER_INFO\n// signature: 94dbc2335fba220812b7a26fd0ff5c95b251900c9a49901f40604c7232348b4c354db07a84fcda8a784928b4c4fd8bdc701e2cfc5c16e149964804afe220b901\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"SYSADMIN_TOOLS_TITLE\"));\n\tlet privileges = await availableAPIs.getPrivileges();\n\tdocument.body.style.fontFamily = \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\";\n\tif (await availableAPIs.isDarkThemed()) document.body.style.color = \"white\";\n\tlet container = document.createElement(\"div\");\n\tlet extraActivities = document.createElement(\"div\");\n\tlet fsckOrderButton = document.createElement(\"button\");\n\tlet fsckDiscardButton = document.createElement(\"button\");\n\tlet wipeSystemButton = document.createElement(\"button\");\n\tlet updateFirmwareButton = document.createElement(\"button\");\n\tlet imagingButton = document.createElement(\"button\");\n\tlet changeLocale = document.createElement(\"button\");\n\tfsckOrderButton.innerText = await availableAPIs.lookupLocale(\"FSCK_BUTTON\");\n\tfsckDiscardButton.innerText = await availableAPIs.lookupLocale(\"DISCARD_BUTTON\");\n\twipeSystemButton.innerText = await availableAPIs.lookupLocale(\"SWIPE_BUTTON\");\n\tupdateFirmwareButton.innerText = await availableAPIs.lookupLocale(\"UPDATEFW_BUTTON\");\n\timagingButton.innerText = await availableAPIs.lookupLocale(\"SYSTEM_IMAGING\");\n\tchangeLocale.innerText = await availableAPIs.lookupLocale(\"CHANGE_LOCALE\");\n\tfsckOrderButton.addEventListener(\"click\", async function() {\n\t\tlet checklist = [ \"SYSTEM_SHUTDOWN\", \"FS_WRITE\", \"FS_BYPASS_PERMISSIONS\" ];\n\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SYSADMIN_TOOLS_PRIVFAIL\");\n\t\t\treturn;\n\t\t}\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SETTING_FSCK_FLAG\");\n\t\ttry {\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/.fsck\",\n\t\t\t\tdata: \"recover\"\n\t\t\t});\n\t\t} catch {\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SETTING_FSCK_FLAG_FAILED\");\n\t\t\tcontainer.hidden = false;\n\t\t\treturn;\n\t\t}\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"RESTARTING\");\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: true\n\t\t});\n\t});\n\tfsckDiscardButton.addEventListener(\"click\", async function() {\n\t\tlet checklist = [ \"SYSTEM_SHUTDOWN\", \"FS_WRITE\", \"FS_BYPASS_PERMISSIONS\" ];\n\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SYSADMIN_TOOLS_PRIVFAIL\");\n\t\t\treturn;\n\t\t}\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SETTING_FSCK_FLAG\");\n\t\ttry {\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/.fsck\",\n\t\t\t\tdata: \"discard\"\n\t\t\t});\n\t\t} catch {\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SETTING_FSCK_FLAG_FAILED\");\n\t\t\tcontainer.hidden = false;\n\t\t\treturn;\n\t\t}\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"RESTARTING\");\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: true\n\t\t});\n\t});\n\twipeSystemButton.addEventListener(\"click\", async function() {\n\t\tcontainer.hidden = true;\n\t\tlet promptMessage = document.createElement(\"span\");\n\t\tlet inputBox = document.createElement(\"input\");\n\t\tlet randomString = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16);\n\t\tpromptMessage.innerText = \"Copy-paste \" + randomString + \" to confirm: \";\n\t\textraActivities.innerText = \"\";\n\t\textraActivities.appendChild(promptMessage);\n\t\textraActivities.appendChild(inputBox);\n\t\tawait new Promise(function(resolve, reject) {\n\t\t\tinputBox.oninput = async function() {\n\t\t\t\tif (inputBox.value.trim() == randomString) resolve();\n\t\t\t\telse {\n\t\t\t\t\tcontainer.hidden = false;\n\t\t\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SYSADMIN_TOOLS_PRIVFAIL\");\n\t\t\t\t\treject(\"Invalid confirmation\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlet checklist = [ \"FS_REMOVE\", \"FS_MOUNT\", \"FS_READ\", \"LLDISK_IDB_READ\", \"LLDISK_IDB_WRITE\", \"LLDISK_IDB_REMOVE\", \"LLDISK_IDB_LIST\", \"LLDISK_IDB_SYNC\", \"SYSTEM_SHUTDOWN\", \"FS_BYPASS_PERMISSIONS\" ];\n\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\tcontainer.hidden = false;\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SYSADMIN_TOOLS_PRIVFAIL\");\n\t\t\treturn;\n\t\t}\n\t\tawait availableAPIs.closeability(false);\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"WIPING_SYSTEM\");\n\t\ttry {\n\t\t\tawait availableAPIs.fs_mount({\n\t\t\t\tmountpoint: \"pref\",\n\t\t\t\tfilesystem: \"preferenceMount\",\n\t\t\t\tfilesystemOptions: {}\n\t\t\t});\n\t\t\tlet prefOpts = await availableAPIs.fs_ls({ path: \"pref\" });\n\t\t\tfor (let prefOpt of prefOpts) await availableAPIs.fs_rm({ path: \"pref/\" + prefOpt });\n\t\t\tlet idb_keys = await availableAPIs.lldaIDBList();\n\t\t\tfor (let key of idb_keys) {\n\t\t\t\tlet partLen = (await availableAPIs.lldaIDBRead({ key })).length;\n\t\t\t\tlet randomness = \"\";\n\t\t\t\twhile (randomness.length < partLen) {\n\t\t\t\t\tlet remainingBytes = Math.round((partLen - randomness.length) / 2);\n\t\t\t\t\tif (remainingBytes > 65536) remainingBytes = 65536;\n\t\t\t\t\trandomness += crypto.getRandomValues(new Uint8Array(remainingBytes)).reduce((a, b) => a + b.toString(16).padStart(2, \"0\"), \"\");\n\t\t\t\t}\n\t\t\t\tawait availableAPIs.lldaIDBWrite({ key, value: randomness });\n\t\t\t\tawait availableAPIs.lldaIDBSync();\n\t\t\t\tawait availableAPIs.lldaIDBRemove({ key });\n\t\t\t\tawait availableAPIs.lldaIDBSync();\n\t\t\t}\n\t\t\t\n\t\t\tawait availableAPIs.shutdown({});\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.closeability(true);\n\t\t\tconsole.error(e);\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"WIPING_SYSTEM_FAILED\");\n\t\t\tcontainer.hidden = false;\n\t\t\treturn;\n\t\t}\n\t});\n\t\n\tupdateFirmwareButton.addEventListener(\"click\", async function() {\n\t\tlet checklist = [ \"FETCH_SEND\", \"SYSTEM_SHUTDOWN\", \"SET_FIRMWARE\" ];\n\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SYSADMIN_TOOLS_PRIVFAIL\");\n\t\t\treturn;\n\t\t}\n\t\tawait availableAPIs.closeability(false);\n\t\tcontainer.hidden = true;\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOADING\");\n\t\tlet fwArchive;\n\t\ttry {\n\t\t\tfwArchive = await availableAPIs.fetchSend({\n\t\t\t\turl: \"/init.js\",\n\t\t\t\tinit: {}\n\t\t\t});\n\t\t\tif (!fwArchive.ok) throw new Error(\"Download failed\");\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.closeability(true);\n\t\t\tconsole.error(e);\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOAD_FAILED\");\n\t\t\tcontainer.hidden = false;\n\t\t\treturn;\n\t\t}\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"UPDATEFW_DECODING\");\n\t\tfwArchive = fwArchive.arrayBuffer;\n\t\tfwArchive = new TextDecoder().decode(fwArchive);\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"UPDATEFW_SETTING\");\n\t\tawait availableAPIs.setFirmware(fwArchive);\n\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"RESTARTING\");\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: true\n\t\t});\n\t});\n\timagingButton.addEventListener(\"click\", async function() {\n\t\tlet checklist = [ \"GET_THEME\", \"LLDISK_READ\", \"LLDISK_WRITE\", \"LLDISK_LIST_PARTITIONS\", \"LLDISK_INIT_PARTITIONS\", \"LLDISK_REMOVE\", \"LLDISK_IDB_READ\", \"LLDISK_IDB_WRITE\", \"LLDISK_IDB_REMOVE\", \"LLDISK_IDB_LIST\", \"LLDISK_IDB_SYNC\", \"FS_READ\", \"FS_WRITE\", \"FS_BYPASS_PERMISSIONS\", \"SYSTEM_SHUTDOWN\", \"FS_LIST_PARTITIONS\", \"IPC_SEND_PIPE\", \"GET_LOCALE\", \"IPC_CREATE_PIPE\", \"IPC_LISTEN_PIPE\", \"START_TASK\" ];\n\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SYSADMIN_TOOLS_PRIVFAIL\");\n\t\t\treturn;\n\t\t}\n\t\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"SYSTEM_IMAGING\"));\n\t\timaging();\n\t});\n\tchangeLocale.addEventListener(\"click\", async function() {\n\t\tlet checklist = [ \"GET_THEME\", \"GET_LOCALE\", \"FS_WRITE\", \"FS_BYPASS_PERMISSIONS\", \"RUN_KLVL_CODE\", \"FS_LIST_PARTITIONS\" ];\n\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SYSADMIN_TOOLS_PRIVFAIL\");\n\t\t\treturn;\n\t\t}\n\t\tcontainer.hidden = true;\n\t\textraActivities.innerText = \"\";\n\t\tlet locales = await availableAPIs.installedLocales();\n\t\tlet localeSelect = document.createElement(\"select\");\n\t\tlet localeZero = document.createElement(\"option\");\n\t\tlocaleZero.value = \"\";\n\t\tlocaleZero.innerText = \" 🌐 Language 🌐 \";\n\t\tlocaleZero.selected = true;\n\t\tlocaleZero.disabled = true;\n\t\tlocaleZero.hidden = true;\n\t\tlocaleSelect.appendChild(localeZero);\n\t\tfor (let locale of locales) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = locale;\n\t\t\toption.innerText = await availableAPIs.lookupOtherLocale({ key: \"LOCALE_NAME\", locale });\n\t\t\tlocaleSelect.appendChild(option);\n\t\t}\n\t\tlocaleSelect.addEventListener(\"change\", async function() {\n\t\t\tawait availableAPIs.runKlvlCode(\"modules.locales.defaultLocale = \" + JSON.stringify(localeSelect.value));\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/06-localeset.js\", \n\t\t\t\tdata: \"modules.locales.defaultLocale = \" + JSON.stringify(await availableAPIs.osLocale()) + \";\\n\"\n\t\t\t});\n\t\t\ttry {\n\t\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"GENERATING_KERNEL\");\n\t\t\t\tlet entireBoot = [];\n\t\t\t\tlet bootFiles = await availableAPIs.fs_ls({ path: (await availableAPIs.getSystemMount()) + \"/boot\" });\n\t\t\t\tif (bootFiles.includes(\"00-compiled.js\")) bootFiles.splice(bootFiles.indexOf(\"00-compiled.js\"), 1);\n\t\t\t\tif (bootFiles.includes(\"99-zzpatchfinisher.js\")) bootFiles.splice(bootFiles.indexOf(\"99-zzpatchfinisher.js\"), 1);\n\t\t\t\tfor (let bootFile of bootFiles) {\n\t\t\t\t\tentireBoot.push([ bootFile, await availableAPIs.fs_read({\n\t\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/\" + bootFile\n\t\t\t\t\t}) ]);\n\t\t\t\t}\n\t\t\t\tentireBoot = entireBoot.sort((a, b) => a[0].localeCompare(b[0]))\n\t\t\t\t\t.map(a => \"// modules/.../boot/\" + a[0] + \"\\n\" + a[1]).join(\"\\n\");\n\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/00-compiled.js\",\n\t\t\t\t\tdata: entireBoot + \"\\nreturn;/*\"\n\t\t\t\t});\n\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/99-zzpatchfinisher.js\",\n\t\t\t\t\tdata: \"*/\"\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"REGENERATING_KERNEL_FAILED\");\n\t\t\t}\n\t\t\tlocaleSelect.remove();\n\t\t\tcontainer.hidden = false;\n\t\t\textraActivities.innerText = await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\");\n\t\t});\n\t\textraActivities.appendChild(localeSelect);\n\t});\n\tcontainer.appendChild(fsckOrderButton);\n\tcontainer.appendChild(fsckDiscardButton);\n\tcontainer.appendChild(wipeSystemButton);\n\tcontainer.appendChild(updateFirmwareButton);\n\tcontainer.appendChild(imagingButton);\n\tcontainer.appendChild(changeLocale);\n\tdocument.body.appendChild(container);\n\tdocument.body.appendChild(extraActivities);\n})();\nfunction imaging() {\n\tasync function mainPage() {\n\t\tdocument.body.innerText = \"\";\n\t\tlet create = document.createElement(\"button\");\n\t\tlet restore = document.createElement(\"button\");\n\t\tcreate.innerText = await availableAPIs.lookupLocale(\"CREATE_IMAGE\");\n\t\trestore.innerText = await availableAPIs.lookupLocale(\"RESTORE_IMAGE\");\n\t\tcreate.onclick = createPage;\n\t\trestore.onclick = restorePage;\n\t\tdocument.body.appendChild(create);\n\t\tdocument.body.appendChild(restore);\n\t}\n\n\tasync function createPage() {\n\t\tdocument.body.innerText = \"\";\n\t\tlet backBtn = document.createElement(\"button\");\n\t\tlet pageTitle = document.createElement(\"span\");\n\t\tlet selectedFileLabel = document.createElement(\"label\");\n\t\tlet selectedFile = document.createElement(\"input\");\n\t\tlet selectedFileButton = document.createElement(\"button\");\n\t\tlet createBtn = document.createElement(\"button\");\n\t\tlet progressBar = document.createElement(\"progress\");\n\t\tlet outcome = document.createElement(\"span\");\n\t\tbackBtn.innerText = \"<-\";\n\t\tpageTitle.innerText = await availableAPIs.lookupLocale(\"CREATE_IMAGE\");\n\t\tselectedFileLabel.innerText = await availableAPIs.lookupLocale(\"SELECT_FILE_PROMPT\");\n\t\tselectedFileButton.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\t\tcreateBtn.innerText = await availableAPIs.lookupLocale(\"CREATE_IMAGE\");\n\t\toutcome.innerText = await availableAPIs.lookupLocale(\"EMPTY_STATUSBAR\");\n\t\tprogressBar.hidden = true;\n\t\tdocument.body.appendChild(backBtn);\n\t\tdocument.body.appendChild(pageTitle);\n\t\tdocument.body.appendChild(document.createElement(\"hr\"));\n\t\tdocument.body.appendChild(selectedFileLabel);\n\t\tdocument.body.appendChild(selectedFile);\n\t\tdocument.body.appendChild(selectedFileButton);\n\t\tdocument.body.appendChild(document.createElement(\"hr\"));\n\t\tdocument.body.appendChild(createBtn);\n\t\tdocument.body.appendChild(progressBar);\n\t\tdocument.body.appendChild(outcome);\n\n\t\tbackBtn.onclick = mainPage;\n\t\tselectedFileButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"save\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) selectedFile.value = result.selected;\n\t\t}\n\n\t\tcreateBtn.onclick = async function() {\n\t\t\tbackBtn.disabled = true;\n\t\t\tselectedFile.disabled = true;\n\t\t\tselectedFileButton.disabled = true;\n\t\t\tcreateBtn.disabled = true;\n\t\t\tprogressBar.hidden = false;\n\t\t\toutcome.hidden = true;\n\t\t\tprogressBar.max = 0;\n\t\t\tprogressBar.value = 0;\n\t\t\tawait availableAPIs.closeability(false);\n\n\t\t\tasync function stopProduction(oc) {\n\t\t\t\tbackBtn.disabled = false;\n\t\t\t\tselectedFile.disabled = false;\n\t\t\t\tselectedFileButton.disabled = false;\n\t\t\t\tcreateBtn.disabled = false;\n\t\t\t\tprogressBar.hidden = true;\n\t\t\t\toutcome.hidden = false;\n\t\t\t\toutcome.innerText = oc;\n\t\t\t\tawait availableAPIs.closeability(true);\n\t\t\t}\n\n\t\t\tif (selectedFile.value == \"\") return stopProduction(await availableAPIs.lookupLocale(\"FILE_NOT_SPECIFIED\"));\n\t\t\tlet image = { metadata: {}, data: {} };\n\t\t\tlet subImage = [];\n\t\t\ttry { subImage = await availableAPIs.lldaList(); progressBar.max = subImage.length;\n\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"LISTING_PARTITIONS_FAILED\")); }\n\t\t\tfor (let partition of subImage) try { image.metadata[partition] = await availableAPIs.lldaRead({ partition }); progressBar.value++;\n\t\t\t\t} catch { return stopProduction((await availableAPIs.lookupLocale(\"READING_PARTITION_FAILED\")).replace(\"%s\", partition)); }\n\t\t\ttry { subImage = await availableAPIs.lldaIDBList(); progressBar.max += subImage.length;\n\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"LISTING_DATA_FAILED\")); } \n\t\t\tfor (let dataPart of subImage) try { image.data[dataPart] = await availableAPIs.lldaIDBRead({ key: dataPart }); progressBar.value++;\n\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"READING_DATA_FAILED\")); }\n\t\t\tsubImage = [];\n\t\t\ttry { await availableAPIs.fs_write({ path: selectedFile.value, data: JSON.stringify(image) });\n\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"WRITING_IMAGE_FAILED\")); }\n\t\t\tstopProduction(await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\"));\n\t\t}\n\t}\n\n\tasync function restorePage() {\n\t\tdocument.body.innerText = \"\";\n\t\tlet backBtn = document.createElement(\"button\");\n\t\tlet pageTitle = document.createElement(\"span\");\n\t\tlet selectedFileLabel = document.createElement(\"label\");\n\t\tlet selectedFile = document.createElement(\"input\");\n\t\tlet selectedFileButton = document.createElement(\"button\");\n\t\tlet rebootOnRestore = document.createElement(\"input\");\n\t\tlet rebootOnRestoreLabel = document.createElement(\"label\");\n\t\tlet mergeFlag = document.createElement(\"input\");\n\t\tlet mergeFlagLabel = document.createElement(\"label\");\n\t\tlet restoreBtn = document.createElement(\"button\");\n\t\tlet progressBar = document.createElement(\"progress\");\n\t\tlet outcome = document.createElement(\"span\");\n\t\tbackBtn.innerText = \"<-\";\n\t\tpageTitle.innerText = await availableAPIs.lookupLocale(\"RESTORE_IMAGE\");\n\t\tselectedFileLabel.innerText = await availableAPIs.lookupLocale(\"SELECT_FILE_PROMPT\");\n\t\tselectedFileButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\trestoreBtn.innerText = await availableAPIs.lookupLocale(\"RESTORE_IMAGE\");\n\t\trebootOnRestoreLabel.innerText = await availableAPIs.lookupLocale(\"REBOOT_ON_RESTORE\");\n\t\tmergeFlagLabel.innerText = await availableAPIs.lookupLocale(\"MERGE_STATES\");\n\t\toutcome.innerText = await availableAPIs.lookupLocale(\"EMPTY_STATUSBAR\");\n\t\trebootOnRestore.type = \"checkbox\";\n\t\tmergeFlag.type = \"checkbox\";\n\t\trebootOnRestore.id = \"rebootOnRestore\";\n\t\tmergeFlag.id = \"mergeFlag\";\n\t\trebootOnRestoreLabel.htmlFor = \"rebootOnRestore\";\n\t\tmergeFlagLabel.htmlFor = \"mergeFlag\";\n\t\tprogressBar.hidden = true;\n\t\tdocument.body.appendChild(backBtn);\n\t\tdocument.body.appendChild(pageTitle);\n\t\tdocument.body.appendChild(document.createElement(\"hr\"));\n\t\tdocument.body.appendChild(selectedFileLabel);\n\t\tdocument.body.appendChild(selectedFile);\n\t\tdocument.body.appendChild(selectedFileButton);\n\t\tdocument.body.appendChild(document.createElement(\"br\"));\n\t\tdocument.body.appendChild(rebootOnRestore);\n\t\tdocument.body.appendChild(rebootOnRestoreLabel);\n\t\tdocument.body.appendChild(document.createElement(\"br\"));\n\t\tdocument.body.appendChild(mergeFlag);\n\t\tdocument.body.appendChild(mergeFlagLabel);\n\t\tdocument.body.appendChild(document.createElement(\"hr\"));\n\t\tdocument.body.appendChild(restoreBtn);\n\t\tdocument.body.appendChild(progressBar);\n\t\tdocument.body.appendChild(outcome);\n\n\t\tbackBtn.onclick = mainPage;\n\t\tselectedFileButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) selectedFile.value = result.selected;\n\t\t}\n\n\t\trestoreBtn.onclick = async function() {\n\t\t\tbackBtn.disabled = true;\n\t\t\tselectedFile.disabled = true;\n\t\t\tselectedFileButton.disabled = true;\n\t\t\trestoreBtn.disabled = true;\n\t\t\trebootOnRestore.disabled = true;\n\t\t\tmergeFlag.disabled = true;\n\t\t\toutcome.hidden = true;\n\t\t\tprogressBar.hidden = false;\n\t\t\tprogressBar.max = 0;\n\t\t\tprogressBar.value = 0;\n\t\t\tawait availableAPIs.closeability(false);\n\n\t\t\tasync function stopProduction(oc) {\n\t\t\t\tbackBtn.disabled = false;\n\t\t\t\tselectedFile.disabled = false;\n\t\t\t\tselectedFileButton.disabled = false;\n\t\t\t\trestoreBtn.disabled = false;\n\t\t\t\trebootOnRestore.disabled = false;\n\t\t\t\tmergeFlag.disabled = false;\n\t\t\t\toutcome.hidden = false;\n\t\t\t\tprogressBar.hidden = true;\n\t\t\t\toutcome.innerText = oc;\n\t\t\t\tawait availableAPIs.closeability(true);\n\t\t\t}\n\n\t\t\tif (selectedFile.value == \"\") return stopProduction(await availableAPIs.lookupLocale(\"FILE_NOT_SPECIFIED\"));\n\t\t\ttry { await availableAPIs.lldaList();\n\t\t\t\t} catch { await availableAPIs.lldaInitPartitions(); }\n\n\t\t\tlet image;\n\t\t\ttry { image = JSON.parse(await availableAPIs.fs_read({ path: selectedFile.value }));\n\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"READING_IMAGE_FAILED\")); }\n\n\t\t\tprogressBar.max += Object.keys(image.metadata).length + Object.keys(image.data).length;\n\t\t\tfor (let partition in image.metadata) try { await availableAPIs.lldaWrite({ partition, data: image.metadata[partition] }); progressBar.value++;\n\t\t\t\t} catch { return stopProduction((await availableAPIs.lookupLocale(\"WRITING_PARTITION_FAILED\")).replace(\"%s\", partition)); }\n\t\t\tfor (let dataPart in image.data) try { await availableAPIs.lldaIDBWrite({ key: dataPart, value: image.data[dataPart] }); progressBar.value++;\n\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"WRITING_DATA_FAILED\")); }\n\t\t\t\n\t\t\tif (!mergeFlag.checked) {\n\t\t\t\tlet currentSubImage = [];\n\t\t\t\ttry { currentSubImage = (await availableAPIs.lldaList()).filter(a => !Object.keys(image.metadata).includes(a)); progressBar.max += currentSubImage.length;\n\t\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"LISTING_PARTITIONS_FAILED\")); }\n\t\t\t\tfor (let partition of currentSubImage) try { await availableAPIs.lldaRemove({ partition }); progressBar.value++;\n\t\t\t\t\t} catch { return stopProduction((await availableAPIs.lookupLocale(\"DELETING_PARTITION_FAILED\")).replace(\"%s\", partition)); }\n\t\t\t\t\n\t\t\t\ttry { currentSubImage = (await availableAPIs.lldaIDBList()).filter(a => !Object.keys(image.data).includes(a)); progressBar.max += currentSubImage.length;\n\t\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"LISTING_DATA_FAILED\")); }\n\t\t\t\tfor (let dataPart of currentSubImage) try { await availableAPIs.lldaIDBRemove({ key: dataPart }); progressBar.value++;\n\t\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"DELETING_DATA_FAILED\")); }\n\t\t\t\tcurrentSubImage = [];\n\t\t\t}\n\n\t\t\ttry { await availableAPIs.lldaIDBSync();\n\t\t\t} catch {}\n\n\t\t\tif (rebootOnRestore.checked) try { await availableAPIs.shutdown({ isReboot: true });\n\t\t\t\t} catch { return stopProduction(await availableAPIs.lookupLocale(\"SHUTTING_DOWN_FAILED\")); }\n\t\t\tstopProduction(await availableAPIs.lookupLocale(\"SUCCESSFUL_OP\"));\n\t\t}\n\t}\n\tmainPage();\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","32cbde05baf963ca07cf50f031f0d16d90c8bb8760672259eb224a645fbfa67e36ecfac52ec3b7dd81f28cec6f179a4334d26cd76cd33d8226e2718704488b63":"// =====BEGIN MANIFEST=====\n// link: lrn:SYSTEM_SECURITY_TITLE\n// signer: automaticSigner\n// allow: GET_USER_INFO, USER_INFO_OTHERS, SENSITIVE_USER_INFO_OTHERS, SET_USER_INFO, GET_LOCALE, GET_THEME, CSP_OPERATIONS, SET_SECURITY_CHECKS, FS_LIST_PARTITIONS, FS_READ, FS_REMOVE, FS_WRITE, FS_CHANGE_PERMISSION, START_TASK, FS_BYPASS_PERMISSIONS, MANAGE_TOKENS, SWITCH_USERS_AUTOMATICALLY, ELEVATE_PRIVILEGES, GET_USER_LIST\n// signature: b65bfd704ab78ac9ce099a8b641984359af507907348d52c59bd95b1062a180312d5b05993b67e1d806a961d986f4eeed7aca606b382f4bb073f822782a3d401\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"SYSTEM_SECURITY_TITLE\"));\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"GET_USER_INFO\", \"USER_INFO_OTHERS\", \"SENSITIVE_USER_INFO_OTHERS\", \"SET_USER_INFO\", \"FS_LIST_PARTITIONS\", \"FS_READ\", \"FS_REMOVE\", \"FS_WRITE\", \"FS_CHANGE_PERMISSION\", \"START_TASK\", \"FS_BYPASS_PERMISSIONS\", \"MANAGE_TOKENS\", \"SWITCH_USERS_AUTOMATICALLY\", \"ELEVATE_PRIVILEGES\", \"GET_USER_LIST\" ];\n\tdocument.body.style.fontFamily = \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\";\n\tif (await availableAPIs.isDarkThemed()) document.body.style.color = \"white\";\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tdocument.body.innerText = await availableAPIs.lookupLocale(\"SYSTEM_SECURITY_DENY\");\n\t\tlet currentToken = await availableAPIs.getProcessToken();\n\t\tlet newToken = await availableAPIs.consentGetToken({\n\t\t\tintent: await availableAPIs.lookupLocale(\"SYSTEM_SECURITY_INTENT\"),\n\t\t\tname: await availableAPIs.lookupLocale(\"SYSTEM_SECURITY_TITLE\"),\n\t\t});\n\t\tif (!newToken) return;\n\t\tawait availableAPIs.setProcessToken(newToken);\n\t\tawait availableAPIs.revokeToken(currentToken);\n\t\tprivileges = await availableAPIs.getPrivileges();\n\t\tif (!checklist.every(p => privileges.includes(p))) return;\n\t}\n\tdocument.body.innerText = \"\";\n\tlet pageHeader = document.createElement(\"b\");\n\tlet actionSpecificField = document.createElement(\"div\");\n\tdocument.body.appendChild(pageHeader);\n\tdocument.body.appendChild(document.createElement(\"hr\"));\n\tdocument.body.appendChild(actionSpecificField);\n\tlet username, userData;\n\tasync function main() {\n\t\tusername = null;\n\t\tuserData = null;\n\t\tactionSpecificField.innerText = \"\";\n\t\tlet usernameField = document.createElement(\"input\");\n\t\tlet editButton = document.createElement(\"button\");\n\t\tpageHeader.innerText = await availableAPIs.lookupLocale(\"USERNAME_PROMPT\");\n\t\teditButton.innerText = await availableAPIs.lookupLocale(\"EDIT\");\n\t\tusernameField.placeholder = await availableAPIs.lookupLocale(\"USERNAME\");\n\t\tactionSpecificField.appendChild(usernameField);\n\t\tactionSpecificField.appendChild(editButton);\n\t\tactionSpecificField.appendChild(document.createElement(\"hr\"));\n\t\tfor (let user of await availableAPIs.getUsers()) {\n\t\t\tlet userButton = document.createElement(\"button\");\n\t\t\tuserButton.innerText = user;\n\t\t\tuserButton.addEventListener(\"click\", async function() {\n\t\t\t\tusernameField.value = user;\n\t\t\t\teditButton.click();\n\t\t\t});\n\t\t\tactionSpecificField.appendChild(userButton);\n\t\t}\n\t\teditButton.addEventListener(\"click\", async function() {\n\t\t\tif (!usernameField.value) return;\n\t\t\tusername = usernameField.value;\n\t\t\tuserData = await availableAPIs.getUserInfo({ desiredUser: username, sensitive: true });\n\t\t\tif (!userData) {\n\t\t\t\tuserData = {\n\t\t\t\t\tgroups: [username],\n\t\t\t\t\thomeDirectory: await availableAPIs.getSystemMount() + \"/home/\" + username,\n\t\t\t\t\tsecurityChecks: [],\n\t\t\t\t\tblankPrivileges: false\n\t\t\t\t};\n\t\t\t\tawait availableAPIs.setUserInfo({ desiredUser: username, info: userData });\n\t\t\t}\n\t\t\tuserEditPage();\n\t\t});\n\t}\n\n\tasync function userEditPage() {\n\t\tactionSpecificField.innerText = \"\";\n\t\tpageHeader.innerText = username;\n\t\tlet homeDirectoryChanger = document.createElement(\"button\");\n\t\tlet securityChecksButton = document.createElement(\"button\");\n\t\tlet groupChanger = document.createElement(\"button\");\n\t\tlet privilegeSetButton = document.createElement(\"button\");\n\t\tlet removeButton = document.createElement(\"button\");\n\t\tlet leaveButton = document.createElement(\"button\");\n\t\thomeDirectoryChanger.innerText = await availableAPIs.lookupLocale(\"USER_HOMEDIR\");\n\t\tsecurityChecksButton.innerText = await availableAPIs.lookupLocale(\"PERSONAL_SECURITY_TITLE\");\n\t\tgroupChanger.innerText = await availableAPIs.lookupLocale(\"USER_GROUPS\");\n\t\tprivilegeSetButton.innerText = await availableAPIs.lookupLocale(\"USER_EXT_PRIVILEGES\");\n\t\tremoveButton.innerText = await availableAPIs.lookupLocale(\"REMOVE_BTN\");\n\t\tleaveButton.innerText = await availableAPIs.lookupLocale(\"EXIT\");\n\t\thomeDirectoryChanger.addEventListener(\"click\", changeHomeDir);\n\t\tsecurityChecksButton.addEventListener(\"click\", async function() {\n\t\t\tawait availableAPIs.switchUser(username);\n\t\t\tawait availableAPIs.startTask({\n\t\t\t\tfile: await availableAPIs.getSystemMount() + \"/apps/personalSecurity.js\",\n\t\t\t\targPassed: []\n\t\t\t});\n\t\t\tawait availableAPIs.terminate();\n\t\t});\n\t\tgroupChanger.addEventListener(\"click\", changeGroups);\n\t\tprivilegeSetButton.addEventListener(\"click\", privilegeSet);\n\t\tremoveButton.addEventListener(\"click\", removeUser);\n\t\tleaveButton.addEventListener(\"click\", main);\n\t\tactionSpecificField.appendChild(homeDirectoryChanger);\n\t\tactionSpecificField.appendChild(securityChecksButton);\n\t\tactionSpecificField.appendChild(groupChanger);\n\t\tactionSpecificField.appendChild(privilegeSetButton);\n\t\tactionSpecificField.appendChild(removeButton);\n\t\tactionSpecificField.appendChild(leaveButton);\n\t}\n\n\tasync function changeHomeDir() {\n\t\tactionSpecificField.innerText = \"\";\n\t\tpageHeader.innerText = \"[\" + username + \"] \" + await availableAPIs.lookupLocale(\"USER_HOMEDIR\");\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet homeDirectoryField = document.createElement(\"input\");\n\t\tlet changeButton = document.createElement(\"button\");\n\t\tlet createButton = document.createElement(\"button\");\n\t\tlet status = document.createElement(\"div\");\n\t\tbackButton.innerText = \"<-\";\n\t\tchangeButton.innerText = await availableAPIs.lookupLocale(\"EDIT\");\n\t\tcreateButton.innerText = await availableAPIs.lookupLocale(\"CREATE_HD\");\n\t\thomeDirectoryField.value = userData.homeDirectory;\n\t\tbackButton.addEventListener(\"click\", userEditPage);\n\t\tchangeButton.addEventListener(\"click\", async function() {\n\t\t\tif (!homeDirectoryField.value) return;\n\t\t\tuserData.homeDirectory = homeDirectoryField.value;\n\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\tuserEditPage();\n\t\t});\n\t\tcreateButton.addEventListener(\"click\", async function() {\n\t\t\ttry {\n\t\t\t\tawait mkrecursive(homeDirectoryField.value);\n\t\t\t\tawait availableAPIs.fs_chown({ path: homeDirectoryField.value, newUser: username });\n\t\t\t\tawait availableAPIs.fs_chgrp({ path: homeDirectoryField.value, newGrp: userData.groups[0] || username });\n\t\t\t\tawait availableAPIs.fs_chmod({ path: homeDirectoryField.value, newPermissions: \"rx\" });\n\t\t\t\tstatus.innerText = await availableAPIs.lookupLocale(\"CREATING_HD_OK\");\n\t\t\t} catch {\n\t\t\t\tstatus.innerText = await availableAPIs.lookupLocale(\"CREATING_HD_FAIL\");\n\t\t\t}\n\t\t});\n\t\tactionSpecificField.appendChild(backButton);\n\t\tactionSpecificField.appendChild(homeDirectoryField);\n\t\tactionSpecificField.appendChild(changeButton);\n\t\tactionSpecificField.appendChild(createButton);\n\t\tactionSpecificField.appendChild(status);\n\t}\n\n\tasync function changeGroups() {\n\t\tactionSpecificField.innerText = \"\";\n\t\tpageHeader.innerText = \"[\" + username + \"] \" + await availableAPIs.lookupLocale(\"USER_GROUPS\");\n\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet addGroup = document.createElement(\"button\");\n\t\tbackButton.innerText = \"<-\";\n\t\taddGroup.innerText = await availableAPIs.lookupLocale(\"ADD_BTN\");\n\n\t\tbackButton.addEventListener(\"click\", userEditPage);\n\t\taddGroup.addEventListener(\"click\", addGroupAction);\n\t\tactionSpecificField.appendChild(backButton);\n\t\tactionSpecificField.appendChild(addGroup);\n\n\t\tfor (let group in userData.groups) {\n\t\t\tlet groupInfo = userData.groups[group];\n\t\t\tlet groupDiv = document.createElement(\"div\");\n\t\t\tgroupDiv.style.display = \"flex\";\n\t\t\tlet groupNameDiv = document.createElement(\"div\");\n\t\t\tgroupNameDiv.style.flex = 100;\n\t\t\tlet groupBtns = document.createElement(\"div\");\n\t\t\tgroupNameDiv.innerText = groupInfo;\n\t\t\tlet btnUp = document.createElement(\"button\");\n\t\t\tlet btnDown = document.createElement(\"button\");\n\t\t\tlet btnDelete = document.createElement(\"button\");\n\t\t\tbtnUp.innerText = \"/\\\\\";\n\t\t\tbtnUp.disabled = group == 0;\n\t\t\tbtnDown.disabled = group == userData.groups.length - 1;\n\t\t\tbtnDown.innerText = \"\\\\/\";\n\t\t\tbtnDelete.innerText = \"x\";\n\t\t\tgroupBtns.appendChild(btnUp);\n\t\t\tgroupBtns.appendChild(btnDown);\n\t\t\tgroupBtns.appendChild(btnDelete);\n\t\t\tgroupDiv.appendChild(groupNameDiv);\n\t\t\tgroupDiv.appendChild(groupBtns);\n\t\t\tbtnDelete.addEventListener(\"click\", async function() {\n\t\t\t\tuserData.groups.splice(group, 1);\n\t\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\t\tchangeGroups();\n\t\t\t});\n\t\t\tactionSpecificField.appendChild(groupDiv);\n\t\t\tbtnUp.addEventListener(\"click\", async function() {\n\t\t\t\tuserData.groups.splice(group, 1);\n\t\t\t\tuserData.groups.splice(group - 1, 0, groupInfo);\n\t\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\t\tchangeGroups();\n\t\t\t});\n\t\t\tbtnDown.addEventListener(\"click\", async function() {\n\t\t\t\tuserData.groups.splice(group, 1);\n\t\t\t\tuserData.groups.splice(group - 1 + 2, 0, groupInfo);\n\t\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\t\tchangeGroups();\n\t\t\t});\n\t\t}\n\t}\n\n\tasync function addGroupAction() {\n\t\tactionSpecificField.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet groupNameField = document.createElement(\"input\");\n\t\tlet createButton = document.createElement(\"button\");\n\t\tbackButton.innerText = \"<-\";\n\t\tcreateButton.innerText = await availableAPIs.lookupLocale(\"ADD_BTN\");\n\t\tbackButton.addEventListener(\"click\", changeGroups);\n\t\tcreateButton.addEventListener(\"click\", async function() {\n\t\t\tuserData.groups.push(groupNameField.value);\n\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\tchangeGroups();\n\t\t});\n\t\tactionSpecificField.appendChild(backButton);\n\t\tactionSpecificField.appendChild(groupNameField);\n\t\tactionSpecificField.appendChild(createButton);\n\t}\n\n\tasync function removeUser() {\n\t\tactionSpecificField.innerText = \"\";\n\t\tpageHeader.innerText = \"[\" + username + \"] \" + await availableAPIs.lookupLocale(\"REMOVE_BTN\");\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet removeWithHomedir = document.createElement(\"button\");\n\t\tlet removeAlone = document.createElement(\"button\");\n\t\tbackButton.innerText = \"<-\";\n\t\tremoveWithHomedir.innerText = await availableAPIs.lookupLocale(\"REMOVE_USER_WITH_HD\");\n\t\tremoveAlone.innerText = await availableAPIs.lookupLocale(\"REMOVE_BTN\");\n\t\tbackButton.addEventListener(\"click\", userEditPage);\n\t\tremoveWithHomedir.addEventListener(\"click\", async function() {\n\t\t\trecursiveRemove(userData.homeDirectory);\n\t\t\tawait availableAPIs.setUserInfo({\n\t\t\t\tdesiredUser: username,\n\t\t\t\tinfo: undefined\n\t\t\t});\n\t\t\tmain();\n\t\t});\n\t\tremoveAlone.addEventListener(\"click\", async function() {\n\t\t\tawait availableAPIs.setUserInfo({\n\t\t\t\tdesiredUser: username,\n\t\t\t\tinfo: undefined\n\t\t\t});\n\t\t\tmain();\n\t\t});\n\t\tactionSpecificField.appendChild(backButton);\n\t\tactionSpecificField.appendChild(removeWithHomedir);\n\t\tactionSpecificField.appendChild(removeAlone);\n\t}\n\n\tasync function privilegeSet() {\n\t\tactionSpecificField.innerText = \"\";\n\t\tpageHeader.innerText = \"[\" + username + \"] \" + await availableAPIs.lookupLocale(\"USER_EXT_PRIVILEGES\");\n\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet addPrivilege = document.createElement(\"button\");\n\t\tlet removeAll = document.createElement(\"button\");\n\t\tlet warning = document.createElement(\"b\");\n\t\tlet blankPrivsCheck = document.createElement(\"input\");\n\t\tlet blankPrivsCheckLabel = document.createElement(\"label\");\n\t\tbackButton.innerText = \"<-\";\n\t\taddPrivilege.innerText = await availableAPIs.lookupLocale(\"ADD_BTN\");\n\t\tremoveAll.innerText = await availableAPIs.lookupLocale(\"REMOVE_BTN\");\n\t\tblankPrivsCheck.type = \"checkbox\";\n\t\tblankPrivsCheck.id = \"blankPrivCheck\";\n\t\tblankPrivsCheckLabel.innerText = await availableAPIs.lookupLocale(\"BLANK_PRIVILEGE_FLAG\");\n\t\tblankPrivsCheckLabel.htmlFor = \"blankPrivCheck\";\n\t\tblankPrivsCheck.checked = userData.blankPrivileges;\n\t\twarning.innerText = await availableAPIs.lookupLocale(\"WARNING_PRIVILEGES\");\n\n\t\tbackButton.addEventListener(\"click\", userEditPage);\n\t\taddPrivilege.addEventListener(\"click\", addPrivilegeAction);\n\t\tremoveAll.addEventListener(\"click\", async function() {\n\t\t\tuserData.additionalPrivilegeSet = undefined;\n\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\tprivilegeSet();\n\t\t})\n\t\tblankPrivsCheck.addEventListener(\"change\", async function() {\n\t\t\tuserData.blankPrivileges = blankPrivsCheck.checked;\n\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t})\n\t\tactionSpecificField.appendChild(backButton);\n\t\tactionSpecificField.appendChild(addPrivilege);\n\t\tactionSpecificField.appendChild(removeAll);\n\t\tactionSpecificField.appendChild(blankPrivsCheck);\n\t\tactionSpecificField.appendChild(blankPrivsCheckLabel);\n\t\tactionSpecificField.appendChild(document.createElement(\"br\"));\n\t\tactionSpecificField.appendChild(warning);\n\n\t\tif (!userData.additionalPrivilegeSet) userData.additionalPrivilegeSet = [];\n\t\tfor (let privilege in userData.additionalPrivilegeSet) {\n\t\t\tlet privilegeInfo = userData.additionalPrivilegeSet[privilege];\n\t\t\tlet privilegeDiv = document.createElement(\"div\");\n\t\t\tprivilegeDiv.style.display = \"flex\";\n\t\t\tlet privilegeNameDiv = document.createElement(\"div\");\n\t\t\tprivilegeNameDiv.style.flex = 100;\n\t\t\tlet privilegeBtns = document.createElement(\"div\");\n\t\t\tprivilegeNameDiv.innerText = privilegeInfo;\n\t\t\tlet btnUp = document.createElement(\"button\");\n\t\t\tlet btnDown = document.createElement(\"button\");\n\t\t\tlet btnDelete = document.createElement(\"button\");\n\t\t\tbtnUp.innerText = \"/\\\\\";\n\t\t\tbtnUp.disabled = privilege == 0;\n\t\t\tbtnDown.disabled = privilege == userData.additionalPrivilegeSet.length - 1;\n\t\t\tbtnDown.innerText = \"\\\\/\";\n\t\t\tbtnDelete.innerText = \"x\";\n\t\t\tprivilegeBtns.appendChild(btnUp);\n\t\t\tprivilegeBtns.appendChild(btnDown);\n\t\t\tprivilegeBtns.appendChild(btnDelete);\n\t\t\tprivilegeDiv.appendChild(privilegeNameDiv);\n\t\t\tprivilegeDiv.appendChild(privilegeBtns);\n\t\t\tbtnDelete.addEventListener(\"click\", async function() {\n\t\t\t\tuserData.additionalPrivilegeSet.splice(privilege, 1);\n\t\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\t\tprivilegeSet();\n\t\t\t});\n\t\t\tactionSpecificField.appendChild(privilegeDiv);\n\t\t\tbtnUp.addEventListener(\"click\", async function() {\n\t\t\t\tuserData.additionalPrivilegeSet.splice(privilege, 1);\n\t\t\t\tuserData.additionalPrivilegeSet.splice(privilege - 1, 0, privilegeInfo);\n\t\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\t\tprivilegeSet();\n\t\t\t});\n\t\t\tbtnDown.addEventListener(\"click\", async function() {\n\t\t\t\tuserData.additionalPrivilegeSet.splice(privilege, 1);\n\t\t\t\tuserData.additionalPrivilegeSet.splice(privilege - 1 + 2, 0, privilegeInfo);\n\t\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\t\tprivilegeSet();\n\t\t\t});\n\t\t}\n\t}\n\n\tasync function addPrivilegeAction() {\n\t\tactionSpecificField.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet privilegeNameField = document.createElement(\"input\");\n\t\tlet createButton = document.createElement(\"button\");\n\t\tbackButton.innerText = \"<-\";\n\t\tcreateButton.innerText = await availableAPIs.lookupLocale(\"ADD_BTN\");\n\t\tbackButton.addEventListener(\"click\", privilegeSet);\n\t\tcreateButton.addEventListener(\"click\", async function() {\n\t\t\tif (!userData.additionalPrivilegeSet) userData.additionalPrivilegeSet = [];\n\t\t\tuserData.additionalPrivilegeSet.push(...(privilegeNameField.value.match(/[A-Z_]+/g) || []));\n\t\t\tuserData.additionalPrivilegeSet = Array.from(new Set(userData.additionalPrivilegeSet));\n\t\t\tawait availableAPIs.setUserInfo({desiredUser: username, info: userData});\n\t\t\tprivilegeSet();\n\t\t});\n\t\tactionSpecificField.appendChild(backButton);\n\t\tactionSpecificField.appendChild(privilegeNameField);\n\t\tactionSpecificField.appendChild(createButton);\n\t}\n\n\tasync function mkrecursive(dir) {\n\t\tlet slices = dir.split(\"/\");\n\t\tfor (let i = 2; i <= slices.length; i++) {\n\t\t\tlet browse = await availableAPIs.fs_ls({ path: slices.slice(0, i - 1).join(\"/\") });\n\t\t\tif (!browse.includes(slices[i - 1])) await availableAPIs.fs_mkdir({ path: slices.slice(0, i).join(\"/\") });\n\t\t}\n\t}\n\n\tasync function recursiveRemove(path) {\n\t\tlet dirList = await availableAPIs.fs_ls({ path });\n\t\tfor (let fileIndex in dirList) {\n\t\t\tlet file = dirList[fileIndex];\n\t\t\tif (await availableAPIs.fs_isDirectory({ path: path + \"/\" + file })) await recursiveRemove(path + \"/\" + file);\n\t\t\telse await availableAPIs.fs_rm({ path: path + \"/\" + file });\n\t\t}\n\t\tawait availableAPIs.fs_rm({ path });\n\t}\n\tmain();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","2e64c15e22c54259b3336fcb33f823a4af5a8e438aedcb8f76bdd1b9f8eb83963373b6adeed8aba70a9ce427ad3fae37ece3c29c0f6094f6661e07e0084109a8":"// =====BEGIN MANIFEST=====\n// link: lrn:TASK_MANAGER\n// signer: automaticSigner\n// fnName: taskMgrInstaller\n// allow: LIST_TASKS, SIGNAL_TASK, GET_LOCALE, GET_THEME, TASK_BYPASS_PERMISSIONS\n// signature: b60c57aef334cd98ef3b8786748a1e627709e7c14679c3c0dc9a9d92e1432f3d696fbc396243ad06d9cd4c2d840ebbeda88ef2bc1631bc628fbe4072daa1a801\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"TASK_MANAGER\"));\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"LIST_TASKS\", \"SIGNAL_TASK\" ];\n\tdocument.body.style.fontFamily = \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\";\n\tif (await availableAPIs.isDarkThemed()) document.body.style.color = \"white\";\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tdocument.body.innerText = (await availableAPIs.lookupLocale(\"TMGR_PERMISSION\")).replace(\"%s\", checklist.join(\", \"));\n\t\treturn;\n\t}\n\tlet styleElement = document.createElement(\"style\");\n\tstyleElement.innerText = `th, td { border: 1px solid black; }\n\ttable { overflow: scroll; min-width: 100%; width: max-content; }`;\n\tdocument.head.appendChild(styleElement);\n\tlet table = document.createElement(\"table\");\n\tlet thead = document.createElement(\"thead\");\n\tlet theadRow = document.createElement(\"tr\");\n\tlet thBasename = document.createElement(\"th\");\n\tlet thUser = document.createElement(\"th\");\n\tlet thTerminate = document.createElement(\"th\");\n\tlet thFP = document.createElement(\"th\");\n\tlet thArgs = document.createElement(\"th\");\n\tlet tbody = document.createElement(\"tbody\");\n\tthBasename.innerText = await availableAPIs.lookupLocale(\"BASENAME_TASK\");\n\tthUser.innerText = await availableAPIs.lookupLocale(\"USER_TASK\");\n\tthTerminate.innerText = await availableAPIs.lookupLocale(\"TERMINATE_TASK\");\n\tthFP.innerText = await availableAPIs.lookupLocale(\"FULL_PATH_TASK\");\n\tthArgs.innerText = await availableAPIs.lookupLocale(\"ARGUMENTS_TASK\");\n\ttheadRow.appendChild(thBasename);\n\ttheadRow.appendChild(thUser);\n\ttheadRow.appendChild(thTerminate);\n\ttheadRow.appendChild(thFP);\n\ttheadRow.appendChild(thArgs);\n\tthead.appendChild(theadRow);\n\ttable.appendChild(thead);\n\ttable.appendChild(tbody);\n\tdocument.body.appendChild(table);\n\tasync function refresh() {\n\t\tlet prevtb = tbody;\n\t\tlet newtb = document.createElement(\"tbody\");\n\t\tlet tasks = await availableAPIs.listTasks();\n\t\tfor (let task of tasks) {\n\t\t\tlet tr = document.createElement(\"tr\");\n\t\t\tlet tdBasename = document.createElement(\"td\");\n\t\t\tlet tdUser = document.createElement(\"td\");\n\t\t\tlet tdTerminate = document.createElement(\"td\");\n\t\t\tlet tdFP = document.createElement(\"td\");\n\t\t\tlet tdArgs = document.createElement(\"td\");\n\t\t\tlet taskInfo;\n\t\t\ttry {\n\t\t\t\ttaskInfo = await availableAPIs.taskInfo(task);\n\t\t\t} catch {}\n\t\t\tif (!taskInfo) continue;\n\t\t\tlet terminateBtn = document.createElement(\"button\");\n\t\t\ttdBasename.innerText = taskInfo.file.split(\"/\").slice(-1)[0];\n\t\t\ttdUser.innerText = taskInfo.runBy;\n\t\t\ttdFP.innerText = taskInfo.file;\n\t\t\ttdArgs.innerText = \"[\" + (taskInfo.arg || []).map(a => JSON.stringify(a)).join(\", \") + \"]\";\n\t\t\tterminateBtn.innerText = await availableAPIs.lookupLocale(\"TERMINATE_TASK\");\n\t\t\tterminateBtn.addEventListener(\"click\", async function() {\n\t\t\t\ttry {\n\t\t\t\t\tawait availableAPIs.signalTask({ taskId: task, signal: 15 });\n\t\t\t\t} catch {}\n\t\t\t});\n\t\t\tterminateBtn.addEventListener(\"contextmenu\", async function(e) {\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t\ttry {\n\t\t\t\t\tawait availableAPIs.signalTask({ taskId: task, signal: 9 });\n\t\t\t\t} catch {}\n\t\t\t});\n\t\t\ttdTerminate.appendChild(terminateBtn);\n\t\t\ttr.appendChild(tdBasename);\n\t\t\ttr.appendChild(tdUser);\n\t\t\ttr.appendChild(tdTerminate);\n\t\t\ttr.appendChild(tdFP);\n\t\t\ttr.appendChild(tdArgs);\n\t\t\tnewtb.appendChild(tr);\n\t\t}\n\t\ttable.appendChild(newtb);\n\t\tprevtb.remove();\n\t\ttbody = newtb;\n\t\tsetTimeout(refresh, 1000);\n\t}\n\tawait refresh();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1424","version":1424,"when":1756146836832,"signer":"moduleSigner","critical":true,"bootOrder":"50","signature":"c7650a0bac6f42c04670c7657ddfebc95a5206ccd120d79daee544805509f95c8af987735264b23b31db70130d8f3c32bc8f201006398d664d1612b5b8919005"}}