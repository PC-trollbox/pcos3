{"backend":{"files":{"apps":{"batteryinfo.js":"0e3383a1ea452eb10bbbc19ff48ebec202a34a2117f41053ad133e47ac87343c674fe703bdec86883eb11c4fc73d6d081b49a3d7c051b7274be8dcf8c4f76edb","cat.js":"302794c24eed0f892be9be21150e5d5adc311b1daab1f4df3e4e40d88105de33ad8c6e21886732fdb8c532a0eed00d04a9c48bb1bdf0e32eb371401465724794","chgrp.js":"fea5f3d17e16c536769c2a205d4d7cfe3f868d0042afeeb5eb850506a13a3b388d084120c132a5f0e122f1e6c4a091b6e47269c98778d3a6fc182ebd331093e5","chmod.js":"9b1f0a8f27518b6f83fcb288d585092131a66afaa10dc3eae9e3a34136376db70b4cd68ee3c599edc26293ef55a1d609405ef7eaae61930218aedaf21292beeb","chown.js":"5838e1d49285156daad61a4528537dd5c775eb616d6c3eff53fcf28aa24467110bf73cdc51dc8783ad4154bab485f83078eaf407cb51367eed2cf96fad0b2b53","cp.js":"e630b51ca5972f3cf01595a4a807da98f300cab8ea66c2609e65d71efd1c014bd364ddef1b58772f5beae882e4e378a44a22d2063cd4e601e7e824b3bf84a01e","date.js":"ffd3442947fd0eb95ec31d71571a8ae122fb57d33b934528ce0842b48ae19f55d51f57025916a7b08f4477787268b96ff35829530302073480661e96fa3d346e","diff.js":"87ab96801b52a466494783eb89b28057cbe567d79456178cae417dedb747ccb2b3da00840f5b9f463511944f1a72b728495580e8c223f0ecec8cb3ca58e2f3b2","links":{"terminal.lnk":"02237b3cd130358f3df14859bd69a3c0d9fe4858c5aa88fe3e0594e011e7b3d286c30af4d37c4d0b271a71d08b17b4f7989066d27bea398393a3656163ad65e8"},"ls.js":"0200d60ffe68573f667a9895606a1777e6ed1c96e8a43336f9a60c2a9ee8933844fc70a8cf0816f8c44e1175e98e942a2376de129d466c050afdac156204b45c","mkdir.js":"f75476c8cbbb137d787974c13914564fb32fa65caf5ca713ed25e8708e0df76ba58ace0abdc432f5d99bc452160e7a14b9c859d694df8a9453b0a2c8df8db31d","patch.js":"a246aea915d51b6ce6f3ea7c1855002d53e6f4a6c0e71f9f68abaefb2a3f81774f95223947911ed0762ce77627d04a956f2544fb5ba2631a1ac5b31eee858e93","power.js":"e0ffac2038482b256d25c6a8510f06868fa3155190442386ada0ed7726ec18f57fa66868899725dee0d05b2174957a0f2c0f7903964741d898dfc1ac3e899f05","rm.js":"6cb8e6b5dcc6a09aafa370175190ecf17117b441a89c59a99fdd16d0bb27af103181a8f9586ab7911289519744b0eefef1813a0a6bdec69251f4ffcd7636821c","runKlvlCode.js":"f7b0b03eb6d9b293f290fe911a09339ff643c78926e759d651eb400edf707fc7f3008cd8382518d56100a4f3c116f685a3e90a9d010b35d3e1bd58571171f431","terminal.js":"da968fd9cd2975903c9c24f49108ac60b5c9bc08761d64e851f0abda4fd366cf31477db0fe51d900dc33017a4fb0c477441cf558782f8754e6f6db5395c463d8","uptime.js":"9fda4547096dc6ccde786a02fa5f7b36159209e585298170a32d29e34e78d76cd0dc04e849ea0c3336ad1642d3cf4950cc8a9741f361162c13b4202beeb6bebe","write.js":"7dafec79ef48a5567f16576cbebe506dd90a3661ce898e08f02fd370d4de3d8a8680751c3bd0e838683eb5da97695665cd506c33eeb9cf1c024e9e5d021007b1"}},"permissions":{"apps/batteryinfo.js":{"world":"rx"},"apps/cat.js":{"world":"rx"},"apps/chgrp.js":{"world":"rx"},"apps/chmod.js":{"world":"rx"},"apps/chown.js":{"world":"rx"},"apps/cp.js":{"world":"rx"},"apps/date.js":{"world":"rx"},"apps/diff.js":{"world":"rx"},"apps/links/terminal.lnk":{"world":"rx"},"apps/links/":{"world":"rx"},"apps/ls.js":{"world":"rx"},"apps/mkdir.js":{"world":"rx"},"apps/patch.js":{"world":"rx"},"apps/power.js":{"world":"rx"},"apps/rm.js":{"world":"rx"},"apps/runKlvlCode.js":{"world":"rx"},"apps/terminal.js":{"world":"rx"},"apps/uptime.js":{"world":"rx"},"apps/write.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"0e3383a1ea452eb10bbbc19ff48ebec202a34a2117f41053ad133e47ac87343c674fe703bdec86883eb11c4fc73d6d081b49a3d7c051b7274be8dcf8c4f76edb":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_BATTERY_STATUS\n// signature: 4c6af97c48a5681f37b26fde57bc7830a8d9af4f59c201ea54f058509e85c61dd1fa9245dc53a21c73502014a3120dddf94101638309a59be3a005f4ad245e0a\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"batteryinfo: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\t\n\ttry {\n\t\tlet batteryStatus = await availableAPIs.batteryStatus();\n\t\tif (exec_args[0] == \"--robot\") await availableAPIs.toMyCLI(JSON.stringify(batteryStatus, null, \"\\t\").replaceAll(\"\\n\", \"\\r\\n\") + \"\\r\\n\");\n\t\telse await availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"BATTERY_STATUS_\" + (batteryStatus.charging ? \"CHARGING\" : \"DISCHARGING\")))\n\t\t\t.replace(\"%s\", (batteryStatus.level * 100).toFixed(2))\n\t\t\t.replace(\"%s\", await availableAPIs.ufTimeInc([\n\t\t\t\t(batteryStatus.charging ? batteryStatus.chargingTime : batteryStatus.dischargingTime) * 1000\n\t\t\t])) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"batteryinfo: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); ","302794c24eed0f892be9be21150e5d5adc311b1daab1f4df3e4e40d88105de33ad8c6e21886732fdb8c532a0eed00d04a9c48bb1bdf0e32eb371401465724794":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 93a17862825df07b3ed84464836c436afe6e7be720ad1bb6c1ac41203981b872968f7b6ecc3435fd32e23d9af74172b49f0fc19e7614465640d0d8d519da660e\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"cat: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CAT_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CAT_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"cat: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tfor (let file of exec_args) {\n\t\ttry {\n\t\t\tlet data = await availableAPIs.fs_read({ path: file });\n\t\t\tawait availableAPIs.toMyCLI(data);\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"cat: \" + file + \": \" + await availableAPIs.lookupLocale(e.message));\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","fea5f3d17e16c536769c2a205d4d7cfe3f868d0042afeeb5eb850506a13a3b388d084120c132a5f0e122f1e6c4a091b6e47269c98778d3a6fc182ebd331093e5":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: a90311ed88d999da9706f4b6d5423c3ca2a64b5e737ac2712e9f144b6ecfb29670ea56a5c9ca15cbc989bb66a896762df9ef194db258ae366de4cbfb50d64c00\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chgrp: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHGRP_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHGRP_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chgrp: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chgrp({ path: exec_args[1], newGrp: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chgrp: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message)) + \"\\r\\n\";\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","9b1f0a8f27518b6f83fcb288d585092131a66afaa10dc3eae9e3a34136376db70b4cd68ee3c599edc26293ef55a1d609405ef7eaae61930218aedaf21292beeb":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: 953e1f9115b56ac0f9b140da44f8a1f7afe5a18618e4de1834cc328953759b5baab4663961ce2cd148a861c6227e3e9f448de3091fa220a760496bb1222d8308\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chmod: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHMOD_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHMOD_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CHMOD_MODE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CHMOD_MODE_CONVERT\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chmod: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chmod({ path: exec_args[1], newPermissions: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chmod: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","5838e1d49285156daad61a4528537dd5c775eb616d6c3eff53fcf28aa24467110bf73cdc51dc8783ad4154bab485f83078eaf407cb51367eed2cf96fad0b2b53":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: b4b8095596a74ae9bd42c95402ef2e580aa85742e1f583292511e890fba7daad438ef97ef25078a080c02d218979a1c7c0fd8bd42a33f5ea0706dc44597a3303\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chown: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHOWN_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHOWN_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chown: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chown({ path: exec_args[1], newUser: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chown: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","e630b51ca5972f3cf01595a4a807da98f300cab8ea66c2609e65d71efd1c014bd364ddef1b58772f5beae882e4e378a44a22d2063cd4e601e7e824b3bf84a01e":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION\n// signature: 609e271498254f472563a2949ed2804938c89de2475d8d35c9fe1daa9b7d9c5b359aa3af5e1fc65f670c5f6675cb01c0e17bf7dfd332a8fdb87297715710db0f\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"cp: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CP_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CP_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_RECURSIVE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_FORCE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CP_PERMISSIONS_OPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet recursive = exec_args.includes(\"--recursive\");\n\tlet force = exec_args.includes(\"--force\");\n\tlet permissions = exec_args.includes(\"--permissions\");\n\tif (recursive) exec_args.splice(exec_args.indexOf(\"--recursive\"), 1);\n\tif (force) exec_args.splice(exec_args.indexOf(\"--force\"), 1);\n\tif (permissions) exec_args.splice(exec_args.indexOf(\"--permissions\"), 1);\n\tif (exec_args.length != 2) {\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tif (recursive) await recursiveCopy(exec_args[0], exec_args[1], force, permissions);\n\telse {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: exec_args[1],\n\t\t\t\tdata: await availableAPIs.fs_read({ path: exec_args[0] })\n\t\t\t});\n\t\t\tif (permissions) {\n\t\t\t\tlet originalPermissions = await availableAPIs.fs_permissions({ path: exec_args[0] });\n\t\t\t\tawait availableAPIs.fs_chmod({ path: exec_args[1], newPermissions: originalPermissions.world });\n\t\t\t\tawait availableAPIs.fs_chgrp({ path: exec_args[1], newGrp: originalPermissions.group });\n\t\t\t\tawait availableAPIs.fs_chown({ path: exec_args[1], newUser: originalPermissions.user });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"cp: \" + exec_args[0] + \" -> \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\n\nasync function recursiveCopy(source, destination, force, permissions) {\n\ttry {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_mkdir({ path: destination });\n\t\t} catch {}\n\t\tfor (let sourceFile of await availableAPIs.fs_ls({ path: source })) {\n\t\t\tlet destinationFile = destination + \"/\" + sourceFile;\n\t\t\ttry {\n\t\t\t\tif (await availableAPIs.fs_isDirectory({ path: source + \"/\" + sourceFile }))\n\t\t\t\t\tawait recursiveCopy(source + \"/\" + sourceFile, destinationFile, force, permissions);\n\t\t\t\telse {\n\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\tpath: destinationFile,\n\t\t\t\t\t\tdata: await availableAPIs.fs_read({ path: source + \"/\" + sourceFile })\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (permissions) {\n\t\t\t\t\tlet originalPermissions = await availableAPIs.fs_permissions({ path: source + \"/\" + sourceFile });\n\t\t\t\t\tawait availableAPIs.fs_chmod({ path: destinationFile, newPermissions: originalPermissions.world });\n\t\t\t\t\tawait availableAPIs.fs_chgrp({ path: destinationFile, newGrp: originalPermissions.group });\n\t\t\t\t\tawait availableAPIs.fs_chown({ path: destinationFile, newUser: originalPermissions.owner });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tawait availableAPIs.toMyCLI(\"cp: \" + source + \"/\" + sourceFile + \" -> \" + destinationFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\tif (!force) return await availableAPIs.terminate();\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + source + \" -> \" + destination + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\tif (!force) return await availableAPIs.terminate();\n\t}\n}\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","ffd3442947fd0eb95ec31d71571a8ae122fb57d33b934528ce0842b48ae19f55d51f57025916a7b08f4477787268b96ff35829530302073480661e96fa3d346e":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: NONE\n// signature: 470edc624f0fcfe0c7bde59c8b9b98297ee8c8b96f6f4ebbbb1289e3802151baf0aff340b6ce4f18f58ffd91e1b3c12bf20bba854958e374e6cd7a91f2d30707\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tawait availableAPIs.toMyCLI(new Date().toString() + \"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","87ab96801b52a466494783eb89b28057cbe567d79456178cae417dedb747ccb2b3da00840f5b9f463511944f1a72b728495580e8c223f0ecec8cb3ca58e2f3b2":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, PATCH_DIFF\n// signature: 23438e455fbeae52d2dc52acce4e7f770d9893e306d4aa3023203db69de25f0a06e610ee96c6ce297b95bd39606c79c15b81bc5d176734884a8aa2298b8bc003\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"diff: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DIFF_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DIFF_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.length != 3) {\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: exec_args[2],\n\t\t\tdata: JSON.stringify(await availableAPIs.patchDiff({\n\t\t\t\toperation: \"calcPatch\",\n\t\t\t\targs: [ await availableAPIs.fs_read({ path: exec_args[0] }), await availableAPIs.fs_read({ path: exec_args[1] }) ]\n\t\t\t}))\n\t\t})\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","02237b3cd130358f3df14859bd69a3c0d9fe4858c5aa88fe3e0594e011e7b3d286c30af4d37c4d0b271a71d08b17b4f7989066d27bea398393a3656163ad65e8":"{\"path\":\"system/apps/terminal.js\",\"localeReferenceName\":\"REAL_TERMINAL_NAME\"}","0200d60ffe68573f667a9895606a1777e6ed1c96e8a43336f9a60c2a9ee8933844fc70a8cf0816f8c44e1175e98e942a2376de129d466c050afdac156204b45c":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, FS_LIST_PARTITIONS\n// signature: ce09dc69235d03437089c513c08dd692e88299581c78b24acb8d66e19734e5d42f4cb5ecb9c9640345634e4b1e43eac7dfa9b37de43066add9c2b3ae83df420c\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"ls: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_DESCRIPTION\") + \"\\r\\n\");\n\t\tlet sysmount = await availableAPIs.getSystemMount();\n\t\tlet systemLocale = await availableAPIs.lookupLocale(\"MOUNTPOINT_SYSTEM\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_MOUNTPOINT_LIST\") + (await availableAPIs.fs_mounts()).map(a => sysmount == a ? (a + \" [\" + systemLocale + \"]\") : a).join(\", \") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"ls: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tfor (let file of exec_args) {\n\t\ttry {\n\t\t\tlet data = await availableAPIs.fs_ls({ path: file });\n\t\t\tawait availableAPIs.toMyCLI(data.map(a => JSON.stringify(a)).join(\"\\r\\n\") + \"\\r\\n\");\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"ls: \" + file + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","f75476c8cbbb137d787974c13914564fb32fa65caf5ca713ed25e8708e0df76ba58ace0abdc432f5d99bc452160e7a14b9c859d694df8a9453b0a2c8df8db31d":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_WRITE, FS_BYPASS_PERMISSIONS\n// signature: 33e930a3594065ecd3c0350017dcf3ace0a9dbe3d477f62f375b21658655fc11d43166ca56898dca14544142938dbd529919c3d7aa5fe002f49bee02d31ec40c\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"mkdir: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"MKDIR_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"MKDIR_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"mkdir: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_mkdir({\n\t\t\tpath: exec_args[0]\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"mkdir: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","a246aea915d51b6ce6f3ea7c1855002d53e6f4a6c0e71f9f68abaefb2a3f81774f95223947911ed0762ce77627d04a956f2544fb5ba2631a1ac5b31eee858e93":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, PATCH_DIFF\n// signature: 913e05e38b714879354c5617a328ebc37119a5a33e5f7eb57a4acee67d9b6db210338867d28f41a79ce64370f0f63cc969cb12b70210bc8f8aa3a15ea5b6820a\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"patch: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PATCH_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PATCH_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.length != 3) {\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: exec_args[2],\n\t\t\tdata: (await availableAPIs.patchDiff({\n\t\t\t\toperation: \"applyPatch\",\n\t\t\t\targs: [ await availableAPIs.fs_read({ path: exec_args[0] }), JSON.parse(await availableAPIs.fs_read({ path: exec_args[1] })) ]\n\t\t\t})).join(\"\")\n\t\t})\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","e0ffac2038482b256d25c6a8510f06868fa3155190442386ada0ed7726ec18f57fa66868899725dee0d05b2174957a0f2c0f7903964741d898dfc1ac3e899f05":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SYSTEM_SHUTDOWN\n// signature: 297c6c1f8404374f48179fb5c4a670164dc2f1edf75c889d66ef91c8128a759dde7e0412320441869b1d2c84492011f9a3ebbd0952aadd3645f13a1002247008\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"power: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.attachCLI();\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (pargs.help) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"POWER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"POWER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"POWER_FORCE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"POWER_KEXEC\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: ppos[0] == \"reboot\" || ppos[0] == \"r\" || ppos[0] == \"restart\" || ppos[0] == \"kexec\" || ppos[0] == \"k\" || pargs.kexec,\n\t\t\tisKexec: pargs.kexec || ppos[0] == \"kexec\" || ppos[0] == \"k\",\n\t\t\tforce: pargs.force\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"power: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","6cb8e6b5dcc6a09aafa370175190ecf17117b441a89c59a99fdd16d0bb27af103181a8f9586ab7911289519744b0eefef1813a0a6bdec69251f4ffcd7636821c":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION, FS_REMOVE\n// signature: 4085a7bdc7b878f01ae705f2cdd19cb7f47d138074c04d5332fd8252b3cb7e1ec14bd2e190cf5a03c8cc7a317796615c6245d436869cc57e591b5084a42b6e0c\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"rm: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RM_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RM_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_RECURSIVE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_FORCE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet recursive = exec_args.includes(\"--recursive\");\n\tlet force = exec_args.includes(\"--force\");\n\tif (recursive) exec_args.splice(exec_args.indexOf(\"--recursive\"), 1);\n\tif (force) exec_args.splice(exec_args.indexOf(\"--force\"), 1);\n\tif (exec_args.length != 1) {\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tif (recursive) await recursiveRemove(exec_args[0], force);\n\telse {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_rm({ path: exec_args[0] });\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"rm: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\n\nasync function recursiveRemove(target, force) {\n\ttry {\n\t\tfor (let targetFile of await availableAPIs.fs_ls({ path: target })) {\n\t\t\ttargetFile = target + \"/\" + targetFile;\n\t\t\ttry {\n\t\t\t\tif (await availableAPIs.fs_isDirectory({ path: targetFile })) await recursiveRemove(targetFile, force);\n\t\t\t\telse await availableAPIs.fs_rm({ path: targetFile });\n\t\t\t} catch (e) {\n\t\t\t\tawait availableAPIs.toMyCLI(\"rm: \" + targetFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\tif (!force) return await availableAPIs.terminate();\n\t\t\t}\n\t\t}\n\t\tawait availableAPIs.fs_rm({ path: target });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + target + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\tif (!force) return await availableAPIs.terminate();\n\t}\n}\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","f7b0b03eb6d9b293f290fe911a09339ff643c78926e759d651eb400edf707fc7f3008cd8382518d56100a4f3c116f685a3e90a9d010b35d3e1bd58571171f431":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, RUN_KLVL_CODE\n// signature: 6eb40b3a93f29c95e9c15dfee6039503cf757bddeea7e7ff2cd1298530ce47ccc807d2f385c14b57ac2d769524d9a35bce03a9f2b11bcec2c2e7de9993703c00\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"runKlvlCode: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RKL_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RKL_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"runKlvlCode: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.toMyCLI(JSON.stringify(await availableAPIs.runKlvlCode(await availableAPIs.fs_read({ path: exec_args[0] }))) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"runKlvlCode: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","da968fd9cd2975903c9c24f49108ac60b5c9bc08761d64e851f0abda4fd366cf31477db0fe51d900dc33017a4fb0c477441cf558782f8754e6f6db5395c463d8":"// =====BEGIN MANIFEST=====\n// allow: GET_LOCALE, FS_LIST_PARTITIONS, FS_READ, MANAGE_TOKENS, ELEVATE_PRIVILEGES, FS_BYPASS_PERMISSIONS, START_TASK, START_BACKGROUND_TASK, CLI_MODIFICATIONS, GET_BUILD, LIST_TASKS, TASK_BYPASS_PERMISSIONS, CSP_OPERATIONS\n// link: lrn:REAL_TERMINAL_NAME\n// signer: automaticSigner\n// signature: d74820316fa55a1737745c077071bf4e085f6832ab2b09333612fc52f80bddb3ac56b13d3378028a9b95ca03c2d460bdba86439f527b45689ee87b22200bc700\n// =====END MANIFEST=====\nlet user_spawn_token = null;\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"GET_LOCALE\", \"FS_LIST_PARTITIONS\", \"FS_READ\", \"MANAGE_TOKENS\", \"ELEVATE_PRIVILEGES\", \"START_TASK\", \"CLI_MODIFICATIONS\", \"GET_BUILD\", \"LIST_TASKS\", \"CSP_OPERATIONS\" ];\n\tprivileges = await availableAPIs.getPrivileges();\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\tawait availableAPIs.fromMyCLI();\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait window.availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"REAL_TERMINAL_NAME\"));\n\t\n\tfunction parse_cmdline(cmdline) {\n\t\tvar re_next_arg = /^\\s*((?:(?:\"(?:\\\\.|[^\"])*\")|(?:'[^']*')|\\\\.|\\S)+)\\s*(.*)$/;\n\t\tvar next_arg = ['', '', cmdline];\n\t\tvar args = [];\n\t\twhile (next_arg = re_next_arg.exec(next_arg[2])) {\n\t\t\tvar quoted_arg = next_arg[1];\n\t\t\tvar unquoted_arg = \"\";\n\t\t\twhile (quoted_arg.length > 0) {\n\t\t\t\tif (/^\"/.test(quoted_arg)) {\n\t\t\t\t\tvar quoted_part = /^\"((?:\\\\.|[^\"])*)\"(.*)$/.exec(quoted_arg);\n\t\t\t\t\tunquoted_arg += quoted_part[1].replace(/\\\\(.)/g, \"$1\");\n\t\t\t\t\tquoted_arg = quoted_part[2];\n\t\t\t\t} else if (/^'/.test(quoted_arg)) {\n\t\t\t\t\tvar quoted_part = /^'([^']*)'(.*)$/.exec(quoted_arg);\n\t\t\t\t\tunquoted_arg += quoted_part[1];\n\t\t\t\t\tquoted_arg = quoted_part[2];\n\t\t\t\t} else if (/^\\\\/.test(quoted_arg)) {\n\t\t\t\t\tunquoted_arg += quoted_arg[1];\n\t\t\t\t\tquoted_arg = quoted_arg.substring(2);\n\t\t\t\t} else {\n\t\t\t\t\tunquoted_arg += quoted_arg[0];\n\t\t\t\t\tquoted_arg = quoted_arg.substring(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\targs[args.length] = unquoted_arg;\n\t\t}\n\t\treturn args;\n\t}\n\n\tlet str = \"\";\n\tlet default_user = await window.availableAPIs.getUser();\n\tlet defaultPath = await availableAPIs.getSystemMount() + \"/apps\";\n\tlet pathsForBinaries = [ defaultPath ];\n\tlet otherProcessAttached = false;\n\tlet graphic = false;\n\tlet su_stage = -1;\n\tlet suSession = null;\n\tlet hideInputMask = \"\";\n\tlet hideInput = false;\n\t\n\tasync function systemVersion() {\n\t\tawait availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"TERMINAL_INVITATION\")).replace(\"%s\", (await window.availableAPIs.getVersion())) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"SYSTEM_BUILT_AT\")).replace(\"%s\", (new Date(await window.availableAPIs.getBuildTime())).toISOString()) + \"\\r\\n\");\t\n\t}\n\n\tawait systemVersion();\n\tawait availableAPIs.toMyCLI(\"\\r\\n\" + default_user + (privileges.includes(\"FS_BYPASS_PERMISSIONS\") ? \"#\" : \"$\") + \" \");\n\t\n\tonTermData(async function self(e, why) {\n\t\tif (otherProcessAttached) return await availableAPIs.typeIntoOtherCLI({\n\t\t\ttaskId: otherProcessAttached,\n\t\t\ttext: e,\n\t\t\thuman: true\n\t\t});\n\t\tif (e == \"\\r\") {\n\t\t\tif (why != \"su\") await availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (su_stage > -1) {\n\t\t\t\tif (su_stage == 0) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsuSession = await availableAPIs.automatedLogonCreate({ desiredUser: str });\n\t\t\t\t\t\tsu_stage = 1;\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tsu_stage = -1;\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tstr = \"\";\n\t\t\t\t}\n\t\t\t\twhile (su_stage >= 1) {\n\t\t\t\t\totherProcessAttached = true;\n\t\t\t\t\tif (su_stage == 2) {\n\t\t\t\t\t\tlet prompt = await availableAPIs.automatedLogonGet(suSession);\n\t\t\t\t\t\tif (prompt.type == \"zkpp_password\") {\n\t\t\t\t\t\t\tlet passwordAsKey = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(str),\n\t\t\t\t\t\t\t\t\talgorithm: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\"]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tlet rngSeed = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\t\tsalt: new Uint8Array(32),\n\t\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbaseKey: passwordAsKey,\n\t\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\t\tcspArgument: passwordAsKey\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\t\tlet hexToU8A = (hex) => Uint8Array.from(hex.match(/.{1,2}/g).map(a => parseInt(a, 16)));\n\t\t\t\t\t\t\tawait availableAPIs.automatedLogonInput({ session: suSession, input: u8aToHex(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"tweetnacl\",\n\t\t\t\t\t\t\t\toperation: \"sign\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\tsecretKey: (await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\t\t\tcspProvider: \"tweetnacl\",\n\t\t\t\t\t\t\t\t\t\toperation: \"deriveKey\",\n\t\t\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\t\t\ttype: \"sign\",\n\t\t\t\t\t\t\t\t\t\t\tseed: new Uint8Array(rngSeed)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})).secretKey,\n\t\t\t\t\t\t\t\t\tmessage: hexToU8A(prompt.challenge)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}))});\n\t\t\t\t\t\t} else await availableAPIs.automatedLogonInput({ session: suSession, input: str });\n\t\t\t\t\t}\n\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\thideInput = false;\n\t\t\t\t\thideInputMask = \"\";\n\t\t\t\t\tlet prompt = await availableAPIs.automatedLogonGet(suSession);\n\t\t\t\t\tawait availableAPIs.toMyCLI(prompt.message);\n\t\t\t\t\tsu_stage = 2;\n\t\t\t\t\tif (prompt.success != \"intermediate\") {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\t\t\t\tsu_stage = -1;\n\t\t\t\t\t\tif (prompt.success) {\n\t\t\t\t\t\t\tuser_spawn_token = prompt.token;\n\t\t\t\t\t\t\tlet processToken = await availableAPIs.getProcessToken();\n\t\t\t\t\t\t\tawait availableAPIs.setProcessToken(await availableAPIs.forkToken(user_spawn_token));\n\t\t\t\t\t\t\tprivileges = await availableAPIs.getPrivileges();\n\t\t\t\t\t\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\t\t\t\t\t\t\tawait availableAPIs.fromMyCLI();\n\t\t\t\t\t\t\t\treturn await availableAPIs.terminate();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tawait availableAPIs.revokeToken(processToken);\n\t\t\t\t\t\t\tawait availableAPIs.automatedLogonDelete(suSession);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (prompt.wantsUserInput || prompt.type == \"informative\") {\n\t\t\t\t\t\tif (prompt.wantsUserInput) await availableAPIs.toMyCLI(\": \");\n\t\t\t\t\t\thideInput = prompt.type == \"password\" || prompt.type == \"informative\" || prompt.type == \"zkpp_password\";\n\t\t\t\t\t\thideInputMask = (prompt.type == \"password\" || prompt.type == \"zkpp_password\") ? \"*\" : \"\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (su_stage != -1) await availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet cmdline = [];\n\t\t\ttry {\n\t\t\t\tcmdline = parse_cmdline(str);\n\t\t\t} catch {\n\t\t\t\tawait availableAPIs.toMyCLI(\"> \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstr = \"\";\n\t\t\tif (cmdline[0] == \"sugraph\") {\n\t\t\t\totherProcessAttached = true;\n\t\t\t\tlet authui = await availableAPIs.consentGetToken({\n\t\t\t\t\tintent: await availableAPIs.lookupLocale(\"REAL_TERMINAL_INTENT\"),\n\t\t\t\t\tname: await availableAPIs.lookupLocale(\"REAL_TERMINAL_NAME\"),\n\t\t\t\t\tdesiredUser: cmdline[1]\n\t\t\t\t});\n\t\t\t\tif (authui) {\n\t\t\t\t\tuser_spawn_token = authui;\n\t\t\t\t\tlet processToken = await availableAPIs.getProcessToken();\n\t\t\t\t\tawait availableAPIs.setProcessToken(await availableAPIs.forkToken(user_spawn_token));\n\t\t\t\t\tprivileges = await availableAPIs.getPrivileges();\n\t\t\t\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.fromMyCLI();\n\t\t\t\t\t\treturn await availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.revokeToken(processToken);\n\t\t\t\t} else await availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\totherProcessAttached = false;\n\t\t\t} else if (cmdline[0] == \"su\") {\n\t\t\t\tif (!cmdline[1]) {\n\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"USERNAME\") + \": \");\n\t\t\t\t\treturn su_stage = 0;\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsuSession = await availableAPIs.automatedLogonCreate({ desiredUser: cmdline[1] });\n\t\t\t\t\t\tsu_stage = 1;\n\t\t\t\t\t\treturn self(\"\\r\", \"su\");\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (cmdline[0] == \"graphic\") {\n\t\t\t\tif (!cmdline[1]) await availableAPIs.toMyCLI(\"graphic: \" + graphic + \"\\r\\n\");\n\t\t\t\telse {\n\t\t\t\t\tgraphic = cmdline[1] == \"true\" || cmdline[1] == \"on\" || cmdline[1] == \"1\" || cmdline[1] == \"yes\" || cmdline[1] == \"enable\";\n\t\t\t\t}\n\t\t\t} else if (cmdline[0] == \"pushpath\") {\n\t\t\t\tif (cmdline[1]) pathsForBinaries.push(cmdline[1]);\n\t\t\t} else if (cmdline[0] == \"resetpath\") {\n\t\t\t\tpathsForBinaries = [ defaultPath ];\n\t\t\t} else if (cmdline[0] == \"lspath\") {\n\t\t\t\tawait availableAPIs.toMyCLI(pathsForBinaries.map(a => JSON.stringify(a)).join(\", \") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"REAL_TERMINAL_DEFAULT_PATH_FIELD\")).replace(\"%s\", JSON.stringify(defaultPath)) + \"\\r\\n\");\n\t\t\t} else if (cmdline[0] == \"clear\") await availableAPIs.clearMyCLI();\n\t\t\telse if (cmdline[0] == \"exit\") await availableAPIs.terminate();\n\t\t\telse if (cmdline[0] == \"ver\") await systemVersion();\n\t\t\telse if (cmdline[0] == \"help\") {\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_BUILTIN_LIST\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_VER_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_HELP_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_CLEAR_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_SUGRAPH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_SU_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_GRAPHIC_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_PUSHPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_RESETPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_LSPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_EXIT_USEDESC\") + \"\\r\\n\");\n\t\t\t} else if (!cmdline.length) {} else {\n\t\t\t\tlet runFile;\n\t\t\t\ttry {\n\t\t\t\t\tif (!await availableAPIs.fs_isDirectory({ path: cmdline[0] })) runFile = cmdline[0];\n\t\t\t\t} catch {}\n\t\t\t\tfor (let path of pathsForBinaries) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet ls = await availableAPIs.fs_ls({ path });\n\t\t\t\t\t\tif (ls.includes(cmdline[0]) || ls.includes(cmdline[0] + \".js\")) {\n\t\t\t\t\t\t\tlet extensioned = ls.includes(cmdline[0] + \".js\")\n\t\t\t\t\t\t\trunFile = path + \"/\" + cmdline[0] + (extensioned ? \".js\" : \"\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {}\n\t\t\t\t}\n\t\t\t\tif (runFile) {\n\t\t\t\t\tif (user_spawn_token) {\n\t\t\t\t\t\tlet forkedToken = await availableAPIs.forkToken(user_spawn_token);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\totherProcessAttached = true;\n\t\t\t\t\t\t\tlet spawnedTask = await availableAPIs.startTask({\n\t\t\t\t\t\t\t\tfile: runFile,\n\t\t\t\t\t\t\t\targPassed: cmdline.slice(1),\n\t\t\t\t\t\t\t\trunInBackground: !graphic,\n\t\t\t\t\t\t\t\tsilent: true,\n\t\t\t\t\t\t\t\ttoken: forkedToken\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.waitForOtherCLI({ taskId: spawnedTask, bypass: forkedToken });\n\t\t\t\t\t\t\totherProcessAttached = spawnedTask;\n\t\t\t\t\t\t\t(async function() {\n\t\t\t\t\t\t\t\twhile (otherProcessAttached) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tlet otherData = await availableAPIs.getOtherCLIData({ taskId: spawnedTask, bypass: forkedToken });\n\t\t\t\t\t\t\t\t\t\tif (otherData.type == \"write\") availableAPIs.toMyCLI(otherData.data);\n\t\t\t\t\t\t\t\t\t\telse if (otherData.type == \"consoleClear\") availableAPIs.clearMyCLI();\n\t\t\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t\tawait availableAPIs.waitTermination(spawnedTask);\n\t\t\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\t\t\tawait availableAPIs.toMyCLI(runFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else await availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"REAL_TERMINAL_LOGON_REQUIRED\")).replace(\"%s\", default_user) + \"\\r\\n\");\n\t\t\t\t} else await availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"TERM_COMMAND_NOT_FOUND\")).replace(\"%s\", cmdline[0]) + \"\\r\\n\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tdefault_user = await window.availableAPIs.getUser();\n\t\t\t} catch {}\n\t\t\tawait availableAPIs.toMyCLI(default_user + (privileges.includes(\"FS_BYPASS_PERMISSIONS\") ? \"#\" : \"$\") + \" \");\n\t\t\treturn;\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(hideInput ? hideInputMask : e);\n\t\t\t}\n\t\t}\n\t});\n})(); \n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\ttry { await availableAPIs.revokeToken(user_spawn_token); } catch {}\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","9fda4547096dc6ccde786a02fa5f7b36159209e585298170a32d29e34e78d76cd0dc04e849ea0c3336ad1642d3cf4950cc8a9741f361162c13b4202beeb6bebe":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SYSTEM_UPTIME\n// signature: 0290445e322eb1043a0c8981fec2f840ef68a4d5f20320453a44240dd9558396185eb4bf153ffe207adc5ef27dd8e255132e1af45165d69e496d5ed164a64203\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"uptime: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.ufTimeInc([ await availableAPIs.systemUptime() ]) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"uptime: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","7dafec79ef48a5567f16576cbebe506dd90a3661ce898e08f02fd370d4de3d8a8680751c3bd0e838683eb5da97695665cd506c33eeb9cf1c024e9e5d021007b1":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_WRITE, FS_BYPASS_PERMISSIONS\n// signature: 68af7118360bdca4b946456cc31cd93a6ddbba842bba5faf2d4e99d5a0a638a42846fba926804349afce6fc374b96198c0619e7a9cbd8ed202a206d82f8bda07\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"write: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"WRITE_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"WRITE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"write: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: exec_args[0],\n\t\t\tdata: exec_args[1]\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"write: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1433","version":1433,"when":1757088949529,"signer":"moduleSigner","critical":true,"bootOrder":"50","commonName":"terminal","signature":"b23db2c99b54aec8e4bec42a681c4f7734d688890e4cc4d2da9651dd570c375f29986edd6ce40082fc817496b8b83adf017640dd6e0cdd7a7b1c9d9a98496b0d"}}