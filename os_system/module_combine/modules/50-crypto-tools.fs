{"backend":{"files":{"apps":{"crypto.js":"a3c834aaeb494286c6bb63d43196f80f547218c97ed1a560a4d1a9d199efaf93eace599bcadc2b6f3f5cc2ace725c9290b26b22f734c0956b7aad1256ab56f81","links":{"crypto.lnk":"ea9969e0b9d743e8599fe013c5ff0f7620aa29f96e0e40c9f14bf7deb4efa72ada31ec9833067728b26833e926d06ea58af933669e5df154cae91810fc78f7bd"}}},"permissions":{"apps/crypto.js":{"world":"rx"},"apps/links/crypto.lnk":{"world":"rx"},"apps/links/":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"a3c834aaeb494286c6bb63d43196f80f547218c97ed1a560a4d1a9d199efaf93eace599bcadc2b6f3f5cc2ace725c9290b26b22f734c0956b7aad1256ab56f81":"// =====BEGIN MANIFEST=====\n// link: lrn:CRYPTO_TOOLS_TITLE\n// signer: automaticSigner\n// allow: FS_WRITE, IPC_CREATE_PIPE, IPC_LISTEN_PIPE, FS_READ, FS_LIST_PARTITIONS, IPC_SEND_PIPE, GET_LOCALE, GET_THEME, FS_BYPASS_PERMISSIONS, START_TASK, GET_LOCALE, CSP_OPERATIONS, GET_USER_INFO\n// signature: 46967af3ecd146853a5da995d9d059d76e8e320adc30596d33cf7d81dd68ba249d8be5850eb7bc3ffa5de769acf068d954de4a6dee0fea638f6e04916206cc06\n// =====END MANIFEST=====\nlet hexToU8A = (hex) => Uint8Array.from(hex.match(/.{1,2}/g).map(a => parseInt(a, 16)));\nlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"CRYPTO_TOOLS_TITLE\"));\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"FS_WRITE\", \"IPC_CREATE_PIPE\", \"IPC_LISTEN_PIPE\", \"FS_READ\", \"FS_LIST_PARTITIONS\", \"IPC_SEND_PIPE\", \"START_TASK\", \"GET_LOCALE\", \"CSP_OPERATIONS\" ];\n\tdocument.body.style.fontFamily = \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\";\n\tif (await availableAPIs.isDarkThemed()) document.body.style.color = \"white\";\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tdocument.body.innerText = await availableAPIs.lookupLocale(\"CRYPTO_TOOLS_NOPERM\");\n\t\tlet currentToken = await availableAPIs.getProcessToken();\n\t\tlet newToken = await availableAPIs.consentGetToken({\n\t\t\tintent: await availableAPIs.lookupLocale(\"CRYPTO_TOOLS_INTENT\"),\n\t\t\tname: await availableAPIs.lookupLocale(\"CRYPTO_TOOLS_TITLE\"),\n\t\t\tdesiredUser: await availableAPIs.getUser()\n\t\t});\n\t\tif (!newToken) return;\n\t\tawait availableAPIs.setProcessToken(newToken);\n\t\tawait availableAPIs.revokeToken(currentToken);\n\t\tprivileges = await availableAPIs.getPrivileges();\n\t\tif (!checklist.every(p => privileges.includes(p))) return;\n\t}\n\tdocument.body.innerText = \"\";\n\tlet pageHeader = document.createElement(\"b\");\n\tlet dividePageHeader = document.createElement(\"hr\");\n\tlet page = document.createElement(\"div\");\n\tdocument.body.appendChild(pageHeader);\n\tdocument.body.appendChild(dividePageHeader);\n\tdocument.body.appendChild(page);\n\tasync function mainPage() {\n\t\tpageHeader.innerText = await availableAPIs.lookupLocale(\"CRYPTO_TOOLS_TITLE\");\n\t\tpage.innerText = \"\";\n\t\tlet rng = document.createElement(\"button\");\n\t\tlet hash = document.createElement(\"button\");\n\t\tlet keyGeneration = document.createElement(\"button\");\n\t\tlet encrypt = document.createElement(\"button\");\n\t\tlet decrypt = document.createElement(\"button\");\n\t\tlet sign = document.createElement(\"button\");\n\t\tlet verify = document.createElement(\"button\");\n\t\tlet deriveBits = document.createElement(\"button\");\n\t\t\n\t\trng.innerText = await availableAPIs.lookupLocale(\"CRYPTO_RNG\");\n\t\thash.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH\");\n\t\tkeyGeneration.innerText = await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN\");\n\t\tencrypt.innerText = await availableAPIs.lookupLocale(\"CRYPTO_ENCRYPT\");\n\t\tdecrypt.innerText = await availableAPIs.lookupLocale(\"CRYPTO_DECRYPT\");\n\t\tsign.innerText = await availableAPIs.lookupLocale(\"CRYPTO_SIGN\");\n\t\tverify.innerText = await availableAPIs.lookupLocale(\"CRYPTO_VERIFY\");\n\t\tderiveBits.innerText = await availableAPIs.lookupLocale(\"CRYPTO_DERIVEBITS\");\n\n\t\trng.onclick = rngPage;\n\t\thash.onclick = hashPage;\n\t\tkeyGeneration.onclick = keyGenPage;\n\t\tencrypt.onclick = encryptPage;\n\t\tdecrypt.onclick = decryptPage;\n\t\tsign.onclick = signPage;\n\t\tverify.onclick = verifyPage;\n\t\tderiveBits.onclick = deriveBitsPage;\n\n\t\tpage.appendChild(rng);\n\t\tpage.appendChild(hash);\n\t\tpage.appendChild(keyGeneration);\n\t\tpage.appendChild(encrypt);\n\t\tpage.appendChild(decrypt);\n\t\tpage.appendChild(sign);\n\t\tpage.appendChild(verify);\n\t\tpage.appendChild(deriveBits);\n\t}\n\n\tmainPage();\n\n\tasync function rngPage() {\n\t\tpage.innerText = \"\";\n\t\tpageHeader.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet pageHeaderText = document.createElement(\"span\");\n\t\tpageHeader.appendChild(backButton);\n\t\tpageHeader.appendChild(pageHeaderText);\n\t\tlet lengthLabel = document.createElement(\"label\");\n\t\tlet lengthInput = document.createElement(\"input\");\n\t\tlet rngButton = document.createElement(\"button\");\n\t\tlet rngLabel = document.createElement(\"label\");\n\t\tlet rngField = document.createElement(\"textarea\");\n\t\tlet rngSaveButton = document.createElement(\"button\");\n\n\t\tbackButton.innerText = \"<-\";\n\t\tpageHeaderText.innerText = await availableAPIs.lookupLocale(\"CRYPTO_RNG\");\n\t\tlengthLabel.innerText = await availableAPIs.lookupLocale(\"LENGTH_FIELD\");\n\t\trngButton.innerText = await availableAPIs.lookupLocale(\"GENERATE\");\n\t\trngLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_RNGOUT_FIELD\");\n\t\trngSaveButton.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\n\t\tpage.appendChild(lengthLabel);\n\t\tpage.appendChild(lengthInput);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(rngButton);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(rngLabel);\n\t\tpage.appendChild(rngSaveButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(rngField);\n\n\t\tlengthInput.type = \"number\";\n\t\tlengthInput.value = 256;\n\t\trngField.readOnly = true;\n\n\t\tbackButton.onclick = mainPage;\n\t\trngSaveButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"save\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) await availableAPIs.fs_write({ path: result.selected, data: rngField.value });\n\t\t}\n\t\trngButton.onclick = async function() {\n\t\t\trngField.value = u8aToHex(await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"random\",\n\t\t\t\tcspArgument: new Uint8Array(Math.floor(parseInt(lengthInput.value)))\n\t\t\t}));\n\t\t}\n\t}\n\tasync function hashPage() {\n\t\tpage.innerText = \"\";\n\t\tpageHeader.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet pageHeaderText = document.createElement(\"span\");\n\t\tpageHeader.appendChild(backButton);\n\t\tpageHeader.appendChild(pageHeaderText);\n\t\tlet plaintextLabel = document.createElement(\"label\");\n\t\tlet plaintextLoadButton = document.createElement(\"button\");\n\t\tlet plaintextField = document.createElement(\"textarea\");\n\t\tlet plaintextFormatLabel = document.createElement(\"label\");\n\t\tlet plaintextFormatOption = document.createElement(\"select\");\n\t\tlet hashLabel = document.createElement(\"label\");\n\t\tlet hashOption = document.createElement(\"select\");\n\t\tlet hashButton = document.createElement(\"button\");\n\t\tlet digestLabel = document.createElement(\"label\");\n\t\tlet digestField = document.createElement(\"textarea\");\n\t\tlet digestSaveButton = document.createElement(\"button\");\n\n\t\tlet hashes = [ \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA-1\" ];\n\t\tlet textAs = {\n\t\t\tunicode: \"UTF-8\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t}\n\n\t\tbackButton.innerText = \"<-\";\n\t\tpageHeaderText.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH\");\n\t\tplaintextLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXT_FIELD\");\n\t\tplaintextLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\tplaintextFormatLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXTAS_FIELD\");\n\t\thashLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH_FIELD\");\n\t\thashButton.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH_ACTION\");\n\t\tdigestLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASHOUT_FIELD\");\n\t\tdigestSaveButton.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\n\t\tpage.appendChild(plaintextLabel);\n\t\tpage.appendChild(plaintextLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextField);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextFormatLabel);\n\t\tpage.appendChild(plaintextFormatOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(hashLabel);\n\t\tpage.appendChild(hashOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(hashButton);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(digestLabel);\n\t\tpage.appendChild(digestSaveButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(digestField);\n\n\t\tdigestField.readOnly = true;\n\n\t\tfor (let plaintextFormat in textAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = plaintextFormat;\n\t\t\toption.innerText = textAs[plaintextFormat];\n\t\t\tplaintextFormatOption.appendChild(option);\n\t\t}\n\n\t\tfor (let hash of hashes) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = hash;\n\t\t\toption.innerText = hash;\n\t\t\thashOption.appendChild(option);\n\t\t}\n\n\t\tbackButton.onclick = mainPage;\n\t\tplaintextLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) plaintextField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tdigestSaveButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"save\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) await availableAPIs.fs_write({ path: result.selected, data: digestField.value });\n\t\t}\n\t\thashButton.onclick = async function() {\n\t\t\tlet data;\n\t\t\tif (plaintextFormatOption.value == \"raw\") data = hexToU8A(plaintextField.value);\n\t\t\tif (plaintextFormatOption.value == \"unicode\") data = new TextEncoder().encode(plaintextField.value);\n\t\t\tlet digest = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"digest\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\talgorithm: hashOption.value,\n\t\t\t\t\tdata\n\t\t\t\t}\n\t\t\t});\n\t\t\tdigestField.value = u8aToHex(new Uint8Array(digest));\n\t\t}\n\t}\n\tasync function keyGenPage() {\n\t\tpage.innerText = \"\";\n\t\tpageHeader.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet pageHeaderText = document.createElement(\"span\");\n\t\tpageHeader.appendChild(backButton);\n\t\tpageHeader.appendChild(pageHeaderText);\n\t\tlet algorithmLabel = document.createElement(\"label\");\n\t\tlet algorithmOption = document.createElement(\"select\");\n\t\tlet modLenLabel = document.createElement(\"label\");\n\t\tlet modLen = document.createElement(\"input\");\n\t\tlet publicExponentLabel = document.createElement(\"label\");\n\t\tlet publicExponent = document.createElement(\"input\");\n\t\tlet hashLabel = document.createElement(\"label\");\n\t\tlet hashOption = document.createElement(\"select\");\n\t\tlet namedCurveLabel = document.createElement(\"label\");\n\t\tlet namedCurveOption = document.createElement(\"select\");\n\t\tlet lengthLabel = document.createElement(\"label\");\n\t\tlet lengthInput = document.createElement(\"input\");\n\t\tlet exportAsLabel = document.createElement(\"label\");\n\t\tlet exportAsOption = document.createElement(\"select\");\n\t\tlet keyUsagesLabel = document.createElement(\"label\");\n\t\tlet generateButton = document.createElement(\"button\");\n\t\tlet publicKeyLabel = document.createElement(\"label\");\n\t\tlet publicKeySave = document.createElement(\"button\");\n\t\tlet publicKeyField = document.createElement(\"textarea\");\n\t\tlet privateKeyLabel = document.createElement(\"label\");\n\t\tlet privateKeySave = document.createElement(\"button\");\n\t\tlet privateKeyField = document.createElement(\"textarea\");\n\t\t\n\t\tbackButton.innerText = \"<-\";\n\t\tpageHeaderText.innerText = await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN\");\n\t\talgorithmLabel.innerText = await availableAPIs.lookupLocale(\"ALGORITHM_FIELD\");\n\t\tmodLenLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_MODLEN_FIELD\");\n\t\tpublicExponentLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PUBEXP_FIELD\");\n\t\thashLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH_FIELD\");\n\t\tnamedCurveLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_NC_FIELD\");\n\t\tlengthLabel.innerText = await availableAPIs.lookupLocale(\"LENGTH_FIELD\");\n\t\texportAsLabel.innerText = await availableAPIs.lookupLocale(\"EXPORT_AS_FIELD\");\n\t\tkeyUsagesLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_KEYUSE_FIELD\");\n\t\tgenerateButton.innerText = await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN_ACTION\");\n\t\tpublicKeyLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PUBKEY_FIELD\");\n\t\tpublicKeySave.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\t\tprivateKeyLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PRIVKEY_FIELD\");\n\t\tprivateKeySave.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\n\t\tlet algorithms = [ \"RSASSA-PKCS1-v1_5\", \"RSA-PSS\", \"RSA-OAEP\", \"ECDSA\", \"ECDH\", \"HMAC\", \"AES-CBC\", \"AES-CTR\", \"AES-GCM\", \"Ed25519\", \"X25519\" ];\n\t\tlet hashes = [ \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA-1\" ];\n\t\tlet namedCurves = [ \"P-256\", \"P-384\", \"P-521\" ];\n\t\tlet keyUsages = [ \"encrypt\", \"decrypt\", \"sign\", \"verify\", \"deriveKey\", \"deriveBits\", \"wrapKey\", \"unwrapKey\" ];\n\t\tlet exportAs = {\n\t\t\tjwk: \"JSON Web Key\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t};\n\t\tlet setKeyUsages = Object.fromEntries(keyUsages.map(a => [a, false]));\n\n\t\tpage.appendChild(algorithmLabel);\n\t\tpage.appendChild(algorithmOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(modLenLabel);\n\t\tpage.appendChild(modLen);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(publicExponentLabel);\n\t\tpage.appendChild(publicExponent);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(hashLabel);\n\t\tpage.appendChild(hashOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(namedCurveLabel);\n\t\tpage.appendChild(namedCurveOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(lengthLabel);\n\t\tpage.appendChild(lengthInput);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(exportAsLabel);\n\t\tpage.appendChild(exportAsOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(keyUsagesLabel);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\n\t\tfor (let algorithm of algorithms) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = algorithm;\n\t\t\toption.innerText = algorithm;\n\t\t\talgorithmOption.appendChild(option);\n\t\t}\n\n\t\tfor (let hash of hashes) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = hash;\n\t\t\toption.innerText = hash;\n\t\t\thashOption.appendChild(option);\n\t\t}\n\n\t\tfor (let curve of namedCurves) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = curve;\n\t\t\toption.innerText = curve;\n\t\t\tnamedCurveOption.appendChild(option);\n\t\t}\n\n\t\tfor (let usage of keyUsages) {\n\t\t\tlet inputCheckBox = document.createElement(\"input\");\n\t\t\tlet label = document.createElement(\"label\");\n\n\t\t\tinputCheckBox.type = \"checkbox\";\n\t\t\tinputCheckBox.id = usage;\n\t\t\tinputCheckBox.onchange = function() {\n\t\t\t\tsetKeyUsages[usage] = inputCheckBox.checked;\n\t\t\t};\n\n\t\t\tlabel.innerText = usage;\n\t\t\tlabel.htmlFor = usage;\n\n\t\t\tpage.appendChild(inputCheckBox);\n\t\t\tpage.appendChild(label);\n\t\t\tpage.appendChild(document.createElement(\"br\"));\n\t\t}\n\n\t\tfor (let exportType in exportAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = exportType;\n\t\t\toption.innerText = exportAs[exportType];\n\t\t\texportAsOption.appendChild(option);\n\t\t}\n\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(generateButton);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(publicKeyLabel);\n\t\tpage.appendChild(publicKeySave);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(publicKeyField);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(privateKeyLabel);\n\t\tpage.appendChild(privateKeySave);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(privateKeyField);\n\n\t\tbackButton.onclick = mainPage;\n\t\tasync function saveKey(type) {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"save\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) await availableAPIs.fs_write({ path: result.selected, data: type == \"private\" ? privateKeyField.value : publicKeyField.value });\n\t\t}\n\n\t\tpublicKeySave.onclick = () => saveKey(\"public\");\n\t\tprivateKeySave.onclick = () => saveKey(\"private\");\n\n\t\tmodLen.type = \"number\";\n\t\tlengthInput.type = \"number\";\n\n\t\tmodLen.value = 2048;\n\t\tlengthInput.value = 256;\n\t\tpublicExponent.value = \"010001\";\n\n\t\tpublicKeyField.readOnly = true;\n\t\tprivateKeyField.readOnly = true;\n\n\t\tgenerateButton.addEventListener(\"click\", async function() {\n\t\t\tpublicKeyField.value = await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN_MSG\");\n\t\t\tprivateKeyField.value = await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN_MSG\");\n\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"generateKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\tmodulusLength: parseInt(modLen.value),\n\t\t\t\t\t\tpublicExponent: Uint8Array.from(publicExponent.value.match(/.{1,2}/g).map(a => parseInt(a, 16))),\n\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\tlength: parseInt(lengthInput.value),\n\t\t\t\t\t\tnamedCurve: namedCurveOption.value\n\t\t\t\t\t},\n\t\t\t\t\textractable: true,\n\t\t\t\t\tkeyUsages: Object.entries(setKeyUsages).filter(a => a[1]).map(a => a[0])\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet exported = {};\n\t\t\ttry {\n\t\t\t\texported = {\n\t\t\t\t\tprivateKey: await availableAPIs.cspOperation({\n\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\toperation: \"exportKey\",\n\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\tformat: exportAsOption.value,\n\t\t\t\t\t\t\tkey: key.type == \"secret\" ? key : key.privateKey\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\tpublicKey: key.type == \"secret\" ? undefined : await availableAPIs.cspOperation({\n\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\toperation: \"exportKey\",\n\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\tformat: exportAsOption.value,\n\t\t\t\t\t\t\tkey: key.publicKey\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t} catch {}\n\t\t\tif (key.type == \"secret\") await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"unloadKey\",\n\t\t\t\tcspArgument: key\n\t\t\t});\n\t\t\telse {\n\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\tcspArgument: key.privateKey\n\t\t\t\t});\n\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\tcspArgument: key.publicKey\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (exportAsOption.value == \"jwk\") {\n\t\t\t\tpublicKeyField.value = JSON.stringify(exported.publicKey || await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN_SYMM\"));\n\t\t\t\tprivateKeyField.value = JSON.stringify(exported.privateKey || await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN_EXPFAIL\"));\n\t\t\t} else if (exportAsOption.value == \"raw\") {\n\t\t\t\tpublicKeyField.value = u8aToHex(new Uint8Array(exported.publicKey || new ArrayBuffer(0))) || await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN_SYMM\");\n\t\t\t\tprivateKeyField.value = u8aToHex(new Uint8Array(exported.privateKey || new ArrayBuffer(0))) || await availableAPIs.lookupLocale(\"CRYPTO_KEYGEN_EXPFAIL\");\n\t\t\t}\n\t\t});\n\t}\n\tasync function encryptPage() {\n\t\tpage.innerText = \"\";\n\t\tpageHeader.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet pageHeaderText = document.createElement(\"span\");\n\t\tpageHeader.appendChild(backButton);\n\t\tpageHeader.appendChild(pageHeaderText);\n\t\tlet plaintextLabel = document.createElement(\"label\");\n\t\tlet plaintextLoadButton = document.createElement(\"button\");\n\t\tlet plaintextField = document.createElement(\"textarea\");\n\t\tlet plaintextFormatLabel = document.createElement(\"label\");\n\t\tlet plaintextFormatOption = document.createElement(\"select\");\n\t\tlet keyLabel = document.createElement(\"label\");\n\t\tlet keyLoadButton = document.createElement(\"button\");\n\t\tlet keyField = document.createElement(\"textarea\");\n\t\tlet algorithmLabel = document.createElement(\"label\");\n\t\tlet algorithmOption = document.createElement(\"select\");\n\t\tlet hashLabel = document.createElement(\"label\");\n\t\tlet hashOption = document.createElement(\"select\");\n\t\tlet namedCurveLabel = document.createElement(\"label\");\n\t\tlet namedCurveOption = document.createElement(\"select\");\n\t\tlet lengthLabel = document.createElement(\"label\");\n\t\tlet lengthInput = document.createElement(\"input\");\n\t\tlet ivLabel = document.createElement(\"label\");\n\t\tlet ivInput = document.createElement(\"input\");\n\t\tlet ivGenerateButton = document.createElement(\"button\");\n\t\tlet counterLabel = document.createElement(\"label\");\n\t\tlet counterInput = document.createElement(\"input\");\n\t\tlet importAsLabel = document.createElement(\"label\");\n\t\tlet importAsOption = document.createElement(\"select\");\n\t\tlet encryptButton = document.createElement(\"button\");\n\t\tlet ciphertextLabel = document.createElement(\"label\");\n\t\tlet ciphertextField = document.createElement(\"textarea\");\n\t\tlet ciphertextSaveButton = document.createElement(\"button\");\n\n\t\tlet algorithms = [ \"RSA-OAEP\", \"AES-CBC\", \"AES-CTR\", \"AES-GCM\" ];\n\t\tlet hashes = [ \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA-1\" ];\n\t\tlet namedCurves = [ \"P-256\", \"P-384\", \"P-521\" ];\n\t\tlet importAs = {\n\t\t\tjwk: \"JSON Web Key\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t};\n\t\tlet textAs = {\n\t\t\tunicode: \"UTF-8\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t}\n\n\t\tbackButton.innerText = \"<-\";\n\t\tpageHeaderText.innerText = await availableAPIs.lookupLocale(\"CRYPTO_ENCRYPT\");\n\t\tplaintextLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXT_FIELD\");\n\t\tplaintextLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\tplaintextFormatLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXTAS_FIELD\");\n\t\tkeyLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_KEY_FIELD\");\n\t\tkeyLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\talgorithmLabel.innerText = await availableAPIs.lookupLocale(\"ALGORITHM_FIELD\");\n\t\thashLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH_FIELD\");\n\t\tnamedCurveLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_NC_FIELD\");\n\t\tlengthLabel.innerText = await availableAPIs.lookupLocale(\"LENGTH_FIELD\");\n\t\tivLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_IV_FIELD\");\n\t\tivGenerateButton.innerText = await availableAPIs.lookupLocale(\"REGENERATE\");\n\t\tcounterLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_CTR_FIELD\");\n\t\timportAsLabel.innerText = await availableAPIs.lookupLocale(\"IMPORT_AS_FIELD\");\n\t\tencryptButton.innerText = await availableAPIs.lookupLocale(\"CRYPTO_ENCRYPT_ACTION\");\n\t\tciphertextLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_CIPHERTEXT_FIELD\");\n\t\tciphertextSaveButton.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\n\t\tpage.appendChild(plaintextLabel);\n\t\tpage.appendChild(plaintextLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextField);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextFormatLabel);\n\t\tpage.appendChild(plaintextFormatOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(keyLabel);\n\t\tpage.appendChild(keyLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(keyField);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(algorithmLabel);\n\t\tpage.appendChild(algorithmOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(hashLabel);\n\t\tpage.appendChild(hashOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(namedCurveLabel);\n\t\tpage.appendChild(namedCurveOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(lengthLabel);\n\t\tpage.appendChild(lengthInput);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(ivLabel);\n\t\tpage.appendChild(ivInput);\n\t\tpage.appendChild(ivGenerateButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(counterLabel);\n\t\tpage.appendChild(counterInput);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(importAsLabel);\n\t\tpage.appendChild(importAsOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(encryptButton);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(ciphertextLabel);\n\t\tpage.appendChild(ciphertextSaveButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(ciphertextField);\n\n\t\tlengthInput.type = \"number\";\n\t\tlengthInput.value = 256;\n\t\tciphertextField.readOnly = true;\n\n\t\tfor (let plaintextFormat in textAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = plaintextFormat;\n\t\t\toption.innerText = textAs[plaintextFormat];\n\t\t\tplaintextFormatOption.appendChild(option);\n\t\t}\n\n\t\tfor (let algorithm of algorithms) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = algorithm;\n\t\t\toption.innerText = algorithm;\n\t\t\talgorithmOption.appendChild(option);\n\t\t}\n\n\t\tfor (let hash of hashes) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = hash;\n\t\t\toption.innerText = hash;\n\t\t\thashOption.appendChild(option);\n\t\t}\n\n\t\tfor (let curve of namedCurves) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = curve;\n\t\t\toption.innerText = curve;\n\t\t\tnamedCurveOption.appendChild(option);\n\t\t}\n\n\t\tfor (let importType in importAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = importType;\n\t\t\toption.innerText = importAs[importType];\n\t\t\timportAsOption.appendChild(option);\n\t\t}\n\n\t\tbackButton.onclick = mainPage;\n\t\tplaintextLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) plaintextField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tkeyLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) keyField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tciphertextSaveButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"save\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) await availableAPIs.fs_write({ path: result.selected, data: ciphertextField.value });\n\t\t}\n\t\tivGenerateButton.onclick = async function() {\n\t\t\tivInput.value = u8aToHex(await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"random\",\n\t\t\t\tcspArgument: new Uint8Array(16)\n\t\t\t}));\n\t\t};\n\t\tencryptButton.onclick = async function() {\n\t\t\tlet keyData, data;\n\t\t\tif (importAsOption.value == \"jwk\") keyData = JSON.parse(keyField.value);\n\t\t\tif (importAsOption.value == \"raw\") keyData = hexToU8A(keyField.value);\n\t\t\tif (plaintextFormatOption.value == \"raw\") data = hexToU8A(plaintextField.value);\n\t\t\tif (plaintextFormatOption.value == \"unicode\") data = new TextEncoder().encode(plaintextField.value);\n\t\t\tlet keyImport = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"importKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tformat: importAsOption.value,\n\t\t\t\t\tkeyData: keyData,\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\tnamedCurve: namedCurveOption.value,\n\t\t\t\t\t\tlength: parseInt(lengthInput.value)\n\t\t\t\t\t},\n\t\t\t\t\textractable: false,\n\t\t\t\t\tkeyUsages: [ \"encrypt\" ]\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet ciphertext = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"encrypt\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\tiv: hexToU8A(ivInput.value || \"00\".repeat(16)),\n\t\t\t\t\t\tcounter: hexToU8A(counterInput.value || \"00\".repeat(16)),\n\t\t\t\t\t\tlength: parseInt(lengthInput.value)\n\t\t\t\t\t},\n\t\t\t\t\tkey: keyImport,\n\t\t\t\t\tdata\n\t\t\t\t}\n\t\t\t});\n\t\t\tciphertextField.value = u8aToHex(new Uint8Array(ciphertext));\n\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"unloadKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tkey: keyImport\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tasync function decryptPage() {\n\t\tpage.innerText = \"\";\n\t\tpageHeader.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet pageHeaderText = document.createElement(\"span\");\n\t\tpageHeader.appendChild(backButton);\n\t\tpageHeader.appendChild(pageHeaderText);\n\t\tlet ciphertextLabel = document.createElement(\"label\");\n\t\tlet ciphertextLoadButton = document.createElement(\"button\");\n\t\tlet ciphertextField = document.createElement(\"textarea\");\n\t\tlet keyLabel = document.createElement(\"label\");\n\t\tlet keyLoadButton = document.createElement(\"button\");\n\t\tlet keyField = document.createElement(\"textarea\");\n\t\tlet algorithmLabel = document.createElement(\"label\");\n\t\tlet algorithmOption = document.createElement(\"select\");\n\t\tlet hashLabel = document.createElement(\"label\");\n\t\tlet hashOption = document.createElement(\"select\");\n\t\tlet namedCurveLabel = document.createElement(\"label\");\n\t\tlet namedCurveOption = document.createElement(\"select\");\n\t\tlet lengthLabel = document.createElement(\"label\");\n\t\tlet lengthInput = document.createElement(\"input\");\n\t\tlet ivLabel = document.createElement(\"label\");\n\t\tlet ivInput = document.createElement(\"input\");\n\t\tlet counterLabel = document.createElement(\"label\");\n\t\tlet counterInput = document.createElement(\"input\");\n\t\tlet importAsLabel = document.createElement(\"label\");\n\t\tlet importAsOption = document.createElement(\"select\");\n\t\tlet plaintextFormatLabel = document.createElement(\"label\");\n\t\tlet plaintextFormatOption = document.createElement(\"select\");\n\t\tlet decryptButton = document.createElement(\"button\");\n\t\tlet plaintextLabel = document.createElement(\"label\");\n\t\tlet plaintextField = document.createElement(\"textarea\");\n\t\tlet plaintextSaveButton = document.createElement(\"button\");\n\n\t\tlet algorithms = [ \"RSA-OAEP\", \"AES-CBC\", \"AES-CTR\", \"AES-GCM\" ];\n\t\tlet hashes = [ \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA-1\" ];\n\t\tlet namedCurves = [ \"P-256\", \"P-384\", \"P-521\" ];\n\t\tlet importAs = {\n\t\t\tjwk: \"JSON Web Key\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t};\n\t\tlet textAs = {\n\t\t\tunicode: \"UTF-8\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t}\n\n\t\tbackButton.innerText = \"<-\";\n\t\tpageHeaderText.innerText = await availableAPIs.lookupLocale(\"CRYPTO_DECRYPT\");\n\t\tciphertextLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_CIPHERTEXT_FIELD\");\n\t\tciphertextLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\tkeyLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_KEY_FIELD\");\n\t\tkeyLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\talgorithmLabel.innerText = await availableAPIs.lookupLocale(\"ALGORITHM_FIELD\");\n\t\thashLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH_FIELD\");\n\t\tnamedCurveLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_NC_FIELD\");\n\t\tlengthLabel.innerText = await availableAPIs.lookupLocale(\"LENGTH_FIELD\");\n\t\tivLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_IV_FIELD\");\n\t\tcounterLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_CTR_FIELD\");\n\t\timportAsLabel.innerText = await availableAPIs.lookupLocale(\"IMPORT_AS_FIELD\");\n\t\tdecryptButton.innerText = await availableAPIs.lookupLocale(\"CRYPTO_DECRYPT_ACTION\");\n\t\tplaintextFormatLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXTAS_FIELD\");\n\t\tplaintextLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXT_FIELD\");\n\t\tplaintextSaveButton.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\n\t\tpage.appendChild(ciphertextLabel);\n\t\tpage.appendChild(ciphertextLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(ciphertextField);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(keyLabel);\n\t\tpage.appendChild(keyLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(keyField);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(algorithmLabel);\n\t\tpage.appendChild(algorithmOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(hashLabel);\n\t\tpage.appendChild(hashOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(namedCurveLabel);\n\t\tpage.appendChild(namedCurveOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(lengthLabel);\n\t\tpage.appendChild(lengthInput);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(ivLabel);\n\t\tpage.appendChild(ivInput);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(counterLabel);\n\t\tpage.appendChild(counterInput);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(importAsLabel);\n\t\tpage.appendChild(importAsOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(decryptButton);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(plaintextFormatLabel);\n\t\tpage.appendChild(plaintextFormatOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextLabel);\n\t\tpage.appendChild(plaintextSaveButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextField);\n\n\t\tlengthInput.type = \"number\";\n\t\tlengthInput.value = 256;\n\t\tplaintextField.readOnly = true;\n\n\t\tfor (let plaintextFormat in textAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = plaintextFormat;\n\t\t\toption.innerText = textAs[plaintextFormat];\n\t\t\tplaintextFormatOption.appendChild(option);\n\t\t}\n\n\t\tfor (let algorithm of algorithms) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = algorithm;\n\t\t\toption.innerText = algorithm;\n\t\t\talgorithmOption.appendChild(option);\n\t\t}\n\n\t\tfor (let hash of hashes) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = hash;\n\t\t\toption.innerText = hash;\n\t\t\thashOption.appendChild(option);\n\t\t}\n\n\t\tfor (let curve of namedCurves) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = curve;\n\t\t\toption.innerText = curve;\n\t\t\tnamedCurveOption.appendChild(option);\n\t\t}\n\n\t\tfor (let importType in importAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = importType;\n\t\t\toption.innerText = importAs[importType];\n\t\t\timportAsOption.appendChild(option);\n\t\t}\n\n\t\tbackButton.onclick = mainPage;\n\t\tciphertextLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) ciphertextField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tkeyLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) keyField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tplaintextSaveButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"save\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) await availableAPIs.fs_write({ path: result.selected, data: plaintextField.value });\n\t\t}\n\t\tdecryptButton.onclick = async function() {\n\t\t\tlet keyData;\n\t\t\tif (importAsOption.value == \"jwk\") keyData = JSON.parse(keyField.value);\n\t\t\tif (importAsOption.value == \"raw\") keyData = hexToU8A(keyField.value);\n\t\t\tlet keyImport = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"importKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tformat: importAsOption.value,\n\t\t\t\t\tkeyData: keyData,\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\tnamedCurve: namedCurveOption.value,\n\t\t\t\t\t\tlength: parseInt(lengthInput.value)\n\t\t\t\t\t},\n\t\t\t\t\textractable: false,\n\t\t\t\t\tkeyUsages: [ \"decrypt\" ]\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet ciphertext = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"decrypt\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\tiv: hexToU8A(ivInput.value || \"00\".repeat(16)),\n\t\t\t\t\t\tcounter: hexToU8A(counterInput.value || \"00\".repeat(16)),\n\t\t\t\t\t\tlength: parseInt(lengthInput.value)\n\t\t\t\t\t},\n\t\t\t\t\tkey: keyImport,\n\t\t\t\t\tdata: hexToU8A(ciphertextField.value)\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (plaintextFormatOption.value == \"raw\") plaintextField.value = u8aToHex(new Uint8Array(ciphertext));\n\t\t\tif (plaintextFormatOption.value == \"unicode\") plaintextField.value = new TextDecoder().decode(ciphertext);\n\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"unloadKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tkey: keyImport\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tasync function signPage() {\n\t\tpage.innerText = \"\";\n\t\tpageHeader.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet pageHeaderText = document.createElement(\"span\");\n\t\tpageHeader.appendChild(backButton);\n\t\tpageHeader.appendChild(pageHeaderText);\n\t\tlet plaintextLabel = document.createElement(\"label\");\n\t\tlet plaintextLoadButton = document.createElement(\"button\");\n\t\tlet plaintextField = document.createElement(\"textarea\");\n\t\tlet plaintextFormatLabel = document.createElement(\"label\");\n\t\tlet plaintextFormatOption = document.createElement(\"select\");\n\t\tlet keyLabel = document.createElement(\"label\");\n\t\tlet keyLoadButton = document.createElement(\"button\");\n\t\tlet keyField = document.createElement(\"textarea\");\n\t\tlet algorithmLabel = document.createElement(\"label\");\n\t\tlet algorithmOption = document.createElement(\"select\");\n\t\tlet hashLabel = document.createElement(\"label\");\n\t\tlet hashOption = document.createElement(\"select\");\n\t\tlet namedCurveLabel = document.createElement(\"label\");\n\t\tlet namedCurveOption = document.createElement(\"select\");\n\t\tlet lengthLabel = document.createElement(\"label\");\n\t\tlet lengthInput = document.createElement(\"input\");\n\t\tlet importAsLabel = document.createElement(\"label\");\n\t\tlet importAsOption = document.createElement(\"select\");\n\t\tlet signButton = document.createElement(\"button\");\n\t\tlet signatureLabel = document.createElement(\"label\");\n\t\tlet signatureField = document.createElement(\"textarea\");\n\t\tlet signatureSaveButton = document.createElement(\"button\");\n\n\t\tlet algorithms = [ \"RSASSA-PKCS1-v1_5\", \"RSA-PSS\", \"ECDSA\", \"HMAC\", \"Ed25519\" ];\n\t\tlet hashes = [ \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA-1\" ];\n\t\tlet namedCurves = [ \"P-256\", \"P-384\", \"P-521\" ];\n\t\tlet importAs = {\n\t\t\tjwk: \"JSON Web Key\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t};\n\t\tlet textAs = {\n\t\t\tunicode: \"UTF-8\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t}\n\n\t\tbackButton.innerText = \"<-\";\n\t\tpageHeaderText.innerText = await availableAPIs.lookupLocale(\"CRYPTO_SIGN\");\n\t\tplaintextLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXT_FIELD\");\n\t\tplaintextLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\tplaintextFormatLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXTAS_FIELD\");\n\t\tkeyLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_KEY_FIELD\");\n\t\tkeyLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\talgorithmLabel.innerText = await availableAPIs.lookupLocale(\"ALGORITHM_FIELD\");\n\t\thashLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH_FIELD\");\n\t\tnamedCurveLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_NC_FIELD\");\n\t\tlengthLabel.innerText = await availableAPIs.lookupLocale(\"LENGTH_FIELD\");\n\t\timportAsLabel.innerText = await availableAPIs.lookupLocale(\"IMPORT_AS_FIELD\");\n\t\tsignButton.innerText = await availableAPIs.lookupLocale(\"CRYPTO_SIGN_ACTION\");\n\t\tsignatureLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_SIGNATURE_FIELD\");\n\t\tsignatureSaveButton.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\n\t\tpage.appendChild(plaintextLabel);\n\t\tpage.appendChild(plaintextLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextField);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextFormatLabel);\n\t\tpage.appendChild(plaintextFormatOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(keyLabel);\n\t\tpage.appendChild(keyLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(keyField);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(algorithmLabel);\n\t\tpage.appendChild(algorithmOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(hashLabel);\n\t\tpage.appendChild(hashOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(namedCurveLabel);\n\t\tpage.appendChild(namedCurveOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(lengthLabel);\n\t\tpage.appendChild(lengthInput);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(importAsLabel);\n\t\tpage.appendChild(importAsOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(signButton);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(signatureLabel);\n\t\tpage.appendChild(signatureSaveButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(signatureField);\n\n\t\tlengthInput.type = \"number\";\n\t\tlengthInput.value = 256;\n\t\tsignatureField.readOnly = true;\n\n\t\tfor (let plaintextFormat in textAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = plaintextFormat;\n\t\t\toption.innerText = textAs[plaintextFormat];\n\t\t\tplaintextFormatOption.appendChild(option);\n\t\t}\n\n\t\tfor (let algorithm of algorithms) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = algorithm;\n\t\t\toption.innerText = algorithm;\n\t\t\talgorithmOption.appendChild(option);\n\t\t}\n\n\t\tfor (let hash of hashes) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = hash;\n\t\t\toption.innerText = hash;\n\t\t\thashOption.appendChild(option);\n\t\t}\n\n\t\tfor (let curve of namedCurves) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = curve;\n\t\t\toption.innerText = curve;\n\t\t\tnamedCurveOption.appendChild(option);\n\t\t}\n\n\t\tfor (let importType in importAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = importType;\n\t\t\toption.innerText = importAs[importType];\n\t\t\timportAsOption.appendChild(option);\n\t\t}\n\n\t\tbackButton.onclick = mainPage;\n\t\tplaintextLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) plaintextField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tkeyLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) keyField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tsignatureSaveButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"save\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) await availableAPIs.fs_write({ path: result.selected, data: signatureField.value });\n\t\t}\n\t\tsignButton.onclick = async function() {\n\t\t\tlet keyData, data;\n\t\t\tif (importAsOption.value == \"jwk\") keyData = JSON.parse(keyField.value);\n\t\t\tif (importAsOption.value == \"raw\") keyData = hexToU8A(keyField.value);\n\t\t\tif (plaintextFormatOption.value == \"raw\") data = hexToU8A(plaintextField.value);\n\t\t\tif (plaintextFormatOption.value == \"unicode\") data = new TextEncoder().encode(plaintextField.value);\n\t\t\tlet keyImport = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"importKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tformat: importAsOption.value,\n\t\t\t\t\tkeyData: keyData,\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\tnamedCurve: namedCurveOption.value,\n\t\t\t\t\t\tlength: parseInt(lengthInput.value)\n\t\t\t\t\t},\n\t\t\t\t\textractable: false,\n\t\t\t\t\tkeyUsages: [ \"sign\" ]\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet signature = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"sign\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\tsaltLength: parseInt(lengthInput.value)\n\t\t\t\t\t},\n\t\t\t\t\tkey: keyImport,\n\t\t\t\t\tdata\n\t\t\t\t}\n\t\t\t});\n\t\t\tsignatureField.value = u8aToHex(new Uint8Array(signature));\n\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"unloadKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tkey: keyImport\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tasync function verifyPage() {\n\t\tpage.innerText = \"\";\n\t\tpageHeader.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet pageHeaderText = document.createElement(\"span\");\n\t\tpageHeader.appendChild(backButton);\n\t\tpageHeader.appendChild(pageHeaderText);\n\t\tlet plaintextLabel = document.createElement(\"label\");\n\t\tlet plaintextLoadButton = document.createElement(\"button\");\n\t\tlet plaintextField = document.createElement(\"textarea\");\n\t\tlet plaintextFormatLabel = document.createElement(\"label\");\n\t\tlet plaintextFormatOption = document.createElement(\"select\");\n\t\tlet signatureLabel = document.createElement(\"label\");\n\t\tlet signatureField = document.createElement(\"textarea\");\n\t\tlet signatureLoadButton = document.createElement(\"button\");\n\t\tlet keyLabel = document.createElement(\"label\");\n\t\tlet keyLoadButton = document.createElement(\"button\");\n\t\tlet keyField = document.createElement(\"textarea\");\n\t\tlet algorithmLabel = document.createElement(\"label\");\n\t\tlet algorithmOption = document.createElement(\"select\");\n\t\tlet hashLabel = document.createElement(\"label\");\n\t\tlet hashOption = document.createElement(\"select\");\n\t\tlet namedCurveLabel = document.createElement(\"label\");\n\t\tlet namedCurveOption = document.createElement(\"select\");\n\t\tlet lengthLabel = document.createElement(\"label\");\n\t\tlet lengthInput = document.createElement(\"input\");\n\t\tlet importAsLabel = document.createElement(\"label\");\n\t\tlet importAsOption = document.createElement(\"select\");\n\t\tlet verifyButton = document.createElement(\"button\");\n\t\tlet verifiedCheckbox = document.createElement(\"input\");\n\t\tlet verifiedLabel = document.createElement(\"label\");\n\n\t\tlet algorithms = [ \"RSASSA-PKCS1-v1_5\", \"RSA-PSS\", \"ECDSA\", \"HMAC\", \"Ed25519\" ];\n\t\tlet hashes = [ \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA-1\" ];\n\t\tlet namedCurves = [ \"P-256\", \"P-384\", \"P-521\" ];\n\t\tlet importAs = {\n\t\t\tjwk: \"JSON Web Key\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t};\n\t\tlet textAs = {\n\t\t\tunicode: \"UTF-8\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t}\n\n\t\tbackButton.innerText = \"<-\";\n\t\tpageHeaderText.innerText = await availableAPIs.lookupLocale(\"CRYPTO_VERIFY\");\n\t\tplaintextLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXT_FIELD\");\n\t\tplaintextLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\tsignatureLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_SIGNATURE_FIELD\");\n\t\tsignatureLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\tplaintextFormatLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PLAINTEXTAS_FIELD\");\n\t\tkeyLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_KEY_FIELD\");\n\t\tkeyLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\talgorithmLabel.innerText = await availableAPIs.lookupLocale(\"ALGORITHM_FIELD\");\n\t\thashLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH_FIELD\");\n\t\tnamedCurveLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_NC_FIELD\");\n\t\tlengthLabel.innerText = await availableAPIs.lookupLocale(\"LENGTH_FIELD\");\n\t\timportAsLabel.innerText = await availableAPIs.lookupLocale(\"IMPORT_AS_FIELD\");\n\t\tverifyButton.innerText = await availableAPIs.lookupLocale(\"CRYPTO_VERIFY_ACTION\");\n\t\tverifiedLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_VERIFIED_CHECKBOX\");\n\n\t\tpage.appendChild(plaintextLabel);\n\t\tpage.appendChild(plaintextLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextField);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(plaintextFormatLabel);\n\t\tpage.appendChild(plaintextFormatOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(signatureLabel);\n\t\tpage.appendChild(signatureLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(signatureField);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(keyLabel);\n\t\tpage.appendChild(keyLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(keyField);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(algorithmLabel);\n\t\tpage.appendChild(algorithmOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(hashLabel);\n\t\tpage.appendChild(hashOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(namedCurveLabel);\n\t\tpage.appendChild(namedCurveOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(lengthLabel);\n\t\tpage.appendChild(lengthInput);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(importAsLabel);\n\t\tpage.appendChild(importAsOption);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(verifyButton);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(verifiedCheckbox);\n\t\tpage.appendChild(verifiedLabel);\n\n\t\tlengthInput.type = \"number\";\n\t\tverifiedCheckbox.type = \"checkbox\";\n\t\tlengthInput.value = 256;\n\t\tverifiedCheckbox.disabled = true;\n\n\t\tfor (let plaintextFormat in textAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = plaintextFormat;\n\t\t\toption.innerText = textAs[plaintextFormat];\n\t\t\tplaintextFormatOption.appendChild(option);\n\t\t}\n\n\t\tfor (let algorithm of algorithms) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = algorithm;\n\t\t\toption.innerText = algorithm;\n\t\t\talgorithmOption.appendChild(option);\n\t\t}\n\n\t\tfor (let hash of hashes) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = hash;\n\t\t\toption.innerText = hash;\n\t\t\thashOption.appendChild(option);\n\t\t}\n\n\t\tfor (let curve of namedCurves) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = curve;\n\t\t\toption.innerText = curve;\n\t\t\tnamedCurveOption.appendChild(option);\n\t\t}\n\n\t\tfor (let importType in importAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = importType;\n\t\t\toption.innerText = importAs[importType];\n\t\t\timportAsOption.appendChild(option);\n\t\t}\n\n\t\tbackButton.onclick = mainPage;\n\t\tplaintextLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) plaintextField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tkeyLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) keyField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tsignatureLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) signatureField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tverifyButton.onclick = async function() {\n\t\t\tlet keyData, data;\n\t\t\tif (importAsOption.value == \"jwk\") keyData = JSON.parse(keyField.value);\n\t\t\tif (importAsOption.value == \"raw\") keyData = hexToU8A(keyField.value);\n\t\t\tif (plaintextFormatOption.value == \"raw\") data = hexToU8A(plaintextField.value);\n\t\t\tif (plaintextFormatOption.value == \"unicode\") data = new TextEncoder().encode(plaintextField.value);\n\t\t\tlet keyImport = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"importKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tformat: importAsOption.value,\n\t\t\t\t\tkeyData: keyData,\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\tnamedCurve: namedCurveOption.value,\n\t\t\t\t\t\tlength: parseInt(lengthInput.value)\n\t\t\t\t\t},\n\t\t\t\t\textractable: false,\n\t\t\t\t\tkeyUsages: [ \"verify\" ]\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet solution = false;\n\t\t\ttry {\n\t\t\t\tsolution = await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"verify\",\n\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\t\tsaltLength: parseInt(lengthInput.value)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tkey: keyImport,\n\t\t\t\t\t\tsignature: hexToU8A(signatureField.value),\n\t\t\t\t\t\tdata\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch {}\n\t\t\tverifiedCheckbox.checked = solution;\n\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"unloadKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tkey: keyImport\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tasync function deriveBitsPage() {\n\t\tpage.innerText = \"\";\n\t\tpageHeader.innerText = \"\";\n\t\tlet backButton = document.createElement(\"button\");\n\t\tlet pageHeaderText = document.createElement(\"span\");\n\t\tpageHeader.appendChild(backButton);\n\t\tpageHeader.appendChild(pageHeaderText);\n\t\tlet algorithmLabel = document.createElement(\"label\");\n\t\tlet algorithmOption = document.createElement(\"select\");\n\t\tlet publicKeyLabel = document.createElement(\"label\");\n\t\tlet publicKeyLoadButton = document.createElement(\"button\");\n\t\tlet publicKeyField = document.createElement(\"textarea\");\n\t\tlet hashLabel = document.createElement(\"label\");\n\t\tlet hashOption = document.createElement(\"select\");\n\t\tlet saltLabel = document.createElement(\"label\");\n\t\tlet saltGenerateButton = document.createElement(\"button\");\n\t\tlet saltField = document.createElement(\"textarea\");\n\t\tlet iterationsLabel = document.createElement(\"label\");\n\t\tlet iterationsField = document.createElement(\"input\");\n\t\tlet baseKeyLabel = document.createElement(\"label\");\n\t\tlet baseKeyLoadButton = document.createElement(\"button\");\n\t\tlet baseKeyField = document.createElement(\"textarea\");\n\t\tlet importAsLabel = document.createElement(\"label\");\n\t\tlet importAsOption = document.createElement(\"select\");\n\t\tlet namedCurveLabel = document.createElement(\"label\");\n\t\tlet namedCurveOption = document.createElement(\"select\");\n\t\tlet lengthLabel = document.createElement(\"label\");\n\t\tlet lengthField = document.createElement(\"input\");\n\t\tlet deriveButton = document.createElement(\"button\");\n\t\tlet derivedBitsLabel = document.createElement(\"label\");\n\t\tlet derivedBitsSaveButton = document.createElement(\"button\");\n\t\tlet derivedBitsField = document.createElement(\"textarea\");\n\n\t\tlet algorithms = [ \"ECDH\", \"HKDF\", \"PBKDF2\", \"X25519\" ];\n\t\tlet hashes = [ \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA-1\" ];\n\t\tlet namedCurves = [ \"P-256\", \"P-384\", \"P-521\" ];\n\t\tlet importAs = {\n\t\t\tjwk: \"JSON Web Key\",\n\t\t\traw: await availableAPIs.lookupLocale(\"RAW_HEX_DATA\")\n\t\t};\n\n\t\tbackButton.innerText = \"<-\";\n\t\tpageHeaderText.innerText = await availableAPIs.lookupLocale(\"CRYPTO_DERIVEBITS\");\n\t\talgorithmLabel.innerText = await availableAPIs.lookupLocale(\"ALGORITHM_FIELD\");\n\t\tpublicKeyLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_PUBKEY_FIELD\");\n\t\tpublicKeyLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\thashLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_HASH_FIELD\");\n\t\tsaltLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_SALT_FIELD\");\n\t\tsaltGenerateButton.innerText = await availableAPIs.lookupLocale(\"REGENERATE\");\n\t\titerationsLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_ITERATIONS_FIELD\");\n\t\tbaseKeyLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_BASEKEY_FIELD\");\n\t\tbaseKeyLoadButton.innerText = await availableAPIs.lookupLocale(\"LOAD_BTN\");\n\t\timportAsLabel.innerText = await availableAPIs.lookupLocale(\"IMPORT_AS_FIELD\");\n\t\tnamedCurveLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_NC_FIELD\");\n\t\tlengthLabel.innerText = await availableAPIs.lookupLocale(\"LENGTH_FIELD\");\n\t\tderiveButton.innerText = await availableAPIs.lookupLocale(\"CRYPTO_DERIVEBITS_ACTION\");\n\t\tderivedBitsLabel.innerText = await availableAPIs.lookupLocale(\"CRYPTO_DERIVEOUT_FIELD\");\n\t\tderivedBitsSaveButton.innerText = await availableAPIs.lookupLocale(\"SAVE_BTN\");\n\n\t\tpage.appendChild(algorithmLabel);\n\t\tpage.appendChild(algorithmOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(publicKeyLabel);\n\t\tpage.appendChild(publicKeyLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(publicKeyField);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(hashLabel);\n\t\tpage.appendChild(hashOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(saltLabel);\n\t\tpage.appendChild(saltGenerateButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(saltField);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(iterationsLabel);\n\t\tpage.appendChild(iterationsField);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(baseKeyLabel);\n\t\tpage.appendChild(baseKeyLoadButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(baseKeyField);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(importAsLabel);\n\t\tpage.appendChild(importAsOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(namedCurveLabel);\n\t\tpage.appendChild(namedCurveOption);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(lengthLabel);\n\t\tpage.appendChild(lengthField);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(deriveButton);\n\t\tpage.appendChild(document.createElement(\"hr\"));\n\t\tpage.appendChild(derivedBitsLabel);\n\t\tpage.appendChild(derivedBitsSaveButton);\n\t\tpage.appendChild(document.createElement(\"br\"));\n\t\tpage.appendChild(derivedBitsField);\n\n\t\titerationsField.type = \"number\";\n\t\tlengthField.type = \"number\";\n\t\tlengthField.value = 256;\n\t\tderivedBitsField.readOnly = true;\n\n\t\tfor (let algorithm of algorithms) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = algorithm;\n\t\t\toption.innerText = algorithm;\n\t\t\talgorithmOption.appendChild(option);\n\t\t}\n\n\t\tfor (let hash of hashes) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = hash;\n\t\t\toption.innerText = hash;\n\t\t\thashOption.appendChild(option);\n\t\t}\n\n\t\tfor (let curve of namedCurves) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = curve;\n\t\t\toption.innerText = curve;\n\t\t\tnamedCurveOption.appendChild(option);\n\t\t}\n\n\t\tfor (let importType in importAs) {\n\t\t\tlet option = document.createElement(\"option\");\n\t\t\toption.value = importType;\n\t\t\toption.innerText = importAs[importType];\n\t\t\timportAsOption.appendChild(option);\n\t\t}\n\n\t\tbackButton.onclick = mainPage;\n\t\tpublicKeyLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) publicKeyField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tbaseKeyLoadButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"load\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) baseKeyField.value = await availableAPIs.fs_read({ path: result.selected });\n\t\t}\n\t\tsaltGenerateButton.onclick = async function() {\n\t\t\tsaltField.value = u8aToHex(await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"random\",\n\t\t\t\tcspArgument: new Uint8Array(32)\n\t\t\t}));\n\t\t}\n\t\tderivedBitsSaveButton.onclick = async function() {\n\t\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\t\tawait availableAPIs.windowVisibility(false);\n\t\t\tawait availableAPIs.startTask({ file: (await availableAPIs.getSystemMount()) + \"/apps/filePicker.js\", argPassed: [ipcPipe, \"save\"] });\n\t\t\tlet result = await availableAPIs.listenToPipe(ipcPipe);\n\t\t\tawait availableAPIs.closePipe(ipcPipe);\n\t\t\tawait availableAPIs.windowVisibility(true);\n\t\t\tif (result.success) await availableAPIs.fs_write({ path: result.selected, data: derivedBitsField.value });\n\t\t}\n\t\tderiveButton.onclick = async function() {\n\t\t\tlet baseKeyData, publicKeyData;\n\t\t\tif (importAsOption.value == \"jwk\") {\n\t\t\t\tbaseKeyData = JSON.parse(baseKeyField.value);\n\t\t\t\tpublicKeyData = JSON.parse(publicKeyField.value || \"00\");\n\t\t\t}\n\t\t\tif (importAsOption.value == \"raw\") {\n\t\t\t\tbaseKeyData = hexToU8A(baseKeyField.value);\n\t\t\t\tpublicKeyData = hexToU8A(publicKeyField.value || \"00\");\n\t\t\t}\n\t\t\tlet baseKeyImport = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"importKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tformat: importAsOption.value,\n\t\t\t\t\tkeyData: baseKeyData,\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\tnamedCurve: namedCurveOption.value,\n\t\t\t\t\t\tlength: parseInt(lengthField.value)\n\t\t\t\t\t},\n\t\t\t\t\textractable: false,\n\t\t\t\t\tkeyUsages: [ \"deriveBits\" ]\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet publicKeyImport;\n\t\t\tif (publicKeyData.value) {\n\t\t\t\tpublicKeyImport = await availableAPIs.cspOperation({\n\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\tformat: importAsOption.value,\n\t\t\t\t\t\tkeyData: publicKeyData,\n\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\t\tnamedCurve: namedCurveOption.value,\n\t\t\t\t\t\t\tlength: parseInt(lengthField.value)\n\t\t\t\t\t\t},\n\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\tkeyUsages: []\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tderivedBitsField.value = u8aToHex(new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"deriveBits\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tname: algorithmOption.value,\n\t\t\t\t\t\tpublic: publicKeyImport,\n\t\t\t\t\t\thash: hashOption.value,\n\t\t\t\t\t\tsalt: hexToU8A(saltField.value),\n\t\t\t\t\t\tinfo: new Uint8Array(),\n\t\t\t\t\t\titerations: parseInt(iterationsField.value),\n\t\t\t\t\t},\n\t\t\t\t\tbaseKey: baseKeyImport,\n\t\t\t\t\tlength: parseInt(lengthField.value)\n\t\t\t\t}\n\t\t\t})));\n\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"unloadKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tkey: baseKeyImport\n\t\t\t\t}\n\t\t\t});\n\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"unloadKey\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\tkey: publicKeyImport\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","ea9969e0b9d743e8599fe013c5ff0f7620aa29f96e0e40c9f14bf7deb4efa72ada31ec9833067728b26833e926d06ea58af933669e5df154cae91810fc78f7bd":"{\"path\":\"system/apps/crypto.js\",\"localeReferenceName\":\"CRYPTO_TOOLS_TITLE\"}"},"buildInfo":{"for":"1433","version":1433,"when":1757088949378,"signer":"moduleSigner","critical":false,"bootOrder":"50","commonName":"crypto-tools","signature":"2e44a91231b4f61deff8167f6fa3ac719157bcab48e708636b46ba7d59ffb6bd62554a37facba6237dcc8eeed9b8f0f1551d22c7a48028eed4e7bf4a4bdeec06"}}