{"backend":{"files":{"apps":{"adduser.js":"0cf34ecd16e9e1ab81d2c1812a07c6eefed63dd5839ee437a872215ddbcc164994212c534a902a3754a3468b5e5171aa604a48c74515f9d75b9c9bba7a73cfa5","blockuser.js":"925f63268f60aac54f16ae9fb347e7449c45ec8123a30d4dfb18edf5a27d2337b7c39644cb387982c043f5c06ecd35fa0e39dd2f2808fb56a9226fdebc44ae4f","deluser.js":"c085aea279081c83ecd003e80693f325406271d3b801c6493ac1b77511a7dd688459f414a4bf257b1c55bc7d736871f243e75bf11c600024bd6505faf8ef6d61","lsuser.js":"7fd97b2fbdcadc4e64bcdc05b123827196a41ad9d5036ec0acf0207ee6081019787ae231a3f6a9fbe4246ab7f33b7145f15379de6184c984d67d8c803340bff5","passwd.js":"210a43cb5c6165eebe8b4116d26bce51aa1745bf7ebc1a7bde094aac9b9daac2319f30b952a3ff12ccec19480a85deb35ab7dd5b8d4b2a9816c61e53866976aa"}},"permissions":{"apps/adduser.js":{"world":"rx"},"apps/blockuser.js":{"world":"rx"},"apps/deluser.js":{"world":"rx"},"apps/lsuser.js":{"world":"rx"},"apps/passwd.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"0cf34ecd16e9e1ab81d2c1812a07c6eefed63dd5839ee437a872215ddbcc164994212c534a902a3754a3468b5e5171aa604a48c74515f9d75b9c9bba7a73cfa5":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SET_USER_INFO, SWITCH_USERS_AUTOMATICALLY, FS_LIST_PARTITIONS, FS_READ, FS_WRITE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS, GET_USER_INFO, USER_INFO_OTHERS\n// signature: 131eaf121cfe1b06d8461a9a0c91f01b1a5712237b40c7555da806da970c78da062619311aaa59b5d820f1a7af59cb9ed75afaedf3cefb69d0e864ac15a7d891\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"adduser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (ppos.length < 1) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"ADDUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"ADDUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_SKIP_PASSWD\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_SKIP_HOME\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_HOME\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_GROUPS\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NEW_USER_CREATION\")).replace(\"%s\", ppos[0]) + \"\\r\\n\");\n\ttry {\n\t\tlet userData = await availableAPIs.getUserInfo({ desiredUser: ppos[0] });\n\t\tif (userData) throw new Error(\"USERNAME_EXISTS\");\n\t\tlet homeDirectory = pargs[\"home\"] || await availableAPIs.getSystemMount() + \"/home/\" + ppos[0];\n\t\tawait availableAPIs.setUserInfo({\n\t\t\tdesiredUser: ppos[0],\n\t\t\tinfo: {\n\t\t\t\tgroups: [ppos[0], ...(pargs.groups ? (pargs.groups instanceof Array ? pargs.groups : [pargs.groups]) : []) ],\n\t\t\t\thomeDirectory,\n\t\t\t\tsecurityChecks: [],\n\t\t\t\tblankPrivileges: false\n\t\t\t}\n\t\t});\n\t\tif (!pargs[\"skip-home\"]) {\n\t\t\tawait mkrecursive(homeDirectory);\n\t\t\tawait availableAPIs.fs_chown({ path: homeDirectory, newUser: ppos[0] });\n\t\t\tawait availableAPIs.fs_chgrp({ path: homeDirectory, newGrp: ppos[0] });\n\t\t\tawait availableAPIs.fs_chmod({ path: homeDirectory, newPermissions: \"rx\" });\n\t\t}\n\t\tif (pargs[\"skip-passwd\"]) return await availableAPIs.terminate();\n\t\tawait availableAPIs.switchUser(ppos[0]);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_NEW_PROMPT\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_PROMPT\"));\n\tlet str = \"\";\n\tlet stage = 0;\n\tlet password = \"\";\n\tonTermData(async function(e) {\n\t\tif (e == \"\\r\") {\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (stage == 0) {\n\t\t\t\tpassword = str;\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_CONFIRM_PROMPT\"));\n\t\t\t\tstage = 1;\n\t\t\t\tstr = \"\";\n\t\t\t} else if (stage == 1) {\n\t\t\t\tstage = 2;\n\t\t\t\tif (str == password) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\tcspArgument: key\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait availableAPIs.setOwnSecurityChecks({\n\t\t\t\t\t\t\tchecks: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"PASSWD_FEEDBACK\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t} else {\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"PASSWD_MISMATCH\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(\"*\");\n\t\t\t}\n\t\t}\n\t});\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\nasync function mkrecursive(dir) {\n\tlet slices = dir.split(\"/\");\n\tfor (let i = 2; i <= slices.length; i++) {\n\t\tlet browse = await availableAPIs.fs_ls({ path: slices.slice(0, i - 1).join(\"/\") });\n\t\tif (!browse.includes(slices[i - 1])) await availableAPIs.fs_mkdir({ path: slices.slice(0, i).join(\"/\") });\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","925f63268f60aac54f16ae9fb347e7449c45ec8123a30d4dfb18edf5a27d2337b7c39644cb387982c043f5c06ecd35fa0e39dd2f2808fb56a9226fdebc44ae4f":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, SWITCH_USERS_AUTOMATICALLY\n// signature: 0a60b1c9565361c4b9f81688b95e70a5bf91c09bc96929a246d178f5d4fa3c2cfbfb02d74c37b39cab491d4de381b2e3724a65b5c4c6730dae14076554d48eab\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"blockuser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (pargs.help) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BLOCKUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BLOCKUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\ttry {\n\t\tif (ppos[0]) await availableAPIs.switchUser(ppos[0]);\n\t\tawait availableAPIs.setOwnSecurityChecks({ checks: [] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"blockuser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","c085aea279081c83ecd003e80693f325406271d3b801c6493ac1b77511a7dd688459f414a4bf257b1c55bc7d736871f243e75bf11c600024bd6505faf8ef6d61":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SET_USER_INFO, FS_LIST_PARTITIONS, FS_READ, FS_BYPASS_PERMISSIONS, FS_REMOVE, GET_USER_INFO, USER_INFO_OTHERS\n// signature: 95cebf55d2c3ab7983836d3503a6045c1d70f8d4d0c5210c2e7ddd6374a4c389bdea1d23e6192a58bc40940335dc4877599b3ad9edda9ecab9f19771f1f765a4\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"deluser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (ppos.length < 1) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DELUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DELUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"DELUSER_HOMEDIR\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"deluser: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"OLD_USER_DELETION\")).replace(\"%s\", ppos[0]) + \"\\r\\n\");\n\ttry {\n\t\tlet userInfo = await availableAPIs.getUserInfo({ desiredUser: ppos[0] });\n\t\tif (!userInfo) throw new Error(\"ACCESS_FN_FAIL\");\n\t\tawait availableAPIs.setUserInfo({\n\t\t\tdesiredUser: ppos[0],\n\t\t\tinfo: undefined\n\t\t})\n\t\tif (pargs.homedir) await recursiveRemove(userInfo.homeDirectory);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"deluser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\treturn await availableAPIs.terminate();\n})();\n\nasync function recursiveRemove(path) {\n\tlet dirList = await availableAPIs.fs_ls({ path });\n\tfor (let fileIndex in dirList) {\n\t\tlet file = dirList[fileIndex];\n\t\tif (await availableAPIs.fs_isDirectory({ path: path + \"/\" + file })) await recursiveRemove(path + \"/\" + file);\n\t\telse await availableAPIs.fs_rm({ path: path + \"/\" + file });\n\t}\n\tawait availableAPIs.fs_rm({ path });\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","7fd97b2fbdcadc4e64bcdc05b123827196a41ad9d5036ec0acf0207ee6081019787ae231a3f6a9fbe4246ab7f33b7145f15379de6184c984d67d8c803340bff5":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_USER_LIST\n// signature: 3898261ec49bbb92ca0c4c14ff94b09c28b399391b7c6bf4b4d804dddfefe53f5ba0e9d35aec8f0290464a2e8f76c7fefa7e5e7d10eb42cc3f42754ec3fc7376\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"lsuser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tfor (let user of await availableAPIs.getUsers()) await availableAPIs.toMyCLI(JSON.stringify(user) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"lsuser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\treturn await availableAPIs.terminate();\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","210a43cb5c6165eebe8b4116d26bce51aa1745bf7ebc1a7bde094aac9b9daac2319f30b952a3ff12ccec19480a85deb35ab7dd5b8d4b2a9816c61e53866976aa":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SWITCH_USERS_AUTOMATICALLY\n// signature: 66bba0738369d9e73940de0bb12717fc6f29f1b7ac67dd541d14ccd9ee123f2dd2f1f7ee70b0f18ffa15aedb4a25a1a1a893611704034f8acdcb34c71d04677d\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"passwd: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (exec_args[0]) {\n\t\ttry {\n\t\t\tawait availableAPIs.switchUser(exec_args[0]);\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_NEW_PROMPT\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_2FACTOR_LOSS_WARN\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_PROMPT\"));\n\tlet str = \"\";\n\tlet stage = 0;\n\tlet password = \"\";\n\tonTermData(async function(e) {\n\t\tif (e == \"\\r\") {\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (stage == 0) {\n\t\t\t\tpassword = str;\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_CONFIRM_PROMPT\"));\n\t\t\t\tstage = 1;\n\t\t\t\tstr = \"\";\n\t\t\t} else if (stage == 1) {\n\t\t\t\tstage = 2;\n\t\t\t\tif (str == password) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\tcspArgument: key\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait availableAPIs.setOwnSecurityChecks({\n\t\t\t\t\t\t\tchecks: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(\"PASSWD_FEEDBACK\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t} else {\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(\"PASSWD_MISMATCH\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(\"*\");\n\t\t\t}\n\t\t}\n\t});\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1316","when":1750515375007,"signer":"moduleSigner","critical":false,"signature":"af7ee5b2459b87bbfc3cf43f85af6db19bffbe91889c7b647a0c44a2eb38f589f32b1d79efb86ce95919ae36bec9309c244ea67d1f74936bebd40c4015f2f49a"}}