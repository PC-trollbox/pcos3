{"backend":{"files":{"apps":{"adduser.js":"9712a0b50125d19fc8726d2a71eda70af354c4ae4c567f78750678cfe8a8f5ef0eb4f48341eb141143b1e9b9a1fe713c3c01c1f17a9891f30ec9e6cca2ac12ab","blockuser.js":"bec0010a6230fddf0e40c0564b6efabfde0023c3aa20b6b843965e15b9217ec8da84c6548b7892a3c7726b6110f190e69297eaef30ebf8d3ebbe0d8da6698ad2","deluser.js":"49a4f1ed44968894e88bd76e160d590d2a55c032d96b0f2de6cc719ce156adccaa5c196b602df068691a0db951b3b5b677e45fd934b72aec8d1c5b8e9891dd44","lsuser.js":"cf1fc8f11987a2cc4332f5fa6f19be630cb6b83260f8e84dc9724208ffab7846a72dd7ac9ee5b6a3f01f878c533eabaada5bf14200f541516a23c7b07af9bfb8","passwd.js":"70b9030d6b9210b33c3a50d39806c87a4315ae2b4eb536dec5af7a19b3260eee1b0e3ee3d3433eb830c31bcfb7f2968a5461ffbc082d3055ee5f6029b18b553c"}},"permissions":{"apps/adduser.js":{"world":"rx"},"apps/blockuser.js":{"world":"rx"},"apps/deluser.js":{"world":"rx"},"apps/lsuser.js":{"world":"rx"},"apps/passwd.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"9712a0b50125d19fc8726d2a71eda70af354c4ae4c567f78750678cfe8a8f5ef0eb4f48341eb141143b1e9b9a1fe713c3c01c1f17a9891f30ec9e6cca2ac12ab":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SET_USER_INFO, SWITCH_USERS_AUTOMATICALLY, FS_LIST_PARTITIONS, FS_READ, FS_WRITE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS, GET_USER_INFO, USER_INFO_OTHERS\n// signature: 7c3445ad2448311c6166cfa5a966558623d735cf2b34eaf3d99f4d3d66b05bf85d9ae6e1faa2b46b83b2f463205806b23112229ab949c0611eab876022b4a4a8\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"adduser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (ppos.length < 1) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"ADDUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"ADDUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_SKIP_PASSWD\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_SKIP_HOME\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_HOME\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_GROUPS\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NEW_USER_CREATION\")).replace(\"%s\", ppos[0]) + \"\\r\\n\");\n\ttry {\n\t\tlet userData = await availableAPIs.getUserInfo({ desiredUser: ppos[0] });\n\t\tif (userData) throw new Error(\"USERNAME_EXISTS\");\n\t\tlet homeDirectory = pargs[\"home\"] || await availableAPIs.getSystemMount() + \"/home/\" + ppos[0];\n\t\tawait availableAPIs.setUserInfo({\n\t\t\tdesiredUser: ppos[0],\n\t\t\tinfo: {\n\t\t\t\tgroups: [ppos[0], ...(pargs.groups ? (pargs.groups instanceof Array ? pargs.groups : [pargs.groups]) : []) ],\n\t\t\t\thomeDirectory,\n\t\t\t\tsecurityChecks: [],\n\t\t\t\tblankPrivileges: false\n\t\t\t}\n\t\t});\n\t\tif (!pargs[\"skip-home\"]) {\n\t\t\tawait mkrecursive(homeDirectory);\n\t\t\tawait availableAPIs.fs_chown({ path: homeDirectory, newUser: ppos[0] });\n\t\t\tawait availableAPIs.fs_chgrp({ path: homeDirectory, newGrp: ppos[0] });\n\t\t\tawait availableAPIs.fs_chmod({ path: homeDirectory, newPermissions: \"rx\" });\n\t\t}\n\t\tif (pargs[\"skip-passwd\"]) return await availableAPIs.terminate();\n\t\tawait availableAPIs.switchUser(ppos[0]);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_NEW_PROMPT\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_PROMPT\"));\n\tlet str = \"\";\n\tlet stage = 0;\n\tlet password = \"\";\n\tonTermData(async function(e) {\n\t\tif (e == \"\\r\") {\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (stage == 0) {\n\t\t\t\tpassword = str;\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_CONFIRM_PROMPT\"));\n\t\t\t\tstage = 1;\n\t\t\t\tstr = \"\";\n\t\t\t} else if (stage == 1) {\n\t\t\t\tstage = 2;\n\t\t\t\tif (str == password) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\tcspArgument: key\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait availableAPIs.setOwnSecurityChecks({\n\t\t\t\t\t\t\tchecks: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"PASSWD_FEEDBACK\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t} else {\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"PASSWD_MISMATCH\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(\"*\");\n\t\t\t}\n\t\t}\n\t});\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\nasync function mkrecursive(dir) {\n\tlet slices = dir.split(\"/\");\n\tfor (let i = 2; i <= slices.length; i++) {\n\t\tlet browse = await availableAPIs.fs_ls({ path: slices.slice(0, i - 1).join(\"/\") });\n\t\tif (!browse.includes(slices[i - 1])) await availableAPIs.fs_mkdir({ path: slices.slice(0, i).join(\"/\") });\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","bec0010a6230fddf0e40c0564b6efabfde0023c3aa20b6b843965e15b9217ec8da84c6548b7892a3c7726b6110f190e69297eaef30ebf8d3ebbe0d8da6698ad2":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, SWITCH_USERS_AUTOMATICALLY\n// signature: f13f4c97527b99efdc48ce0bfe05fb2fd88f6c417b38b171fa364d605bdbc745b47a007b9a96c56a487cd7c39ae807b6633a159582a330663a25f56b301c13b1\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"blockuser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (pargs.help) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BLOCKUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BLOCKUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\ttry {\n\t\tif (ppos[0]) await availableAPIs.switchUser(ppos[0]);\n\t\tawait availableAPIs.setOwnSecurityChecks({ checks: [] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"blockuser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","49a4f1ed44968894e88bd76e160d590d2a55c032d96b0f2de6cc719ce156adccaa5c196b602df068691a0db951b3b5b677e45fd934b72aec8d1c5b8e9891dd44":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SET_USER_INFO, FS_LIST_PARTITIONS, FS_READ, FS_BYPASS_PERMISSIONS, FS_REMOVE, GET_USER_INFO, USER_INFO_OTHERS\n// signature: 01cf509b56fec8a42fa9454dd112e4e897b169e65278322c3423533763ec6e938b3400437bad6eb6d6fb2a28d1b57384602af46ea3918d083d8a05721ba750e5\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"deluser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (ppos.length < 1) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DELUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DELUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"DELUSER_HOMEDIR\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"deluser: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"OLD_USER_DELETION\")).replace(\"%s\", ppos[0]) + \"\\r\\n\");\n\ttry {\n\t\tlet userInfo = await availableAPIs.getUserInfo({ desiredUser: ppos[0] });\n\t\tif (!userInfo) throw new Error(\"ACCESS_FN_FAIL\");\n\t\tawait availableAPIs.setUserInfo({\n\t\t\tdesiredUser: ppos[0],\n\t\t\tinfo: undefined\n\t\t})\n\t\tif (pargs.homedir) await recursiveRemove(userInfo.homeDirectory);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"deluser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\treturn await availableAPIs.terminate();\n})();\n\nasync function recursiveRemove(path) {\n\tlet dirList = await availableAPIs.fs_ls({ path });\n\tfor (let fileIndex in dirList) {\n\t\tlet file = dirList[fileIndex];\n\t\tif (await availableAPIs.fs_isDirectory({ path: path + \"/\" + file })) await recursiveRemove(path + \"/\" + file);\n\t\telse await availableAPIs.fs_rm({ path: path + \"/\" + file });\n\t}\n\tawait availableAPIs.fs_rm({ path });\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","cf1fc8f11987a2cc4332f5fa6f19be630cb6b83260f8e84dc9724208ffab7846a72dd7ac9ee5b6a3f01f878c533eabaada5bf14200f541516a23c7b07af9bfb8":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_USER_LIST\n// signature: 3ff015f4e9fd06a36711a9859f96553a1b938e8a8589bc3393a308344cb852b33de9249eeb74090b90bc9c9591e999481f738e5b47a112b1c465fc359825bb81\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"lsuser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tfor (let user of await availableAPIs.getUsers()) await availableAPIs.toMyCLI(JSON.stringify(user) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"lsuser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\treturn await availableAPIs.terminate();\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","70b9030d6b9210b33c3a50d39806c87a4315ae2b4eb536dec5af7a19b3260eee1b0e3ee3d3433eb830c31bcfb7f2968a5461ffbc082d3055ee5f6029b18b553c":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SWITCH_USERS_AUTOMATICALLY\n// signature: ee73062ffbdbe16885729d1f899d3c106b9e74a2a5668db0cc9d872631de5fe5acec0332c27ed16834040a67facf663aa81a63a20f80d985b095bcd9eaaa18af\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"passwd: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (exec_args[0]) {\n\t\ttry {\n\t\t\tawait availableAPIs.switchUser(exec_args[0]);\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_NEW_PROMPT\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_2FACTOR_LOSS_WARN\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_PROMPT\"));\n\tlet str = \"\";\n\tlet stage = 0;\n\tlet password = \"\";\n\tonTermData(async function(e) {\n\t\tif (e == \"\\r\") {\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (stage == 0) {\n\t\t\t\tpassword = str;\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_CONFIRM_PROMPT\"));\n\t\t\t\tstage = 1;\n\t\t\t\tstr = \"\";\n\t\t\t} else if (stage == 1) {\n\t\t\t\tstage = 2;\n\t\t\t\tif (str == password) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\tcspArgument: key\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait availableAPIs.setOwnSecurityChecks({\n\t\t\t\t\t\t\tchecks: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(\"PASSWD_FEEDBACK\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t} else {\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(\"PASSWD_MISMATCH\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(\"*\");\n\t\t\t}\n\t\t}\n\t});\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1314","when":1750514397595,"signer":"moduleSigner","critical":false,"signature":"5b4c6ff8f7481ee66cff8dbc6bd44547cc6987023abddb9dca264a9534a1346e5f9f61cfb10f13312e82a3bc8c8fbb18fb426125d7641a90581c7422a59506c3"}}