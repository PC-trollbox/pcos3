{"backend":{"files":{"apps":{"basiccurl.js":"42d7ad6855a4d47fef4f983123a6da3d522e372fb58879807486df81954b8ca1cff735f79bc7fa0afff27c2050835843cfdff1812134f841e704af9c5d0673c4","diffupdate.js":"592688722b2216b76b6de7b9c2dca4b65423011bbf166bca7b5ff712a843f0cff6d046a8e7345e9e88572e8592917965d9e1ac61ad78b08742de0c3ba579c622","netinfo.js":"109b4c301472cb0fee999df5742ca9196c2ad089071bc090880b9ddc005de1010ed17434f9eedaf3186c1a5dbb9bc2d3f18d56bf5a5c520bbeebd7d3289c30da","networkfs.js":"d045e682b7d322e9c3b5458243cbc87f1da201c64dfec62a5361e62366e81110ca6883d7563c3f8c9cca5740429adc177e74eeffea022e1787ca0669c399156c","ping.js":"60c1c060d101bd52b55017ceefdc42962dbd07a7c104873e55313fb9d17d29f0b61f1b960e124c436685e9a42a2871a6af88b647a980d43e074fdb19d64887e3","renetworkd.js":"61aeabfb80931376cbb10639a2def2da7edbe0a7881f563cda03843e1eed8a2094be1f45d80ed36432c52e75c22d99ed5ff73e767c8cef645ffac9c3d86f5184","updatefw.js":"a02202f72dd131c836a8c3fbf1b2da7e6fe26d43885aa68dad3a8c43951a542fa58a6fde33c4249342a578823c3637b8a0b5a91584e4aa23efbb4957eb15d4a6","updateos.js":"f23963cf9ae73904774257e0545d27c6ffb04f82a9db3c6db85774362cec9bc61d54a2fdf19d9fe964f4d4293caed6eda18b3e2117648d6cf23c0bbe166e4967"}},"permissions":{"apps/basiccurl.js":{"world":"rx"},"apps/diffupdate.js":{"world":"rx"},"apps/netinfo.js":{"world":"rx"},"apps/networkfs.js":{"world":"rx"},"apps/ping.js":{"world":"rx"},"apps/renetworkd.js":{"world":"rx"},"apps/updatefw.js":{"world":"rx"},"apps/updateos.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"42d7ad6855a4d47fef4f983123a6da3d522e372fb58879807486df81954b8ca1cff735f79bc7fa0afff27c2050835843cfdff1812134f841e704af9c5d0673c4":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FETCH_SEND, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION\n// signature: 62ea860af12354281c32a17bba961f79a8d7417aea896bdef39d18350be3ca30ad1f16649a4073a50b5c8046c3a0251172da74fc0caae641e38955e8080f149b\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"basiccurl: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BASIC_CURL_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BASIC_CURL_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"basiccurl: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tlet downloadedFile = await availableAPIs.fetchSend({\n\t\t\turl: exec_args[0],\n\t\t\tinit: {}\n\t\t});\n\t\tdownloadedFile = downloadedFile.arrayBuffer;\n\t\tdownloadedFile = new TextDecoder().decode(downloadedFile);\n\t\tawait availableAPIs.fs_write({ path: exec_args[1], data: downloadedFile });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"basiccurl: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","592688722b2216b76b6de7b9c2dca4b65423011bbf166bca7b5ff712a843f0cff6d046a8e7345e9e88572e8592917965d9e1ac61ad78b08742de0c3ba579c622":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, PATCH_DIFF, RESOLVE_NAME, CONNFUL_CONNECT, CONNFUL_READ, CONNFUL_WRITE, CONNFUL_DISCONNECT, FS_LIST_PARTITIONS, CSP_OPERATIONS, START_TASK, LIST_TASKS, GET_UPDATE_SERVICE, CONNFUL_IDENTITY_GET\n// allow: FS_WRITE, RUN_KLVL_CODE, IPC_CREATE_PIPE, IPC_LISTEN_PIPE, GET_LOCALE, FS_LIST_PARTITIONS, SYSTEM_SHUTDOWN, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 8ff67e8829f6a0f1358b172220329cf37f3d9ad0ef346d70320ecb745bc8bb7ed56d28e85bfd47f1f6d8ab4b0fb0c53db3138f1737cb840eab48f01c72cd659a\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (!pargs[\"override-modules\"]) {\n\t\tawait availableAPIs.toMyCLI(\"diffupdate no longer works on modular systems and will be replaced with a better version.\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"To run diffupdate anyway, re-run with --override-modules.\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\ttry {\n\t\tlet etcls = await availableAPIs.fs_ls({\n\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc\"\n\t\t});\n\t\tlet from = \"scratch\";\n\t\tlet originalVersion = \"\";\n\t\tif (etcls.includes(\"diffupdate_cache.js\")) {\n\t\t\toriginalVersion = await availableAPIs.fs_read({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/diffupdate_cache.js\"\n\t\t\t});\n\t\t\tfrom = originalVersion.split(\"\\n\")[5].match(/\\d\\w+/)[0];\n\t\t}\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"CURRENT_OSFILE_VERSION\")).replace(\"%s\", from) + \"\\r\\n\");\n\t\tlet serverDomainOrAddress = ppos[0] || ((await availableAPIs.getUpdateService()) || \"pcosserver.pc\");\n\t\tlet serverAddress = serverDomainOrAddress;\n\t\tif (!serverAddress.includes(\":\")) serverAddress = await availableAPIs.resolve(serverAddress);\n\t\tif (!serverAddress) throw new Error(await availableAPIs.lookupLocale(\"HOSTNAME_RESOLUTION_FAILED\"));\n\t\tserverAddress = serverAddress.replaceAll(\":\", \"\");\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"DOWNLOADING_OS_PATCH\")).replace(\"%s\", serverDomainOrAddress).replace(\"%s\", serverAddress.match(/.{1,4}/g).join(\":\")) + \"\\r\\n\");\n\t\tlet connection = await availableAPIs.connfulConnect({\n\t\t\tgate: \"deltaUpdate\",\n\t\t\taddress: serverAddress,\n\t\t\tverifyByDomain: serverDomainOrAddress.includes(\":\") ? serverAddress : serverDomainOrAddress,\n\t\t\tdoNotVerifyServer: pargs[\"fingerprint\"] || pargs[\"no-verification\"] || pargs[\"view-fingerprint\"]\n\t\t});\n\t\tawait availableAPIs.connfulConnectionSettled(connection);\n\t\tif (pargs[\"fingerprint\"] || pargs[\"view-fingerprint\"]) {\n\t\t\tlet identity = await availableAPIs.connfulIdentityGet(connection);\n\t\t\tlet hash = await availableAPIs.cspOperation({\n\t\t\t\tcspProvider: \"basic\",\n\t\t\t\toperation: \"digest\",\n\t\t\t\tcspArgument: {\n\t\t\t\t\talgorithm: \"SHA-256\",\n\t\t\t\t\tdata: new TextEncoder().encode(identity)\n\t\t\t\t}\n\t\t\t});\n\t\t\thash = Array.from(new Uint8Array(hash)).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\tif (pargs[\"view-fingerprint\"]) await availableAPIs.toMyCLI(\"--fingerprint=\" + hash + \"\\r\\n\");\n\t\t\tif (pargs[\"fingerprint\"] != hash) {\n\t\t\t\tawait availableAPIs.connfulDisconnect(connection);\n\t\t\t\tif (!pargs[\"view-fingerprint\"]) await availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"SERVER_SIGNATURE_VERIFICATION_FAILED\") + \"\\r\\n\");\n\t\t\t\treturn await availableAPIs.terminate();\n\t\t\t}\n\t\t}\n\t\tawait availableAPIs.connfulWrite({\n\t\t\tconnectionID: connection,\n\t\t\tdata: JSON.stringify({ from, handlesCtr: true })\n\t\t})\n\t\tlet patch = [];\n\t\twhile (true) {\n\t\t\tlet a = JSON.parse(await availableAPIs.connfulRead(connection));\n\t\t\tif (a.final) break;\n\t\t\tpatch[a.ctr] = a.hunk;\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\" + (await availableAPIs.lookupLocale(\"PATCH_HUNK_COUNT\")).replace(\"%s\", patch.length));\n\t\t}\n\t\tawait availableAPIs.connfulDisconnect(connection);\n\t\tawait availableAPIs.toMyCLI(\"\\r\" + (await availableAPIs.lookupLocale(\"PATCH_HUNK_COUNT\")).replace(\"%s\", patch.length) + \"\\r\\n\");\n\t\tif (patch.length == 0) {\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"SYSTEM_UP_TO_DATE\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/etc/diffupdate_cache.js\",\n\t\t\tdata: (await availableAPIs.patchDiff({\n\t\t\t\toperation: \"applyPatch\",\n\t\t\t\targs: [ originalVersion, patch ]\n\t\t\t})).join(\"\")\n\t\t});\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"HANDOFF_UPDATE\") + \"\\r\\n\");\n\t\tlet task = await availableAPIs.startTask({\n\t\t\tfile: (await availableAPIs.getSystemMount()) + \"/apps/updateos.js\",\n\t\t\targPassed: [ (await availableAPIs.getSystemMount()) + \"/etc/diffupdate_cache.js\" ],\n\t\t\tsilent: true\n\t\t});\n\t\tawait availableAPIs.waitTermination(task);\n\t\tawait availableAPIs.terminate();\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"diffupdate: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","109b4c301472cb0fee999df5742ca9196c2ad089071bc090880b9ddc005de1010ed17434f9eedaf3186c1a5dbb9bc2d3f18d56bf5a5c520bbeebd7d3289c30da":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_NETWORK_ADDRESS, GET_HOSTNAME, GET_UPDATE_SERVICE\n// signature: ab5a2ef89d4aed7cb365a7ba851cee3ab9861b4d24588bc04320b54375c4268601a06e913e849e3815d92fe797355c29a6abc9577744a082efbc9feb2b9efe5a\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"netinfo: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n    \n\ttry {\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_ADDRESS_FIELD\")).replace(\"%s\", (await availableAPIs.getNetworkAddress())?.match(/.{1,4}/g)?.join(\":\") || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\")) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_AUTOHOST_FIELD\")).replace(\"%s\", (await availableAPIs.getHostname() || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\"))) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NETWORK_UPDATES_FIELD\")).replace(\"%s\", (await availableAPIs.getUpdateService() || await availableAPIs.lookupLocale(\"UNKNOWN_PLACEHOLDER\"))) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"netinfo: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); ","d045e682b7d322e9c3b5458243cbc87f1da201c64dfec62a5361e62366e81110ca6883d7563c3f8c9cca5740429adc177e74eeffea022e1787ca0669c399156c":"// =====BEGIN MANIFEST=====\n// allow: GET_LOCALE, RESOLVE_NAME, CONNFUL_CONNECT, IPC_CREATE_PIPE, FS_MOUNT, IPC_LISTEN_PIPE, CONNFUL_WRITE, CONNFUL_READ, IPC_SEND_PIPE, FS_READ\n// signer: automaticSigner\n// signature: 82e4d11c5ee6b7c02692af807f5814dbd601b93b72fd66129779f53ca5bad30549493a8e02f83b05a3be3819ed5423b75cf1621c65efce9ef2d78255bc9fd4a1\n// =====END MANIFEST=====\nfunction IPv6Decompressor(ip) {\n\tlet array = ip.split(\":\");\n\tarray = array.slice(0, 8);\n\tlet foundTwoOrMoreZeroes = array.indexOf(\"\");\n\twhile (array.length != 8 && foundTwoOrMoreZeroes !== null) array.splice(foundTwoOrMoreZeroes, 0, \"0000\");\n\tarray = array.map(a => parseInt(a || \"0\", 16).toString(16).padStart(4, \"0\"));\n\treturn array.join(\":\");\n}\n(async function() {\n\t// @pcos-app-mode isolatable\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"networkfs: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.attachCLI();\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (ppos.length < 2) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"NETWORKFS_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"NETWORKFS_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"NETWORKFS_NOVERIFY\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"NETWORKFS_KEY\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"networkfs: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\tlet inPipe, outPipe, conn;\n\ttry {\n\t\tlet url = new URL(ppos[0]);\n\t\tif (url.protocol != \"netfs:\") throw new Error(await availableAPIs.lookupLocale(\"NETWORKFS_PROTO\"));\n\t\tif (url.port) throw new Error(await availableAPIs.lookupLocale(\"BLOG_BROWSER_GATESET\"));\n\t\tlet hostname = url.hostname, address;\n\t\tif (url.hostname.includes(\"[\")) {\n\t\t\thostname = IPv6Decompressor(url.hostname.slice(1, -1)).replaceAll(\":\", \"\");\n\t\t\taddress = hostname;\n\t\t} else address = await availableAPIs.resolve(hostname);\n\t\tif (!address) throw new Error(await availableAPIs.lookupLocale(\"HOSTNAME_RESOLUTION_FAILED\"));\n\t\tconn = await availableAPIs.connfulConnect({\n\t\t\tgate: url.username || \"netfs\",\n\t\t\taddress,\n\t\t\tverifyByDomain: hostname,\n\t\t\tkey: pargs.key ? JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: pargs.key\n\t\t\t})).key : undefined,\n\t\t\tprivate: pargs.key ? JSON.parse(await availableAPIs.fs_read({\n\t\t\t\tpath: pargs.key\n\t\t\t})).private : undefined,\n\t\t\tdoNotVerifyServer: pargs[\"no-verification\"]\n\t\t});\n\t\tawait availableAPIs.connfulConnectionSettled(conn);\n\t\tinPipe = await availableAPIs.createPipe();\n\t\toutPipe = await availableAPIs.createPipe();\n\t\tlet pipe2conn = (async function() {\n\t\t\twhile (true) {\n\t\t\t\tlet listenToPipe = await availableAPIs.listenToPipe(inPipe);\n\t\t\t\tavailableAPIs.connfulWrite({\n\t\t\t\t\tconnectionID: conn,\n\t\t\t\t\tdata: JSON.stringify(listenToPipe)\n\t\t\t\t});\n\t\t\t}\n\t\t})();\n\t\tlet conn2pipe = (async function() {\n\t\t\twhile (true) {\n\t\t\t\tlet networkListen = await availableAPIs.connfulRead(conn);\n\t\t\t\tavailableAPIs.sendToPipe({\n\t\t\t\t\tpipe: outPipe,\n\t\t\t\t\tdata: JSON.parse(networkListen)\n\t\t\t\t});\n\t\t\t}\n\t\t})();\n\t\tawait availableAPIs.fs_mount({\n\t\t\tmountpoint: ppos[1],\n\t\t\tfilesystem: \"IPCMount\",\n\t\t\tfilesystemOptions: {\n\t\t\t\tinputPipeId: inPipe,\n\t\t\t\toutputPipeId: outPipe\n\t\t\t}\n\t\t});\n\t\tawait Promise.all([pipe2conn, conn2pipe]);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"networkfs: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","60c1c060d101bd52b55017ceefdc42962dbd07a7c104873e55313fb9d17d29f0b61f1b960e124c436685e9a42a2871a6af88b647a980d43e074fdb19d64887e3":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FETCH_SEND, PCOS_NETWORK_PING, RESOLVE_NAME\n// signature: 6dd692f08552eb2c682daa30e7b17411bccf653376d732f7d03bda7bbe42f66af7f6052921c26d5072c1ffba6a4d20866212b812a523b430456b201a4b93201f\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"ping: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PING_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PING_DESCRIPTION\") + \"\\r\\n\")\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"PING_INTERNET_OPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"ping: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.includes(\"--internet\")) {\n\t\texec_args = exec_args.filter(a => a != \"--internet\");\n\t\tif (!exec_args.length) {\n\t\t\tawait availableAPIs.toMyCLI(\"ping: No URL specified\\r\\n\");\n\t\t\treturn availableAPIs.terminate();\n\t\t}\n\t\tawait availableAPIs.toMyCLI(\"Pinging \" + exec_args[0] + \" via HTTP...\\r\\n\");\n\t\tfor (let i = 1; i <= 4; i++) {\n\t\t\tawait new Promise((resolve) => setTimeout(() => resolve(\"ping\"), 500));\n\t\t\tlet time = performance.now();\n\t\t\ttry {\n\t\t\t\tif ((await Promise.race([availableAPIs.fetchSend({\n\t\t\t\t\turl: exec_args[0],\n\t\t\t\t\tinit: {\n\t\t\t\t\t\tnoArrayBuffer: true,\n\t\t\t\t\t\tmode: \"no-cors\"\n\t\t\t\t\t}\n\t\t\t\t}), new Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))])) == \"timeout\") throw new Error(\"Response timed out\");\n\t\t\t\ttime = performance.now() - time;\n\t\t\t\tawait availableAPIs.toMyCLI(\"http_seq=\" + i + \" time=\" + time.toFixed(2) + \" ms\\r\\n\");\n\t\t\t} catch (e) {\n\t\t\t\ttime = performance.now() - time;\n\t\t\t\tawait availableAPIs.toMyCLI(\"http_seq=\" + i + \" time=\" + time.toFixed(2) + \" ms err=\" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t\t}\n\t\t}\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet pingedAddress;\n\tif (exec_args[0].includes(\":\")) pingedAddress = exec_args[0].replaceAll(\":\", \"\");\n\telse {\n\t\ttry {\n\t\t\tpingedAddress = await Promise.race([\n\t\t\t\tavailableAPIs.resolve(exec_args[0]),\n\t\t\t\tnew Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))\n\t\t\t])\n\t\t\tif (pingedAddress == \"timeout\") throw new Error(\"Resolution timed out\");\n\t\t\tif (!pingedAddress) throw new Error(\"Could not resolve hostname\");\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"ping: \" + exec_args[0] + \": \" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(\"Pinging \" + exec_args[0] + \" (\" + pingedAddress.match(/.{1,4}/g).join(\":\") + \") via PCOS Network...\\r\\n\");\n\tfor (let i = 1; i <= 4; i++) {\n\t\tawait new Promise((resolve) => setTimeout(() => resolve(\"ping\"), 500));\n\t\tlet time = performance.now();\n\t\ttry {\n\t\t\tlet race = await Promise.race([availableAPIs.networkPing(pingedAddress), new Promise((resolve) => setTimeout(() => resolve(\"timeout\"), 30000))]);\n\t\t\tif (race == \"timeout\") throw new Error(\"Response timed out\");\n\t\t\ttime = performance.now() - time;\n\t\t\tawait availableAPIs.toMyCLI(\"count=\" + i + \" time=\" + time.toFixed(2) + \" ms\\r\\n\");\n\t\t} catch (e) {\n\t\t\ttime = performance.now() - time;\n\t\t\tawait availableAPIs.toMyCLI(\"count=\" + i + \" time=\" + time.toFixed(2) + \" ms err=\" + e.name + \": \" + e.message + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","61aeabfb80931376cbb10639a2def2da7edbe0a7881f563cda03843e1eed8a2094be1f45d80ed36432c52e75c22d99ed5ff73e767c8cef645ffac9c3d86f5184":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, RELOAD_NETWORK_CONFIG\n// signature: 4d40160d7695ef3cf8fe8ced4a976fe8c97cbeee61ada405b3555b326541c1ff401cf5a219a0d95f1e36d102a69deca15fc6e45b188c63b1d661c7cc17eb4da9\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"renetworkd: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tawait availableAPIs.reloadNetworkConfig();\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"renetworkd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","a02202f72dd131c836a8c3fbf1b2da7e6fe26d43885aa68dad3a8c43951a542fa58a6fde33c4249342a578823c3637b8a0b5a91584e4aa23efbb4957eb15d4a6":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: FETCH_SEND, SET_FIRMWARE, SYSTEM_SHUTDOWN, GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 7995825022b0240c34b2971be3541e4911ca997ff0baf114244c4d28ee98696978a2a86b2f70e08b231915495130394026622fd460ae1db5eca65f39a3af0065\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"updatefw: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOADING\") + \"\\r\\n\");\n\tlet fwArchive;\n\tif (!exec_args.length) {\n\t\ttry {\n\t\t\tfwArchive = await availableAPIs.fetchSend({\n\t\t\t\turl: \"/init.js\",\n\t\t\t\tinit: {}\n\t\t\t});\n\t\t\tif (!fwArchive.ok) throw new Error(\"Non-OK response (\" + fwArchive.status + \" \" + fwArchive.statusText + \")\");\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tfwArchive = { arrayBuffer: new TextEncoder().encode(await availableAPIs.fs_read({\n\t\t\t\tpath: exec_args[0]\n\t\t\t})) };\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_DECODING\") + \"\\r\\n\");\n\tfwArchive = fwArchive.arrayBuffer;\n\tfwArchive = new TextDecoder().decode(fwArchive);\n\ttry {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATEFW_SETTING\") + \"\\r\\n\");\n\t\tawait availableAPIs.setFirmware(fwArchive);\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RESTARTING\") + \"\\r\\n\");\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: true\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"updatefw: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","f23963cf9ae73904774257e0545d27c6ffb04f82a9db3c6db85774362cec9bc61d54a2fdf19d9fe964f4d4293caed6eda18b3e2117648d6cf23c0bbe166e4967":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: FETCH_SEND, FS_WRITE, RUN_KLVL_CODE, IPC_CREATE_PIPE, IPC_LISTEN_PIPE, GET_LOCALE, FS_LIST_PARTITIONS, SYSTEM_SHUTDOWN, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: e27a515184fd04e2547fec6607d68f30eb4f9192ba680d43c9284fb880a8fd0c03d8e19327e0daa7127da91429aa318b5cbd70e7dab1222dc3fca4180e5db2e2\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"updateos: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (!pargs[\"override-modules\"]) {\n\t\tawait availableAPIs.toMyCLI(\"updateos no longer works on modular systems and will be replaced with a better version.\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"To run updateos anyway, re-run with --override-modules.\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REINSTALL_DOWNLOADING\") + \"\\r\\n\");\n\tlet osArchive;\n\tif (!ppos[0]) {\n\t\ttry {\n\t\t\tosArchive = await availableAPIs.fetchSend({\n\t\t\t\turl: ppos.url || \"/os.js\",\n\t\t\t\tinit: {}\n\t\t\t});\n\t\t\tif (!osArchive.ok) throw new Error(\"Non-OK response (\" + osArchive.status + \" \" + osArchive.statusText + \")\");\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REINSTALL_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tosArchive = { arrayBuffer: new TextEncoder().encode(await availableAPIs.fs_read({\n\t\t\t\tpath: exec_args[0]\n\t\t\t})) };\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REINSTALL_DOWNLOAD_FAILED\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REINSTALL_DECODING\") + \"\\r\\n\");\n\tosArchive = osArchive.arrayBuffer;\n\tosArchive = new TextDecoder().decode(osArchive);\n\tlet files = osArchive.split(/\\/\\/ [0-9]+-.+.js\\n/g).slice(1);\n\tlet names = osArchive.match(/\\/\\/ [0-9]+-.+.js/g);\n\tlet appIndex = names.indexOf(\"// \" + \"1\" + \"5-ap\" + \"ps.js\");\n\tlet apps = files[appIndex].match(/async function (.+)Installer\\(target, token\\)/g).map(a => a.split(\" \")[2].split(\"(\")[0]);\n\tapps.splice(apps.indexOf(\"autoinstallerInstaller\"), 1);\n\tapps.splice(apps.indexOf(\"installerInstaller\"), 1);\n\tapps.splice(apps.indexOf(\"secondstageInstaller\"), 1);\n\tlet pipeResult = false;\n\ttry {\n\t\tlet ipcPipe = await availableAPIs.createPipe();\n\t\tpipeResult = availableAPIs.listenToPipe(ipcPipe);\n\t\tlet installerCode = \"\";\n\t\tfor (let app of apps) installerCode += `await ${app}(modules.defaultSystem, ${JSON.stringify(await availableAPIs.getProcessToken())});\\n`;\n\t\tawait availableAPIs.runKlvlCode(`(async function() {\n\t\t\ttry {\n\t\t\t\t${files[appIndex]}\n\t\t\t\t${installerCode}\n\t\t\t\tmodules.ipc.send(${JSON.stringify(ipcPipe)}, true);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\tmodules.ipc.send(${JSON.stringify(ipcPipe)}, false);\n\t\t\t}\n\t\t})();`);\n\t\tpipeResult = await pipeResult;\n\t\tawait availableAPIs.closePipe(ipcPipe);\n\t} catch {}\n\tif (!pipeResult) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATE_EXTRA_FAIL\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tfiles.splice(appIndex, 1);\n\tnames.splice(appIndex, 1);\n\tlet installerIndex = names.indexOf(\"// 1\" + \"0\" + \"-ins\" + \"taller.js\");\n\tfiles.splice(installerIndex, 1);\n\tnames.splice(installerIndex, 1);\n\tlet secondStageIndex = names.indexOf(\"// 1\" + \"7\" + \"-instal\" + \"ler-seconds\" + \"tage.js\");\n\tfiles.splice(secondStageIndex, 1);\n\tnames.splice(secondStageIndex, 1);\n\tfor (let file in files) {\n\t\tlet name = names[file].split(\" \").slice(1).join(\" \");\n\t\tlet content = files[file];\n\t\ttry {\n\t\t\tawait availableAPIs.toMyCLI(\"\\t/boot/\" + name + \"\\r\\n\");\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: (await availableAPIs.getSystemMount()) + \"/boot/\" + name,\n\t\t\t\tdata: content\n\t\t\t});\n\t\t} catch {\n\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"UPDATE_BOOT_FAIL\") + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tif (!pargs[\"no-reboot\"]) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RESTARTING\") + \"\\r\\n\");\n\t\ttry {\n\t\t\tawait availableAPIs.shutdown({\n\t\t\t\tisReboot: true,\n\t\t\t\tisKexec: true\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"updateos: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1317","when":1750516195073,"signer":"moduleSigner","critical":false,"signature":"91254d738f5c8a2c70a27ee3938f7b51310995658cd40fedc58d70a0f216146d4e3cda68fde2d7062a98b9a9a448c708a3ed8c344ea968943679cf331b6a6b8b"}}