{"backend":{"files":{"apps":{"adduser.js":"4b2712b740f77efbe4b292b943a2af399a0607662cc632be5fc3913a0aa164fc9b3d3f57f546a61f54e9e1742abd33481522f7941f1ddb70276b750d2b33571f","blockuser.js":"1888009878b84edc422b8be55863c113ba382cf6fdcd6110868792e8a3744f591f157f6cf226644b36088a3b634dc75e3a02a573f8d033d89365883057d874aa","deluser.js":"658f7a0cb914f99abd2f6f43c2208ef666a0485de65391c795bc2176a25a411ea6084b16f76ad8ae22142ef5f73e3d23240aed996e9ddfb823d61f36aaa6533a","lsuser.js":"d1cea016cedb2cd6b548a4a5e53b92b0cb4b92d4b7753381007c1282e9922a7abedd4bb9e219f5e9640f67ccda79a71f8fca5898bb232382ea99ba6cae4bb3a8","passwd.js":"1a6d9be6acdd57176909ea9b4c879d125b7ae8990e2cce46bb2cfb035977d375c3f5b0e082a84029bdf65a3ae482a7f4886d683e4a022694a188f55ea897caf3"}},"permissions":{"apps/adduser.js":{"world":"rx"},"apps/blockuser.js":{"world":"rx"},"apps/deluser.js":{"world":"rx"},"apps/lsuser.js":{"world":"rx"},"apps/passwd.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"4b2712b740f77efbe4b292b943a2af399a0607662cc632be5fc3913a0aa164fc9b3d3f57f546a61f54e9e1742abd33481522f7941f1ddb70276b750d2b33571f":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SET_USER_INFO, SWITCH_USERS_AUTOMATICALLY, FS_LIST_PARTITIONS, FS_READ, FS_WRITE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS, GET_USER_INFO, USER_INFO_OTHERS\n// signature: f7829986c3257136b0b22733d0aa7daf1e86856ea3962980d21e59d5fe080c4c23491393ad2987e711b84dc5c582e47f78c5daff55d04eb1dc3b227ad9fc2f10\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"adduser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (ppos.length < 1) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"ADDUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"ADDUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_SKIP_PASSWD\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_SKIP_HOME\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_HOME\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"ADDUSER_GROUPS\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"NEW_USER_CREATION\")).replace(\"%s\", ppos[0]) + \"\\r\\n\");\n\ttry {\n\t\tlet userData = await availableAPIs.getUserInfo({ desiredUser: ppos[0] });\n\t\tif (userData) throw new Error(\"USERNAME_EXISTS\");\n\t\tlet homeDirectory = pargs[\"home\"] || await availableAPIs.getSystemMount() + \"/home/\" + ppos[0];\n\t\tawait availableAPIs.setUserInfo({\n\t\t\tdesiredUser: ppos[0],\n\t\t\tinfo: {\n\t\t\t\tgroups: [ppos[0], ...(pargs.groups ? (pargs.groups instanceof Array ? pargs.groups : [pargs.groups]) : []) ],\n\t\t\t\thomeDirectory,\n\t\t\t\tsecurityChecks: [],\n\t\t\t\tblankPrivileges: false\n\t\t\t}\n\t\t});\n\t\tif (!pargs[\"skip-home\"]) {\n\t\t\tawait mkrecursive(homeDirectory);\n\t\t\tawait availableAPIs.fs_chown({ path: homeDirectory, newUser: ppos[0] });\n\t\t\tawait availableAPIs.fs_chgrp({ path: homeDirectory, newGrp: ppos[0] });\n\t\t\tawait availableAPIs.fs_chmod({ path: homeDirectory, newPermissions: \"rx\" });\n\t\t}\n\t\tif (pargs[\"skip-passwd\"]) return await availableAPIs.terminate();\n\t\tawait availableAPIs.switchUser(ppos[0]);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_NEW_PROMPT\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_PROMPT\"));\n\tlet str = \"\";\n\tlet stage = 0;\n\tlet password = \"\";\n\tonTermData(async function(e) {\n\t\tif (e == \"\\r\") {\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (stage == 0) {\n\t\t\t\tpassword = str;\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_CONFIRM_PROMPT\"));\n\t\t\t\tstage = 1;\n\t\t\t\tstr = \"\";\n\t\t\t} else if (stage == 1) {\n\t\t\t\tstage = 2;\n\t\t\t\tif (str == password) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\tcspArgument: key\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait availableAPIs.setOwnSecurityChecks({\n\t\t\t\t\t\t\tchecks: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"PASSWD_FEEDBACK\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t} else {\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"adduser: \" + await availableAPIs.lookupLocale(\"PASSWD_MISMATCH\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(\"*\");\n\t\t\t}\n\t\t}\n\t});\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\nasync function mkrecursive(dir) {\n\tlet slices = dir.split(\"/\");\n\tfor (let i = 2; i <= slices.length; i++) {\n\t\tlet browse = await availableAPIs.fs_ls({ path: slices.slice(0, i - 1).join(\"/\") });\n\t\tif (!browse.includes(slices[i - 1])) await availableAPIs.fs_mkdir({ path: slices.slice(0, i).join(\"/\") });\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","1888009878b84edc422b8be55863c113ba382cf6fdcd6110868792e8a3744f591f157f6cf226644b36088a3b634dc75e3a02a573f8d033d89365883057d874aa":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, SWITCH_USERS_AUTOMATICALLY\n// signature: 3780c35fff70105c23bb593dee07dfe6e26dd1fa344b746d9ab57bed3adf9e7234ad5a312a3d69e96bb73ffefe49c1aa71dfedd617f5aa8f90cdc2a6b6ec0b2f\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"blockuser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (pargs.help) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BLOCKUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"BLOCKUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\ttry {\n\t\tif (ppos[0]) await availableAPIs.switchUser(ppos[0]);\n\t\tawait availableAPIs.setOwnSecurityChecks({ checks: [] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"blockuser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","658f7a0cb914f99abd2f6f43c2208ef666a0485de65391c795bc2176a25a411ea6084b16f76ad8ae22142ef5f73e3d23240aed996e9ddfb823d61f36aaa6533a":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SET_USER_INFO, FS_LIST_PARTITIONS, FS_READ, FS_BYPASS_PERMISSIONS, FS_REMOVE, GET_USER_INFO, USER_INFO_OTHERS\n// signature: 59542039e374b44ffad61e58430b261ae72898933bc0ece81be38e246d010778008a93b44be3ba671af3486e9447fb6e6b8599f82833a5241d61849eb978e96f\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"deluser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\tif (ppos.length < 1) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DELUSER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DELUSER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"DELUSER_HOMEDIR\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"deluser: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"OLD_USER_DELETION\")).replace(\"%s\", ppos[0]) + \"\\r\\n\");\n\ttry {\n\t\tlet userInfo = await availableAPIs.getUserInfo({ desiredUser: ppos[0] });\n\t\tif (!userInfo) throw new Error(\"ACCESS_FN_FAIL\");\n\t\tawait availableAPIs.setUserInfo({\n\t\t\tdesiredUser: ppos[0],\n\t\t\tinfo: undefined\n\t\t})\n\t\tif (pargs.homedir) await recursiveRemove(userInfo.homeDirectory);\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"deluser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\treturn await availableAPIs.terminate();\n})();\n\nasync function recursiveRemove(path) {\n\tlet dirList = await availableAPIs.fs_ls({ path });\n\tfor (let fileIndex in dirList) {\n\t\tlet file = dirList[fileIndex];\n\t\tif (await availableAPIs.fs_isDirectory({ path: path + \"/\" + file })) await recursiveRemove(path + \"/\" + file);\n\t\telse await availableAPIs.fs_rm({ path: path + \"/\" + file });\n\t}\n\tawait availableAPIs.fs_rm({ path });\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","d1cea016cedb2cd6b548a4a5e53b92b0cb4b92d4b7753381007c1282e9922a7abedd4bb9e219f5e9640f67ccda79a71f8fca5898bb232382ea99ba6cae4bb3a8":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_USER_LIST\n// signature: 94004758cccae4e963112a958b42db7107a34c719087779e10a7422c3f4bac0ce42676231a317c961cf074d8b3d521c452cf7274a556732885e61eaa74abb5bd\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"lsuser: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tfor (let user of await availableAPIs.getUsers()) await availableAPIs.toMyCLI(JSON.stringify(user) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"lsuser: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\treturn await availableAPIs.terminate();\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","1a6d9be6acdd57176909ea9b4c879d125b7ae8990e2cce46bb2cfb035977d375c3f5b0e082a84029bdf65a3ae482a7f4886d683e4a022694a188f55ea897caf3":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SET_SECURITY_CHECKS, CSP_OPERATIONS, SWITCH_USERS_AUTOMATICALLY\n// signature: 0c0ddd59c4750cf1ab93732f6e012c5caa351367977a0e477fc7e20d1f40d5a492b56ac1f4b440e95106573c128bcd810530e12eee1ac2cfeb8c4189bd21150e\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"passwd: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (exec_args[0]) {\n\t\ttry {\n\t\t\tawait availableAPIs.switchUser(exec_args[0]);\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\treturn await availableAPIs.terminate();\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_NEW_PROMPT\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_2FACTOR_LOSS_WARN\") + \"\\r\\n\");\n\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_PROMPT\"));\n\tlet str = \"\";\n\tlet stage = 0;\n\tlet password = \"\";\n\tonTermData(async function(e) {\n\t\tif (e == \"\\r\") {\n\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (stage == 0) {\n\t\t\t\tpassword = str;\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PASSWD_CONFIRM_PROMPT\"));\n\t\t\t\tstage = 1;\n\t\t\t\tstr = \"\";\n\t\t\t} else if (stage == 1) {\n\t\t\t\tstage = 2;\n\t\t\t\tif (str == password) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet salt = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"random\",\n\t\t\t\t\t\t\tcspArgument: new Uint8Array(64)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\tlet key = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(password),\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\", \"deriveKey\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet derived = new Uint8Array(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\tsalt: salt,\n\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbaseKey: key,\n\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\tcspArgument: key\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait availableAPIs.setOwnSecurityChecks({\n\t\t\t\t\t\t\tchecks: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"pbkdf2\",\n\t\t\t\t\t\t\t\t\thash: u8aToHex(derived),\n\t\t\t\t\t\t\t\t\tsalt: u8aToHex(salt)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(\"PASSWD_FEEDBACK\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t} else {\n\t\t\t\t\tawait availableAPIs.toMyCLI(\"passwd: \" + await availableAPIs.lookupLocale(\"PASSWD_MISMATCH\") + \"\\r\\n\");\n\t\t\t\t\tawait availableAPIs.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(\"*\");\n\t\t\t}\n\t\t}\n\t});\n})();\n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1318","when":1750516408973,"signer":"moduleSigner","critical":false,"signature":"461cdc6885bdd10dadf3ca45d0e8290822e94878f670faec799527ff79cc709766cff44f8367c1d8ce950ced5271b99e98c4b7d9e15bc8b06920c5c9867e449a"}}