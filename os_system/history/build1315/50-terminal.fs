{"backend":{"files":{"apps":{"batteryinfo.js":"7867e16e3fcf84246e3aa2cce72fd7bb6f637afd82c79177ee5dfc7370848875283ef0062cfbcf7c5e670e2a4e6b2f0789e0340956b594a85b4f72ff32353aba","cat.js":"4e40d29360162132aba58a19cb41ca684a89673bb891dd6af4c8f4098ecc5461a0393160c0b268ec659483108f98f4f56644ac68a5441401e249c41f85b1e956","chgrp.js":"afdbeda07dbf814c9b2c52da02a0144608d1054746e57afbd943e0c6c3f66730aa3f6dd74ea47141d7d94aad171df3161a555ae3dfe10d8ba17918c789c30a5b","chmod.js":"3b299c6605cb2bcfef5c3cac424a5970000bdcd8df82631d467e889abe31b2fdef3f01098b14b674e6088482d3addc2d4ab2023d26f8c8488c627821933f37f2","chown.js":"ad15901f453029ad81805271582237a4542405cebb8afb1cc7d91b9f3c031be0792cb53e499cf1d24647838dbaa6d799d23daeb90ce1e0fdf2652b193ea88c8d","cp.js":"19f7e753d511fff37dc9f8e541da047c41cbc8126ae8a872aa7ee4647ab1a0cc16361a209628e348c68239d74c8e734dbbf9c78954fdae2624892ca9383a3658","date.js":"36eec90057c6323d1961eafcf36eac100a90c87ff26443b4372ac3a017353b977f4f760089cbb013223dfce3c8a8b73913dd8cc4e4dcc43649e3068b839533aa","diff.js":"c0b8b571ead28f9205914fd2f5050b12bb0b9a3f43a23af039f47810b819bb284b098775504905b40f468c70738bbcc01ee6bddb0c0942d79aad0d8627aad088","links":{"terminal.lnk":"f7c4b987719a48d7501016f88828e368b796864a1e77738859e1328ea7230b1b256b7acf46ef681182063e724f85a6b5fe48348a5478e1e7e35a5a6e44bc9fdd"},"ls.js":"81de70c7b5c3fd6bf434a4636a0eef36bec05270e9b385e62ef932434ab9c33ee75ca5d6bcdd4333b96d6276271da798b74f44e4238fbacd051224f48d780664","mkdir.js":"82780715f9cacacbf70bc781d3e562cdea206dacab330544b542d2dbd73bc861d1eaeaac82f1729cde920f5b9a8d3d4ffaa7e602e0e0ca358e9aa298be61e86b","patch.js":"8cdd58091805025979e3005f10b384ae310aea6667a4a662817ecf133ceb1133534f7ab74aa0230f23d27453b0f227355eb3d5120da46e766776bba6915ba80c","power.js":"3ac013414d0cf3b79479c5497ce4774a17cbabfc0dd8c4e9be0194f3e9b36b1785b881671fe718b9327231e5eb5eadb5f374a43c2c586db8181f4a400b1b0b9b","rm.js":"955c45fcff8eeba5c2d164e2f88e290b3d13336c625c5f2fd68606663daa45f4b8e4ad23d968f949a9503f90cd9c41bf1f077f65933a342067e3e16d89765daf","runKlvlCode.js":"0f9a487a9a3cf44f466ad15614e58d41fe67eb23810dbf2092e47d2ddf7fa39b8e4425d0296d1874e1e03efc9631e9f371046ccf9e383ab44c16c7dd1fc8e1c8","terminal.js":"9911631a8bdd33688daf1e8f4cbbb669aeb101616ed76f79222ae2d30cf64effaa599a35f547756437d87a448b33d15344902cf9f1f5497367c0ddff61497c9e","uptime.js":"72f16af65c74c614ee2bdb3724a45ed2f5138d8bdaab1618259ea53937814a91093bfea87bd3a3e7085a357bf2945414bafebc5e6db3f357ad79e6c7a994802e","write.js":"816034755e3ec3177ca879c9d486bb65612ff61b027a28d81a3ae4fb4c046dedf734cc5af5aa06d9084ea81efb3bce6eccf73d3e3615f442ca07a7f0cfb7284e"}},"permissions":{"apps/batteryinfo.js":{"world":"rx"},"apps/cat.js":{"world":"rx"},"apps/chgrp.js":{"world":"rx"},"apps/chmod.js":{"world":"rx"},"apps/chown.js":{"world":"rx"},"apps/cp.js":{"world":"rx"},"apps/date.js":{"world":"rx"},"apps/diff.js":{"world":"rx"},"apps/links/terminal.lnk":{"world":"rx"},"apps/links/":{"world":"rx"},"apps/ls.js":{"world":"rx"},"apps/mkdir.js":{"world":"rx"},"apps/patch.js":{"world":"rx"},"apps/power.js":{"world":"rx"},"apps/rm.js":{"world":"rx"},"apps/runKlvlCode.js":{"world":"rx"},"apps/terminal.js":{"world":"rx"},"apps/uptime.js":{"world":"rx"},"apps/write.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"7867e16e3fcf84246e3aa2cce72fd7bb6f637afd82c79177ee5dfc7370848875283ef0062cfbcf7c5e670e2a4e6b2f0789e0340956b594a85b4f72ff32353aba":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_BATTERY_STATUS\n// signature: 25623e58d8aa9521df23a5b9d176698720f299c9b88b35aef5797258e95c4feda4a221268c464c3e5e8ca80478805f79530090bcefbc24bc526f86c18402e963\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"batteryinfo: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n    \n\ttry {\n\t\tlet batteryStatus = await availableAPIs.batteryStatus();\n\t\tif (exec_args[0] == \"--robot\") await availableAPIs.toMyCLI(JSON.stringify(batteryStatus, null, \"\\t\").replaceAll(\"\\n\", \"\\r\\n\") + \"\\r\\n\");\n\t\telse await availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"BATTERY_STATUS_\" + (batteryStatus.charging ? \"CHARGING\" : \"DISCHARGING\")))\n\t\t\t.replace(\"%s\", (batteryStatus.level * 100).toFixed(2))\n\t\t\t.replace(\"%s\", await availableAPIs.ufTimeInc([\n\t\t\t\t(batteryStatus.charging ? batteryStatus.chargingTime : batteryStatus.dischargingTime) * 1000\n\t\t\t])) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"batteryinfo: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); ","4e40d29360162132aba58a19cb41ca684a89673bb891dd6af4c8f4098ecc5461a0393160c0b268ec659483108f98f4f56644ac68a5441401e249c41f85b1e956":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 1298e2f8c6a24ccaab0698cef4915b77c01c7b41c57c48fbe21c0861d5dbe4a28e84caab80f03cdfbe103396438a91ca37e2d17c69faa7ae8ab7cf20e28d1fba\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"cat: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CAT_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CAT_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"cat: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tfor (let file of exec_args) {\n\t\ttry {\n\t\t\tlet data = await availableAPIs.fs_read({ path: file });\n\t\t\tawait availableAPIs.toMyCLI(data);\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"cat: \" + file + \": \" + await availableAPIs.lookupLocale(e.message));\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","afdbeda07dbf814c9b2c52da02a0144608d1054746e57afbd943e0c6c3f66730aa3f6dd74ea47141d7d94aad171df3161a555ae3dfe10d8ba17918c789c30a5b":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: 490947f0fa45f181e2e5c40ac7b6d9e267202d92445e97f63d84134bdac0e2bb22ab7483d6973ee93bd28aefacbcc88d49f4479c1069d619af5c253889b3a82e\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chgrp: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHGRP_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHGRP_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chgrp: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chgrp({ path: exec_args[1], newGrp: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chgrp: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message)) + \"\\r\\n\";\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","3b299c6605cb2bcfef5c3cac424a5970000bdcd8df82631d467e889abe31b2fdef3f01098b14b674e6088482d3addc2d4ab2023d26f8c8488c627821933f37f2":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: 69b5c2c8cfbac22aeb077b947a1f3e218d22cb3ed347aecff28c91c5ea64513089dd2a30349ebeaf1783778408d3ba39ec0e36aaa6fecdc82296ada698f23777\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chmod: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHMOD_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHMOD_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CHMOD_MODE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CHMOD_MODE_CONVERT\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chmod: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chmod({ path: exec_args[1], newPermissions: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chmod: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","ad15901f453029ad81805271582237a4542405cebb8afb1cc7d91b9f3c031be0792cb53e499cf1d24647838dbaa6d799d23daeb90ce1e0fdf2652b193ea88c8d":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: 651ad07edaf8b784f173991a76d0ed12ca8d48fd50af5b147f28cdd6bef70aa2f09258320b8767e5bf0e3fdb3c6bde9e7af9f4f2cd57bdf9b22acc8578396528\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chown: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHOWN_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHOWN_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chown: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chown({ path: exec_args[1], newUser: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chown: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","19f7e753d511fff37dc9f8e541da047c41cbc8126ae8a872aa7ee4647ab1a0cc16361a209628e348c68239d74c8e734dbbf9c78954fdae2624892ca9383a3658":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION\n// signature: dfaa97925ba2c34a795381d7e736348d81bd6a3d3695bc98205b9251b5c612039a90e7e2a2debe3171cee67282407d3827e4155f8419a4f55c92210cde8fd84b\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"cp: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CP_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CP_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_RECURSIVE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_FORCE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CP_PERMISSIONS_OPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet recursive = exec_args.includes(\"--recursive\");\n\tlet force = exec_args.includes(\"--force\");\n\tlet permissions = exec_args.includes(\"--permissions\");\n\tif (recursive) exec_args.splice(exec_args.indexOf(\"--recursive\"), 1);\n\tif (force) exec_args.splice(exec_args.indexOf(\"--force\"), 1);\n\tif (permissions) exec_args.splice(exec_args.indexOf(\"--permissions\"), 1);\n\tif (exec_args.length != 2) {\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tif (recursive) await recursiveCopy(exec_args[0], exec_args[1], force, permissions);\n\telse {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: exec_args[1],\n\t\t\t\tdata: await availableAPIs.fs_read({ path: exec_args[0] })\n\t\t\t});\n\t\t\tif (permissions) {\n\t\t\t\tlet originalPermissions = await availableAPIs.fs_permissions({ path: exec_args[0] });\n\t\t\t\tawait availableAPIs.fs_chmod({ path: exec_args[1], newPermissions: originalPermissions.world });\n\t\t\t\tawait availableAPIs.fs_chgrp({ path: exec_args[1], newGrp: originalPermissions.group });\n\t\t\t\tawait availableAPIs.fs_chown({ path: exec_args[1], newUser: originalPermissions.user });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"cp: \" + exec_args[0] + \" -> \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\n\nasync function recursiveCopy(source, destination, force, permissions) {\n\ttry {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_mkdir({ path: destination });\n\t\t} catch {}\n\t\tfor (let sourceFile of await availableAPIs.fs_ls({ path: source })) {\n\t\t\tlet destinationFile = destination + \"/\" + sourceFile;\n\t\t\ttry {\n\t\t\t\tif (await availableAPIs.fs_isDirectory({ path: source + \"/\" + sourceFile }))\n\t\t\t\t\tawait recursiveCopy(source + \"/\" + sourceFile, destinationFile, force, permissions);\n\t\t\t\telse {\n\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\tpath: destinationFile,\n\t\t\t\t\t\tdata: await availableAPIs.fs_read({ path: source + \"/\" + sourceFile })\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (permissions) {\n\t\t\t\t\tlet originalPermissions = await availableAPIs.fs_permissions({ path: source + \"/\" + sourceFile });\n\t\t\t\t\tawait availableAPIs.fs_chmod({ path: destinationFile, newPermissions: originalPermissions.world });\n\t\t\t\t\tawait availableAPIs.fs_chgrp({ path: destinationFile, newGrp: originalPermissions.group });\n\t\t\t\t\tawait availableAPIs.fs_chown({ path: destinationFile, newUser: originalPermissions.owner });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tawait availableAPIs.toMyCLI(\"cp: \" + source + \"/\" + sourceFile + \" -> \" + destinationFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\tif (!force) return await availableAPIs.terminate();\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + source + \" -> \" + destination + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\tif (!force) return await availableAPIs.terminate();\n\t}\n}\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","36eec90057c6323d1961eafcf36eac100a90c87ff26443b4372ac3a017353b977f4f760089cbb013223dfce3c8a8b73913dd8cc4e4dcc43649e3068b839533aa":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: NONE\n// signature: fc215ffb7bf54e88bdf363978f0d6259a770b6570dcb816fc8ae5ff6b149a1405d63deece1caaa5cb8edee3081a8fa94ac06251419891f6d6c9f36c34f53a33a\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tawait availableAPIs.toMyCLI(new Date().toString() + \"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","c0b8b571ead28f9205914fd2f5050b12bb0b9a3f43a23af039f47810b819bb284b098775504905b40f468c70738bbcc01ee6bddb0c0942d79aad0d8627aad088":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, PATCH_DIFF\n// signature: 5d5e2953e9a6c5ce8f104b9000a0b45da197dbeadbffc4965dfb86f9da185940dbae56f6b7be3cb8fd6df3f85c1be6dc4f226561042de71e6c6d450736534ddf\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"diff: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DIFF_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DIFF_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.length != 3) {\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: exec_args[2],\n\t\t\tdata: JSON.stringify(await availableAPIs.patchDiff({\n\t\t\t\toperation: \"calcPatch\",\n\t\t\t\targs: [ await availableAPIs.fs_read({ path: exec_args[0] }), await availableAPIs.fs_read({ path: exec_args[1] }) ]\n\t\t\t}))\n\t\t})\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","f7c4b987719a48d7501016f88828e368b796864a1e77738859e1328ea7230b1b256b7acf46ef681182063e724f85a6b5fe48348a5478e1e7e35a5a6e44bc9fdd":"{\"path\":\"system/apps/terminal.js\",\"localeReferenceName\":\"REAL_TERMINAL_NAME\"}","81de70c7b5c3fd6bf434a4636a0eef36bec05270e9b385e62ef932434ab9c33ee75ca5d6bcdd4333b96d6276271da798b74f44e4238fbacd051224f48d780664":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, FS_LIST_PARTITIONS\n// signature: aad63fa014b881dac52d21c5fedf6d9bf9c8ce456778d40083b9263eb7d70320b416b4f2401c452cca78a6c9cffd8e3b69d7977418e7f82ab1deb823f734c4fb\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"ls: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_DESCRIPTION\") + \"\\r\\n\");\n\t\tlet sysmount = await availableAPIs.getSystemMount();\n\t\tlet systemLocale = await availableAPIs.lookupLocale(\"MOUNTPOINT_SYSTEM\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_MOUNTPOINT_LIST\") + (await availableAPIs.fs_mounts()).map(a => sysmount == a ? (a + \" [\" + systemLocale + \"]\") : a).join(\", \") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"ls: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tfor (let file of exec_args) {\n\t\ttry {\n\t\t\tlet data = await availableAPIs.fs_ls({ path: file });\n\t\t\tawait availableAPIs.toMyCLI(data.map(a => JSON.stringify(a)).join(\"\\r\\n\") + \"\\r\\n\");\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"ls: \" + file + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","82780715f9cacacbf70bc781d3e562cdea206dacab330544b542d2dbd73bc861d1eaeaac82f1729cde920f5b9a8d3d4ffaa7e602e0e0ca358e9aa298be61e86b":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_WRITE, FS_BYPASS_PERMISSIONS\n// signature: b3469d74849df7a35f2273d18ccddc670ad8aa4ab802b50f7282c44a82d583b9b0384abfcca58a095ddf85f94edc828df62a0f2aa386d2bbac7f7616b6615bb5\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"mkdir: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"MKDIR_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"MKDIR_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"mkdir: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_mkdir({\n\t\t\tpath: exec_args[0]\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"mkdir: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","8cdd58091805025979e3005f10b384ae310aea6667a4a662817ecf133ceb1133534f7ab74aa0230f23d27453b0f227355eb3d5120da46e766776bba6915ba80c":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, PATCH_DIFF\n// signature: 2619599f74ca07c6fe07681267075be7bc7d4c5d5bd5da446e2aaee37c34b75664958976e0a58245284970e8ff2fec6822650dcbb1f80b91ae006191888c5f5b\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"patch: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PATCH_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PATCH_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.length != 3) {\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n    try {\n        await availableAPIs.fs_write({\n            path: exec_args[2],\n            data: (await availableAPIs.patchDiff({\n                operation: \"applyPatch\",\n                args: [ await availableAPIs.fs_read({ path: exec_args[0] }), JSON.parse(await availableAPIs.fs_read({ path: exec_args[1] })) ]\n            })).join(\"\")\n        })\n    } catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n    }\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","3ac013414d0cf3b79479c5497ce4774a17cbabfc0dd8c4e9be0194f3e9b36b1785b881671fe718b9327231e5eb5eadb5f374a43c2c586db8181f4a400b1b0b9b":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SYSTEM_SHUTDOWN\n// signature: 6d8ddb3b1cafa79317a6a0181d708854d17a9c08e4b3f679fe89d6eb6b41dde0449c07230f85c4c65113b30c8f9e08b66ab70be4ec3da2b311c7bf19b5d5a8fa\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"power: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.attachCLI();\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (pargs.help) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"POWER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"POWER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"POWER_FORCE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"POWER_KEXEC\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: ppos[0] == \"reboot\" || ppos[0] == \"r\" || ppos[0] == \"restart\" || ppos[0] == \"kexec\" || ppos[0] == \"k\" || pargs.kexec,\n\t\t\tisKexec: pargs.kexec || ppos[0] == \"kexec\" || ppos[0] == \"k\",\n\t\t\tforce: pargs.force\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"power: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","955c45fcff8eeba5c2d164e2f88e290b3d13336c625c5f2fd68606663daa45f4b8e4ad23d968f949a9503f90cd9c41bf1f077f65933a342067e3e16d89765daf":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION, FS_REMOVE\n// signature: 527ba2497a2b5b875f27d84c0d8367b56792c4939cc984b7eda0c73ca930e636204124eb319fcfeb5af262dbfd5f5ab2f5b58c5a27c85f65eaf254d481cf3d60\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"rm: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RM_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RM_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_RECURSIVE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_FORCE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet recursive = exec_args.includes(\"--recursive\");\n\tlet force = exec_args.includes(\"--force\");\n\tif (recursive) exec_args.splice(exec_args.indexOf(\"--recursive\"), 1);\n\tif (force) exec_args.splice(exec_args.indexOf(\"--force\"), 1);\n\tif (exec_args.length != 1) {\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tif (recursive) await recursiveRemove(exec_args[0], force);\n\telse {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_rm({ path: exec_args[0] });\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"rm: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\n\nasync function recursiveRemove(target, force) {\n\ttry {\n\t\tfor (let targetFile of await availableAPIs.fs_ls({ path: target })) {\n\t\t\ttargetFile = target + \"/\" + targetFile;\n\t\t\ttry {\n\t\t\t\tif (await availableAPIs.fs_isDirectory({ path: targetFile })) await recursiveRemove(targetFile, force);\n\t\t\t\telse await availableAPIs.fs_rm({ path: targetFile });\n\t\t\t} catch (e) {\n\t\t\t\tawait availableAPIs.toMyCLI(\"rm: \" + targetFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\tif (!force) return await availableAPIs.terminate();\n\t\t\t}\n\t\t}\n\t\tawait availableAPIs.fs_rm({ path: target });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + target + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\tif (!force) return await availableAPIs.terminate();\n\t}\n}\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","0f9a487a9a3cf44f466ad15614e58d41fe67eb23810dbf2092e47d2ddf7fa39b8e4425d0296d1874e1e03efc9631e9f371046ccf9e383ab44c16c7dd1fc8e1c8":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, RUN_KLVL_CODE\n// signature: 6a515507ed34c18a899a4897fac1a8d93ef8224a7b20d72746054d6d37148be9e4d862fa6e4d75c7a16df3030fcdcf4618ff058436e05ac38e519a6d7a4765a0\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"runKlvlCode: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RKL_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RKL_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"runKlvlCode: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.toMyCLI(JSON.stringify(await availableAPIs.runKlvlCode(await availableAPIs.fs_read({ path: exec_args[0] }))) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"runKlvlCode: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","9911631a8bdd33688daf1e8f4cbbb669aeb101616ed76f79222ae2d30cf64effaa599a35f547756437d87a448b33d15344902cf9f1f5497367c0ddff61497c9e":"// =====BEGIN MANIFEST=====\n// allow: GET_LOCALE, FS_LIST_PARTITIONS, FS_READ, MANAGE_TOKENS, ELEVATE_PRIVILEGES, FS_BYPASS_PERMISSIONS, START_TASK, START_BACKGROUND_TASK, CLI_MODIFICATIONS, GET_BUILD, LIST_TASKS, TASK_BYPASS_PERMISSIONS, CSP_OPERATIONS\n// link: lrn:REAL_TERMINAL_NAME\n// signer: automaticSigner\n// signature: 56e2eae5a89c3506039260109c510622a5f5a697ded91b5ad7e3e8606e5882d8feedd374478195be8d2d467d1e7931d7df953f9fa1992475ef11345348a7d340\n// =====END MANIFEST=====\nlet user_spawn_token = null;\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"GET_LOCALE\", \"FS_LIST_PARTITIONS\", \"FS_READ\", \"MANAGE_TOKENS\", \"ELEVATE_PRIVILEGES\", \"START_TASK\", \"CLI_MODIFICATIONS\", \"GET_BUILD\", \"LIST_TASKS\", \"CSP_OPERATIONS\" ];\n\tprivileges = await availableAPIs.getPrivileges();\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\tawait availableAPIs.fromMyCLI();\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait window.availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"REAL_TERMINAL_NAME\"));\n\t\n\tfunction parse_cmdline(cmdline) {\n\t\tvar re_next_arg = /^\\s*((?:(?:\"(?:\\\\.|[^\"])*\")|(?:'[^']*')|\\\\.|\\S)+)\\s*(.*)$/;\n\t\tvar next_arg = ['', '', cmdline];\n\t\tvar args = [];\n\t\twhile (next_arg = re_next_arg.exec(next_arg[2])) {\n\t\t\tvar quoted_arg = next_arg[1];\n\t\t\tvar unquoted_arg = \"\";\n\t\t\twhile (quoted_arg.length > 0) {\n\t\t\t\tif (/^\"/.test(quoted_arg)) {\n\t\t\t\t\tvar quoted_part = /^\"((?:\\\\.|[^\"])*)\"(.*)$/.exec(quoted_arg);\n\t\t\t\t\tunquoted_arg += quoted_part[1].replace(/\\\\(.)/g, \"$1\");\n\t\t\t\t\tquoted_arg = quoted_part[2];\n\t\t\t\t} else if (/^'/.test(quoted_arg)) {\n\t\t\t\t\tvar quoted_part = /^'([^']*)'(.*)$/.exec(quoted_arg);\n\t\t\t\t\tunquoted_arg += quoted_part[1];\n\t\t\t\t\tquoted_arg = quoted_part[2];\n\t\t\t\t} else if (/^\\\\/.test(quoted_arg)) {\n\t\t\t\t\tunquoted_arg += quoted_arg[1];\n\t\t\t\t\tquoted_arg = quoted_arg.substring(2);\n\t\t\t\t} else {\n\t\t\t\t\tunquoted_arg += quoted_arg[0];\n\t\t\t\t\tquoted_arg = quoted_arg.substring(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\targs[args.length] = unquoted_arg;\n\t\t}\n\t\treturn args;\n\t}\n\n\tlet str = \"\";\n\tlet default_user = await window.availableAPIs.getUser();\n\tlet defaultPath = await availableAPIs.getSystemMount() + \"/apps\";\n\tlet pathsForBinaries = [ defaultPath ];\n\tlet otherProcessAttached = false;\n\tlet graphic = false;\n\tlet su_stage = -1;\n\tlet suSession = null;\n\tlet hideInputMask = \"\";\n\tlet hideInput = false;\n\t\n\tasync function systemVersion() {\n\t\tawait availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"TERMINAL_INVITATION\")).replace(\"%s\", (await window.availableAPIs.getVersion())) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"SYSTEM_BUILT_AT\")).replace(\"%s\", (new Date(await window.availableAPIs.getBuildTime())).toISOString()) + \"\\r\\n\");\t\n\t}\n\n\tawait systemVersion();\n\tawait availableAPIs.toMyCLI(\"\\r\\n\" + default_user + (privileges.includes(\"FS_BYPASS_PERMISSIONS\") ? \"#\" : \"$\") + \" \");\n\t\n\tonTermData(async function self(e, why) {\n\t\tif (otherProcessAttached) return await availableAPIs.typeIntoOtherCLI({\n\t\t\ttaskId: otherProcessAttached,\n\t\t\ttext: e,\n\t\t\thuman: true\n\t\t});\n\t\tif (e == \"\\r\") {\n\t\t\tif (why != \"su\") await availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (su_stage > -1) {\n\t\t\t\tif (su_stage == 0) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsuSession = await availableAPIs.automatedLogonCreate({ desiredUser: str });\n\t\t\t\t\t\tsu_stage = 1;\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tsu_stage = -1;\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tstr = \"\";\n\t\t\t\t}\n\t\t\t\twhile (su_stage >= 1) {\n\t\t\t\t\totherProcessAttached = true;\n\t\t\t\t\tif (su_stage == 2) {\n\t\t\t\t\t\tlet prompt = await availableAPIs.automatedLogonGet(suSession);\n\t\t\t\t\t\tif (prompt.type == \"zkpp_password\") {\n\t\t\t\t\t\t\tlet passwordAsKey = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(str),\n\t\t\t\t\t\t\t\t\talgorithm: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\"]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tlet rngSeed = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\t\tsalt: new Uint8Array(32),\n\t\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbaseKey: passwordAsKey,\n\t\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\t\tcspArgument: passwordAsKey\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\t\tlet hexToU8A = (hex) => Uint8Array.from(hex.match(/.{1,2}/g).map(a => parseInt(a, 16)));\n\t\t\t\t\t\t\tawait availableAPIs.automatedLogonInput({ session: suSession, input: u8aToHex(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"tweetnacl\",\n\t\t\t\t\t\t\t\toperation: \"sign\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\tsecretKey: (await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\t\t\tcspProvider: \"tweetnacl\",\n\t\t\t\t\t\t\t\t\t\toperation: \"deriveKey\",\n\t\t\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\t\t\ttype: \"sign\",\n\t\t\t\t\t\t\t\t\t\t\tseed: new Uint8Array(rngSeed)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})).secretKey,\n\t\t\t\t\t\t\t\t\tmessage: hexToU8A(prompt.challenge)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}))});\n\t\t\t\t\t\t} else await availableAPIs.automatedLogonInput({ session: suSession, input: str });\n\t\t\t\t\t}\n\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\thideInput = false;\n\t\t\t\t\thideInputMask = \"\";\n\t\t\t\t\tlet prompt = await availableAPIs.automatedLogonGet(suSession);\n\t\t\t\t\tawait availableAPIs.toMyCLI(prompt.message);\n\t\t\t\t\tsu_stage = 2;\n\t\t\t\t\tif (prompt.success != \"intermediate\") {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\t\t\t\tsu_stage = -1;\n\t\t\t\t\t\tif (prompt.success) {\n\t\t\t\t\t\t\tuser_spawn_token = prompt.token;\n\t\t\t\t\t\t\tlet processToken = await availableAPIs.getProcessToken();\n\t\t\t\t\t\t\tawait availableAPIs.setProcessToken(await availableAPIs.forkToken(user_spawn_token));\n\t\t\t\t\t\t\tprivileges = await availableAPIs.getPrivileges();\n\t\t\t\t\t\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\t\t\t\t\t\t\tawait availableAPIs.fromMyCLI();\n\t\t\t\t\t\t\t\treturn await availableAPIs.terminate();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tawait availableAPIs.revokeToken(processToken);\n\t\t\t\t\t\t\tawait availableAPIs.automatedLogonDelete(suSession);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (prompt.wantsUserInput || prompt.type == \"informative\") {\n\t\t\t\t\t\tif (prompt.wantsUserInput) await availableAPIs.toMyCLI(\": \");\n\t\t\t\t\t\thideInput = prompt.type == \"password\" || prompt.type == \"informative\" || prompt.type == \"zkpp_password\";\n\t\t\t\t\t\thideInputMask = (prompt.type == \"password\" || prompt.type == \"zkpp_password\") ? \"*\" : \"\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (su_stage != -1) await availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet cmdline = [];\n\t\t\ttry {\n\t\t\t\tcmdline = parse_cmdline(str);\n\t\t\t} catch {\n\t\t\t\tawait availableAPIs.toMyCLI(\"> \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstr = \"\";\n\t\t\tif (cmdline[0] == \"sugraph\") {\n\t\t\t\totherProcessAttached = true;\n\t\t\t\tlet authui = await availableAPIs.consentGetToken({\n\t\t\t\t\tintent: await availableAPIs.lookupLocale(\"REAL_TERMINAL_INTENT\"),\n\t\t\t\t\tname: await availableAPIs.lookupLocale(\"REAL_TERMINAL_NAME\"),\n\t\t\t\t\tdesiredUser: cmdline[1]\n\t\t\t\t});\n\t\t\t\tif (authui) {\n\t\t\t\t\tuser_spawn_token = authui;\n\t\t\t\t\tlet processToken = await availableAPIs.getProcessToken();\n\t\t\t\t\tawait availableAPIs.setProcessToken(await availableAPIs.forkToken(user_spawn_token));\n\t\t\t\t\tprivileges = await availableAPIs.getPrivileges();\n\t\t\t\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.fromMyCLI();\n\t\t\t\t\t\treturn await availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.revokeToken(processToken);\n\t\t\t\t} else await availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\totherProcessAttached = false;\n\t\t\t} else if (cmdline[0] == \"su\") {\n\t\t\t\tif (!cmdline[1]) {\n\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"USERNAME\") + \": \");\n\t\t\t\t\treturn su_stage = 0;\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsuSession = await availableAPIs.automatedLogonCreate({ desiredUser: cmdline[1] });\n\t\t\t\t\t\tsu_stage = 1;\n\t\t\t\t\t\treturn self(\"\\r\", \"su\");\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (cmdline[0] == \"graphic\") {\n\t\t\t\tif (!cmdline[1]) await availableAPIs.toMyCLI(\"graphic: \" + graphic + \"\\r\\n\");\n\t\t\t\telse {\n\t\t\t\t\tgraphic = cmdline[1] == \"true\" || cmdline[1] == \"on\" || cmdline[1] == \"1\" || cmdline[1] == \"yes\" || cmdline[1] == \"enable\";\n\t\t\t\t}\n\t\t\t} else if (cmdline[0] == \"pushpath\") {\n\t\t\t\tif (cmdline[1]) pathsForBinaries.push(cmdline[1]);\n\t\t\t} else if (cmdline[0] == \"resetpath\") {\n\t\t\t\tpathsForBinaries = [ defaultPath ];\n\t\t\t} else if (cmdline[0] == \"lspath\") {\n\t\t\t\tawait availableAPIs.toMyCLI(pathsForBinaries.map(a => JSON.stringify(a)).join(\", \") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"REAL_TERMINAL_DEFAULT_PATH_FIELD\")).replace(\"%s\", JSON.stringify(defaultPath)) + \"\\r\\n\");\n\t\t\t} else if (cmdline[0] == \"clear\") await availableAPIs.clearMyCLI();\n\t\t\telse if (cmdline[0] == \"exit\") await availableAPIs.terminate();\n\t\t\telse if (cmdline[0] == \"ver\") await systemVersion();\n\t\t\telse if (cmdline[0] == \"help\") {\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_BUILTIN_LIST\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_VER_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_HELP_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_CLEAR_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_SUGRAPH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_SU_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_GRAPHIC_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_PUSHPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_RESETPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_LSPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_EXIT_USEDESC\") + \"\\r\\n\");\n\t\t\t} else if (!cmdline.length) {} else {\n\t\t\t\tlet runFile;\n\t\t\t\ttry {\n\t\t\t\t\tif (!await availableAPIs.fs_isDirectory({ path: cmdline[0] })) runFile = cmdline[0];\n\t\t\t\t} catch {}\n\t\t\t\tfor (let path of pathsForBinaries) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet ls = await availableAPIs.fs_ls({ path });\n\t\t\t\t\t\tif (ls.includes(cmdline[0]) || ls.includes(cmdline[0] + \".js\")) {\n\t\t\t\t\t\t\tlet extensioned = ls.includes(cmdline[0] + \".js\")\n\t\t\t\t\t\t\trunFile = path + \"/\" + cmdline[0] + (extensioned ? \".js\" : \"\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {}\n\t\t\t\t}\n\t\t\t\tif (runFile) {\n\t\t\t\t\tif (user_spawn_token) {\n\t\t\t\t\t\tlet forkedToken = await availableAPIs.forkToken(user_spawn_token);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\totherProcessAttached = true;\n\t\t\t\t\t\t\tlet spawnedTask = await availableAPIs.startTask({\n\t\t\t\t\t\t\t\tfile: runFile,\n\t\t\t\t\t\t\t\targPassed: cmdline.slice(1),\n\t\t\t\t\t\t\t\trunInBackground: !graphic,\n\t\t\t\t\t\t\t\tsilent: true,\n\t\t\t\t\t\t\t\ttoken: forkedToken\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.waitForOtherCLI({ taskId: spawnedTask, bypass: forkedToken });\n\t\t\t\t\t\t\totherProcessAttached = spawnedTask;\n\t\t\t\t\t\t\t(async function() {\n\t\t\t\t\t\t\t\twhile (otherProcessAttached) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tlet otherData = await availableAPIs.getOtherCLIData({ taskId: spawnedTask, bypass: forkedToken });\n\t\t\t\t\t\t\t\t\t\tif (otherData.type == \"write\") availableAPIs.toMyCLI(otherData.data);\n\t\t\t\t\t\t\t\t\t\telse if (otherData.type == \"consoleClear\") availableAPIs.clearMyCLI();\n\t\t\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t\tawait availableAPIs.waitTermination(spawnedTask);\n\t\t\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\t\t\tawait availableAPIs.toMyCLI(runFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else await availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"REAL_TERMINAL_LOGON_REQUIRED\")).replace(\"%s\", default_user) + \"\\r\\n\");\n\t\t\t\t} else await availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"TERM_COMMAND_NOT_FOUND\")).replace(\"%s\", cmdline[0]) + \"\\r\\n\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tdefault_user = await window.availableAPIs.getUser();\n\t\t\t} catch {}\n\t\t\tawait availableAPIs.toMyCLI(default_user + (privileges.includes(\"FS_BYPASS_PERMISSIONS\") ? \"#\" : \"$\") + \" \");\n\t\t\treturn;\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(hideInput ? hideInputMask : e);\n\t\t\t}\n\t\t}\n\t});\n})(); \n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\ttry { await availableAPIs.revokeToken(user_spawn_token); } catch {}\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","72f16af65c74c614ee2bdb3724a45ed2f5138d8bdaab1618259ea53937814a91093bfea87bd3a3e7085a357bf2945414bafebc5e6db3f357ad79e6c7a994802e":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SYSTEM_UPTIME\n// signature: 511290548b06b3a84335b38c026f2deae9939db861719a48b8e0255517d62bfaf1d2c90423a66bdb6b11f759fb721b6da25ba371e2c016e731ba254528feaac7\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"uptime: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.ufTimeInc([ await availableAPIs.systemUptime() ]) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"uptime: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","816034755e3ec3177ca879c9d486bb65612ff61b027a28d81a3ae4fb4c046dedf734cc5af5aa06d9084ea81efb3bce6eccf73d3e3615f442ca07a7f0cfb7284e":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_WRITE, FS_BYPASS_PERMISSIONS\n// signature: fd92cdb7808babddd8d97d8dfafa12ac6e1c6f16c9c918c4462598c7017ce111f15454624cde6ad3b8bfd5325fc178171b9649e0615379b84a1dc8f24accb34f\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"write: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"WRITE_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"WRITE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"write: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: exec_args[0],\n\t\t\tdata: exec_args[1]\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"write: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1315","when":1750514812236,"signer":"moduleSigner","critical":true,"signature":"768fc9af4147058414cb33f2aebe83ca89d6bd00b5ca165a3e35adc9a82014db04a764e00317eebc526b2daf9ac58ecd348c5868b9b7b35570f52229471c20ee"}}