{"backend":{"files":{"apps":{"batteryinfo.js":"5661826687a4737c7f2f342dff8b374fc1ad7996bc6d0272e608ef9c5564de41e20d07dcd69a1ec8f5ba2c1c19b4086710bb50a94976cb5c36fe558e6a556ad4","cat.js":"7e0025c9adfeb05f0d0cc82b4e6def7e3af7929d07fe1be4f6777ea5692d3342075c02a6fb014be95eecd92b704a092cff830a46cd072ce35d280ad907c4d945","chgrp.js":"2b708c23bd374130949f40166417c3046f553cc79d8e3a5018cb76171360a77374c6f43eae6107ab684977a237c307868ff3e1ed64dfa988ad64d1fde5df7965","chmod.js":"4bc88f997f7256419d44f3f99ed7e8c5265dbc2efb91eeacd6f2a278a8c9421c37132181ddf70cca8b517e0b9a525ebe6b9437cb21d2d0f5a594468af8e9e19c","chown.js":"6d5f063aab7a25afd096847e81114ddc263a2b8938b695ac2f89dae7b7c5bf640d712986261eaa0daa0e252131d1f02b5a17f850033f2d63fa264ca67c97410a","cp.js":"9fb7c040173e211463d24b5f0460240f848fa242159e1f30f701fa9b340b14cfff6ff6ed70cf7d3ad92a13420aef4e3aa2c4afc35c1edca5627bd8a773150567","date.js":"b6e0cc90947933514557a0abebaad30a641eaf8d3d992c9d1513ae64d40118177f49e5ff032d5b2ea0903a9d0aeb7ae182b59d58977ef8191a0f31e5bc20862d","diff.js":"c81f6238997a8136ac8fb924987d70abf0dca56941793f2f7d587c7381c604c228a1097c3b5eb309f2c8e9a4f8ca89e2e47f4ebba089e875540ff9a21c91fe5d","links":{"terminal.lnk":"c5c5eabf9e3ebaffd462157d52dcb4c1ccab48adcba385de16a68e721f869c5c8af92df7962d2954e490339030ba614f55633d4e2d7e44fe197a5b61b404d724"},"ls.js":"89fec62035acd692d891eb77a3fb5f033b4167c4024bb6344b3a9f36e35760d7c51c8b06cbccc6eab86bf1bde2b978b73d95ba3f842672a651ed652f5e32e563","mkdir.js":"29e72e70757dae519b82545a2cbfaaa9b9542555b75085b024d1b508f5e7ae859451b4259927575de5bfaf7d74d4e9ee7bd67297641eec96a11506b5e9d3455c","patch.js":"105d04a1bcad334d31169c9144ec95e31b23356c40fbc000e6ade36f6bfd774ed1644b258fbbecfec4a3be095c9243543a8eea5a9ae706e4ec77eb6b3f5d3949","power.js":"0be659ee9d57996b17448cd12f96004d182d8693a0c18995476447482001aafb9d87cca78ee63ac4cbc07fb7624c98c7d44cc2f91e048a8518f41bc0e87ff902","rm.js":"bd2f5ba609d8cfeab63326ca053abeae4b13287f5e0fbba6cd4a57d2199a37710d0bfb6c3cf04714639b4c5db39e16215ac92df5a7d4940de07c6e2048a901d8","runKlvlCode.js":"13303ad347a3998da40ca0f61d1a320a66324421373dd43f7854ce4033b2d4ebdc4262e5be9de1d772f92a5a3bf839e16d3b4ac95da022ed1c609c6a8a1b103e","terminal.js":"01bfa276e25886d6c75b5d21a2161e8e65077514cd9171d7554095f745f0e0af8884cf279b26533de0e6b8ebc1fe3a13b5295038c3f6c956ad009761f518244a","uptime.js":"bdb3eb8ad43ffc6eddc80ee2875d45e2af0fd65b2b03ac71cf2348a0f39ba1ade1795b90642013b8f81266e1dad61c74001aeae918948a910254e2c780bca22f","write.js":"d73b74228de2ee4e24141e898f1fbd3c836e4763237102ee7c6fc1b813a6f1853f9a6605f03e13e169461562cc35c0bee097c15d805cedcdb3c7a485a30df1f3"}},"permissions":{"apps/batteryinfo.js":{"world":"rx"},"apps/cat.js":{"world":"rx"},"apps/chgrp.js":{"world":"rx"},"apps/chmod.js":{"world":"rx"},"apps/chown.js":{"world":"rx"},"apps/cp.js":{"world":"rx"},"apps/date.js":{"world":"rx"},"apps/diff.js":{"world":"rx"},"apps/links/terminal.lnk":{"world":"rx"},"apps/links/":{"world":"rx"},"apps/ls.js":{"world":"rx"},"apps/mkdir.js":{"world":"rx"},"apps/patch.js":{"world":"rx"},"apps/power.js":{"world":"rx"},"apps/rm.js":{"world":"rx"},"apps/runKlvlCode.js":{"world":"rx"},"apps/terminal.js":{"world":"rx"},"apps/uptime.js":{"world":"rx"},"apps/write.js":{"world":"rx"},"apps/":{"world":"rx"},"":{"world":"rx"}}},"files":{"5661826687a4737c7f2f342dff8b374fc1ad7996bc6d0272e608ef9c5564de41e20d07dcd69a1ec8f5ba2c1c19b4086710bb50a94976cb5c36fe558e6a556ad4":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, GET_BATTERY_STATUS\n// signature: 63c2385b0c8e8faf2efe75b3ee6a1131c544e48d3538137cb7fea33a479d27c77866da97f0130631fc75b1ffdb929f356579bb6f481143110cf86b2bf2629da1\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"batteryinfo: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n    \n\ttry {\n\t\tlet batteryStatus = await availableAPIs.batteryStatus();\n\t\tif (exec_args[0] == \"--robot\") await availableAPIs.toMyCLI(JSON.stringify(batteryStatus, null, \"\\t\").replaceAll(\"\\n\", \"\\r\\n\") + \"\\r\\n\");\n\t\telse await availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"BATTERY_STATUS_\" + (batteryStatus.charging ? \"CHARGING\" : \"DISCHARGING\")))\n\t\t\t.replace(\"%s\", (batteryStatus.level * 100).toFixed(2))\n\t\t\t.replace(\"%s\", await availableAPIs.ufTimeInc([\n\t\t\t\t(batteryStatus.charging ? batteryStatus.chargingTime : batteryStatus.dischargingTime) * 1000\n\t\t\t])) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"batteryinfo: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); ","7e0025c9adfeb05f0d0cc82b4e6def7e3af7929d07fe1be4f6777ea5692d3342075c02a6fb014be95eecd92b704a092cff830a46cd072ce35d280ad907c4d945":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS\n// signature: 13e2a7b10489989f3ec8324623d11eb4d8033c2a0ec2b6b75664aae7afe1de97c6e638cd4a67e73e70a17694460e9a1ed51b7f08d9d55d7ad62aeb9eaf815a49\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"cat: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CAT_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CAT_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"cat: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tfor (let file of exec_args) {\n\t\ttry {\n\t\t\tlet data = await availableAPIs.fs_read({ path: file });\n\t\t\tawait availableAPIs.toMyCLI(data);\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"cat: \" + file + \": \" + await availableAPIs.lookupLocale(e.message));\n\t\t}\n\t}\n\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","2b708c23bd374130949f40166417c3046f553cc79d8e3a5018cb76171360a77374c6f43eae6107ab684977a237c307868ff3e1ed64dfa988ad64d1fde5df7965":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: b12191b84ab3a4092f80dd424c0a20b6b5c6cc1d46cf3629a10210290e7f39d1cc28226b1e9b591418ba98017d3e9dc9fb41d586d88a4b1ebe880e35ec786f96\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chgrp: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHGRP_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHGRP_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chgrp: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chgrp({ path: exec_args[1], newGrp: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chgrp: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message)) + \"\\r\\n\";\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","4bc88f997f7256419d44f3f99ed7e8c5265dbc2efb91eeacd6f2a278a8c9421c37132181ddf70cca8b517e0b9a525ebe6b9437cb21d2d0f5a594468af8e9e19c":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: 586db766e80787bdb211c3b93f92f30314ac8f29317f80584fd2306120db015f4eb129bf4ad6d82fdd7f7b36a4d1e971e0e6726841a9ed7e2177d34134e5ca36\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chmod: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHMOD_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHMOD_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CHMOD_MODE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CHMOD_MODE_CONVERT\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chmod: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chmod({ path: exec_args[1], newPermissions: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chmod: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","6d5f063aab7a25afd096847e81114ddc263a2b8938b695ac2f89dae7b7c5bf640d712986261eaa0daa0e252131d1f02b5a17f850033f2d63fa264ca67c97410a":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_CHANGE_PERMISSION, FS_BYPASS_PERMISSIONS\n// signature: a87d8a67a656db55ba40af5a760634355e98ca43c3b137262ae70728bdf1619c531a9ab9b4126d1069cd8904781a8fe17754def5db504d5ab90bfd3d234cf421\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"chown: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHOWN_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CHOWN_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"chown: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_chown({ path: exec_args[1], newUser: exec_args[0] });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"chown: \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","9fb7c040173e211463d24b5f0460240f848fa242159e1f30f701fa9b340b14cfff6ff6ed70cf7d3ad92a13420aef4e3aa2c4afc35c1edca5627bd8a773150567":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION\n// signature: abb152224f9ac6ea75194291a1dc742069bb87ba4a7ad30d44667f50f676051ab3cc2966f1724ee4cda3f03c00029a8e14a9662273c5fd0e20fa0bb616dea2d7\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"cp: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CP_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"CP_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_RECURSIVE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_FORCE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"CP_PERMISSIONS_OPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet recursive = exec_args.includes(\"--recursive\");\n\tlet force = exec_args.includes(\"--force\");\n\tlet permissions = exec_args.includes(\"--permissions\");\n\tif (recursive) exec_args.splice(exec_args.indexOf(\"--recursive\"), 1);\n\tif (force) exec_args.splice(exec_args.indexOf(\"--force\"), 1);\n\tif (permissions) exec_args.splice(exec_args.indexOf(\"--permissions\"), 1);\n\tif (exec_args.length != 2) {\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tif (recursive) await recursiveCopy(exec_args[0], exec_args[1], force, permissions);\n\telse {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_write({\n\t\t\t\tpath: exec_args[1],\n\t\t\t\tdata: await availableAPIs.fs_read({ path: exec_args[0] })\n\t\t\t});\n\t\t\tif (permissions) {\n\t\t\t\tlet originalPermissions = await availableAPIs.fs_permissions({ path: exec_args[0] });\n\t\t\t\tawait availableAPIs.fs_chmod({ path: exec_args[1], newPermissions: originalPermissions.world });\n\t\t\t\tawait availableAPIs.fs_chgrp({ path: exec_args[1], newGrp: originalPermissions.group });\n\t\t\t\tawait availableAPIs.fs_chown({ path: exec_args[1], newUser: originalPermissions.user });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"cp: \" + exec_args[0] + \" -> \" + exec_args[1] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\n\nasync function recursiveCopy(source, destination, force, permissions) {\n\ttry {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_mkdir({ path: destination });\n\t\t} catch {}\n\t\tfor (let sourceFile of await availableAPIs.fs_ls({ path: source })) {\n\t\t\tlet destinationFile = destination + \"/\" + sourceFile;\n\t\t\ttry {\n\t\t\t\tif (await availableAPIs.fs_isDirectory({ path: source + \"/\" + sourceFile }))\n\t\t\t\t\tawait recursiveCopy(source + \"/\" + sourceFile, destinationFile, force, permissions);\n\t\t\t\telse {\n\t\t\t\t\tawait availableAPIs.fs_write({\n\t\t\t\t\t\tpath: destinationFile,\n\t\t\t\t\t\tdata: await availableAPIs.fs_read({ path: source + \"/\" + sourceFile })\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (permissions) {\n\t\t\t\t\tlet originalPermissions = await availableAPIs.fs_permissions({ path: source + \"/\" + sourceFile });\n\t\t\t\t\tawait availableAPIs.fs_chmod({ path: destinationFile, newPermissions: originalPermissions.world });\n\t\t\t\t\tawait availableAPIs.fs_chgrp({ path: destinationFile, newGrp: originalPermissions.group });\n\t\t\t\t\tawait availableAPIs.fs_chown({ path: destinationFile, newUser: originalPermissions.owner });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tawait availableAPIs.toMyCLI(\"cp: \" + source + \"/\" + sourceFile + \" -> \" + destinationFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\tif (!force) return await availableAPIs.terminate();\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"cp: \" + source + \" -> \" + destination + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\tif (!force) return await availableAPIs.terminate();\n\t}\n}\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","b6e0cc90947933514557a0abebaad30a641eaf8d3d992c9d1513ae64d40118177f49e5ff032d5b2ea0903a9d0aeb7ae182b59d58977ef8191a0f31e5bc20862d":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: NONE\n// signature: 4acb711a74838be2b4a90192546a56d9613a24bab1feca537d57917b6fb74f0e194a6359599d4f40c0add14acc0f4636bf70e3d02acf6217dc776dae3ed9f1d6\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tawait availableAPIs.toMyCLI(new Date().toString() + \"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","c81f6238997a8136ac8fb924987d70abf0dca56941793f2f7d587c7381c604c228a1097c3b5eb309f2c8e9a4f8ca89e2e47f4ebba089e875540ff9a21c91fe5d":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, PATCH_DIFF\n// signature: 6e9e74cba88d6396d21fe819e734f9be75fc9094ceda4e0887a992af2df7f1d246f9348a5f60c04de5d1d899452bb8c6d6d56aa9134453fa98aa85749f963a3b\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"diff: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DIFF_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"DIFF_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.length != 3) {\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: exec_args[2],\n\t\t\tdata: JSON.stringify(await availableAPIs.patchDiff({\n\t\t\t\toperation: \"calcPatch\",\n\t\t\t\targs: [ await availableAPIs.fs_read({ path: exec_args[0] }), await availableAPIs.fs_read({ path: exec_args[1] }) ]\n\t\t\t}))\n\t\t})\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"diff: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","c5c5eabf9e3ebaffd462157d52dcb4c1ccab48adcba385de16a68e721f869c5c8af92df7962d2954e490339030ba614f55633d4e2d7e44fe197a5b61b404d724":"{\"path\":\"system/apps/terminal.js\",\"localeReferenceName\":\"REAL_TERMINAL_NAME\"}","89fec62035acd692d891eb77a3fb5f033b4167c4024bb6344b3a9f36e35760d7c51c8b06cbccc6eab86bf1bde2b978b73d95ba3f842672a651ed652f5e32e563":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, FS_LIST_PARTITIONS\n// signature: 9b434c9eff412d3553eff757a26dbec9f6e12bc991eb0a617ed7ba8a20debb1e9be8c49cf7c0c21ab6f4a683c026c2072a691814a981d7a028f4495ed35734f2\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"ls: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_DESCRIPTION\") + \"\\r\\n\");\n\t\tlet sysmount = await availableAPIs.getSystemMount();\n\t\tlet systemLocale = await availableAPIs.lookupLocale(\"MOUNTPOINT_SYSTEM\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"LS_MOUNTPOINT_LIST\") + (await availableAPIs.fs_mounts()).map(a => sysmount == a ? (a + \" [\" + systemLocale + \"]\") : a).join(\", \") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"ls: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tfor (let file of exec_args) {\n\t\ttry {\n\t\t\tlet data = await availableAPIs.fs_ls({ path: file });\n\t\t\tawait availableAPIs.toMyCLI(data.map(a => JSON.stringify(a)).join(\"\\r\\n\") + \"\\r\\n\");\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"ls: \" + file + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","29e72e70757dae519b82545a2cbfaaa9b9542555b75085b024d1b508f5e7ae859451b4259927575de5bfaf7d74d4e9ee7bd67297641eec96a11506b5e9d3455c":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_WRITE, FS_BYPASS_PERMISSIONS\n// signature: 6d9450005382bf74fbc5959006b3950db8890a3d0ea5be1b980dd522150aba9a9f8bec529a8007f47d9244f4fc433edc6c1bb93248e4a776f0f368d19892279e\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"mkdir: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"MKDIR_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"MKDIR_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"mkdir: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_mkdir({\n\t\t\tpath: exec_args[0]\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"mkdir: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","105d04a1bcad334d31169c9144ec95e31b23356c40fbc000e6ade36f6bfd774ed1644b258fbbecfec4a3be095c9243543a8eea5a9ae706e4ec77eb6b3f5d3949":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_WRITE, FS_BYPASS_PERMISSIONS, PATCH_DIFF\n// signature: 114db4feed60c4aa1b0b9e9df697efd50afcffd9915d69cc747737421357ccab7fe6deb28ab00509b57ac1c39a912bccf3344e22cd286967010a89469977a526\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"patch: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PATCH_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"PATCH_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tif (exec_args.length != 3) {\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n    try {\n        await availableAPIs.fs_write({\n            path: exec_args[2],\n            data: (await availableAPIs.patchDiff({\n                operation: \"applyPatch\",\n                args: [ await availableAPIs.fs_read({ path: exec_args[0] }), JSON.parse(await availableAPIs.fs_read({ path: exec_args[1] })) ]\n            })).join(\"\")\n        })\n    } catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"patch: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n    }\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","0be659ee9d57996b17448cd12f96004d182d8693a0c18995476447482001aafb9d87cca78ee63ac4cbc07fb7624c98c7d44cc2f91e048a8518f41bc0e87ff902":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SYSTEM_SHUTDOWN\n// signature: be063ce112ad07a0e5465133f60b6542897a1df9e2b29fe8614a9ebf7eebdef3371e39131295a05002146dd3ef64f88bc96f277d77b61b3e3d00cfe7d6a0169f\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"power: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tawait availableAPIs.attachCLI();\n\tlet pargs = {};\n\tlet ppos = [];\n\tfor (let arg of exec_args) {\n\t\tif (arg.startsWith(\"--\")) {\n\t\t\tlet key = arg.split(\"=\")[0].slice(2);\n\t\t\tlet value = arg.split(\"=\").slice(1).join(\"=\");\n\t\t\tif (arg.split(\"=\")[1] == null) value = true;\n\t\t\tif (pargs.hasOwnProperty(key)) {\n\t\t\t\tlet ogValues = pargs[key];\n\t\t\t\tif (ogValues instanceof Array) pargs[key] = [ ...ogValues, value ];\n\t\t\t\telse pargs[key] = [ ogValues, value ];\n\t\t\t} else pargs[key] = value;\n\t\t} else ppos.push(arg);\n\t}\n\n\tif (pargs.help) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"POWER_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"POWER_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"POWER_FORCE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"POWER_KEXEC\") + \"\\r\\n\");\n\t\tawait availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.shutdown({\n\t\t\tisReboot: ppos[0] == \"reboot\" || ppos[0] == \"r\" || ppos[0] == \"restart\" || ppos[0] == \"kexec\" || ppos[0] == \"k\" || pargs.kexec,\n\t\t\tisKexec: pargs.kexec || ppos[0] == \"kexec\" || ppos[0] == \"k\",\n\t\t\tforce: pargs.force\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"power: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","bd2f5ba609d8cfeab63326ca053abeae4b13287f5e0fbba6cd4a57d2199a37710d0bfb6c3cf04714639b4c5db39e16215ac92df5a7d4940de07c6e2048a901d8":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, FS_CHANGE_PERMISSION, FS_REMOVE\n// signature: b5a7e413b3da782cea73c518422db0a9622324216327eb836678effa0e2c33a04591dc015bbed868a205fa9b61f63aaa175afbc5442c2113a9651744e62477b3\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"rm: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RM_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RM_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_RECURSIVE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"\\t\" + await availableAPIs.lookupLocale(\"OPT_FORCE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\tlet recursive = exec_args.includes(\"--recursive\");\n\tlet force = exec_args.includes(\"--force\");\n\tif (recursive) exec_args.splice(exec_args.indexOf(\"--recursive\"), 1);\n\tif (force) exec_args.splice(exec_args.indexOf(\"--force\"), 1);\n\tif (exec_args.length != 1) {\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + await availableAPIs.lookupLocale(\"ARGUMENT_COUNT_MISMATCH\") + \"\\r\\n\");\n\t\treturn await availableAPIs.terminate();\n\t}\n\tif (recursive) await recursiveRemove(exec_args[0], force);\n\telse {\n\t\ttry {\n\t\t\tawait availableAPIs.fs_rm({ path: exec_args[0] });\n\t\t} catch (e) {\n\t\t\tawait availableAPIs.toMyCLI(\"rm: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t}\n\t}\n\tawait availableAPIs.terminate();\n})();\n\nasync function recursiveRemove(target, force) {\n\ttry {\n\t\tfor (let targetFile of await availableAPIs.fs_ls({ path: target })) {\n\t\t\ttargetFile = target + \"/\" + targetFile;\n\t\t\ttry {\n\t\t\t\tif (await availableAPIs.fs_isDirectory({ path: targetFile })) await recursiveRemove(targetFile, force);\n\t\t\t\telse await availableAPIs.fs_rm({ path: targetFile });\n\t\t\t} catch (e) {\n\t\t\t\tawait availableAPIs.toMyCLI(\"rm: \" + targetFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\tif (!force) return await availableAPIs.terminate();\n\t\t\t}\n\t\t}\n\t\tawait availableAPIs.fs_rm({ path: target });\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"rm: \" + target + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\tif (!force) return await availableAPIs.terminate();\n\t}\n}\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","13303ad347a3998da40ca0f61d1a320a66324421373dd43f7854ce4033b2d4ebdc4262e5be9de1d772f92a5a3bf839e16d3b4ac95da022ed1c609c6a8a1b103e":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_READ, FS_BYPASS_PERMISSIONS, RUN_KLVL_CODE\n// signature: 70a7bfc8dcb9070c436041beee39670a6b02948f9afc097da0f4effd14216bde5c5cee1a4bab617e6aefae178b998711341950b38b029e01c75389c1c8ff04c5\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"runKlvlCode: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RKL_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"RKL_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"runKlvlCode: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.toMyCLI(JSON.stringify(await availableAPIs.runKlvlCode(await availableAPIs.fs_read({ path: exec_args[0] }))) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"runKlvlCode: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","01bfa276e25886d6c75b5d21a2161e8e65077514cd9171d7554095f745f0e0af8884cf279b26533de0e6b8ebc1fe3a13b5295038c3f6c956ad009761f518244a":"// =====BEGIN MANIFEST=====\n// allow: GET_LOCALE, FS_LIST_PARTITIONS, FS_READ, MANAGE_TOKENS, ELEVATE_PRIVILEGES, FS_BYPASS_PERMISSIONS, START_TASK, START_BACKGROUND_TASK, CLI_MODIFICATIONS, GET_BUILD, LIST_TASKS, TASK_BYPASS_PERMISSIONS, CSP_OPERATIONS\n// link: lrn:REAL_TERMINAL_NAME\n// signer: automaticSigner\n// signature: 94bec0b1421703f48a24d8ac6c8485c9ec7ad52dea5cf5e4a9f7e06efdc11a9dce9ef387c585d4c24f9c31d0f9fd2f37f805913e5787ab2d72f88e043c6aee4d\n// =====END MANIFEST=====\nlet user_spawn_token = null;\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.attachCLI();\n\tlet privileges = await availableAPIs.getPrivileges();\n\tlet checklist = [ \"GET_LOCALE\", \"FS_LIST_PARTITIONS\", \"FS_READ\", \"MANAGE_TOKENS\", \"ELEVATE_PRIVILEGES\", \"START_TASK\", \"CLI_MODIFICATIONS\", \"GET_BUILD\", \"LIST_TASKS\", \"CSP_OPERATIONS\" ];\n\tprivileges = await availableAPIs.getPrivileges();\n\tif (!checklist.every(p => privileges.includes(p))) {\n\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\tawait availableAPIs.fromMyCLI();\n\t\treturn await availableAPIs.terminate();\n\t}\n\tawait window.availableAPIs.windowTitleSet(await availableAPIs.lookupLocale(\"REAL_TERMINAL_NAME\"));\n\t\n\tfunction parse_cmdline(cmdline) {\n\t\tvar re_next_arg = /^\\s*((?:(?:\"(?:\\\\.|[^\"])*\")|(?:'[^']*')|\\\\.|\\S)+)\\s*(.*)$/;\n\t\tvar next_arg = ['', '', cmdline];\n\t\tvar args = [];\n\t\twhile (next_arg = re_next_arg.exec(next_arg[2])) {\n\t\t\tvar quoted_arg = next_arg[1];\n\t\t\tvar unquoted_arg = \"\";\n\t\t\twhile (quoted_arg.length > 0) {\n\t\t\t\tif (/^\"/.test(quoted_arg)) {\n\t\t\t\t\tvar quoted_part = /^\"((?:\\\\.|[^\"])*)\"(.*)$/.exec(quoted_arg);\n\t\t\t\t\tunquoted_arg += quoted_part[1].replace(/\\\\(.)/g, \"$1\");\n\t\t\t\t\tquoted_arg = quoted_part[2];\n\t\t\t\t} else if (/^'/.test(quoted_arg)) {\n\t\t\t\t\tvar quoted_part = /^'([^']*)'(.*)$/.exec(quoted_arg);\n\t\t\t\t\tunquoted_arg += quoted_part[1];\n\t\t\t\t\tquoted_arg = quoted_part[2];\n\t\t\t\t} else if (/^\\\\/.test(quoted_arg)) {\n\t\t\t\t\tunquoted_arg += quoted_arg[1];\n\t\t\t\t\tquoted_arg = quoted_arg.substring(2);\n\t\t\t\t} else {\n\t\t\t\t\tunquoted_arg += quoted_arg[0];\n\t\t\t\t\tquoted_arg = quoted_arg.substring(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\targs[args.length] = unquoted_arg;\n\t\t}\n\t\treturn args;\n\t}\n\n\tlet str = \"\";\n\tlet default_user = await window.availableAPIs.getUser();\n\tlet defaultPath = await availableAPIs.getSystemMount() + \"/apps\";\n\tlet pathsForBinaries = [ defaultPath ];\n\tlet otherProcessAttached = false;\n\tlet graphic = false;\n\tlet su_stage = -1;\n\tlet suSession = null;\n\tlet hideInputMask = \"\";\n\tlet hideInput = false;\n\t\n\tasync function systemVersion() {\n\t\tawait availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"TERMINAL_INVITATION\")).replace(\"%s\", (await window.availableAPIs.getVersion())) + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"SYSTEM_BUILT_AT\")).replace(\"%s\", (new Date(await window.availableAPIs.getBuildTime())).toISOString()) + \"\\r\\n\");\t\n\t}\n\n\tawait systemVersion();\n\tawait availableAPIs.toMyCLI(\"\\r\\n\" + default_user + (privileges.includes(\"FS_BYPASS_PERMISSIONS\") ? \"#\" : \"$\") + \" \");\n\t\n\tonTermData(async function self(e, why) {\n\t\tif (otherProcessAttached) return await availableAPIs.typeIntoOtherCLI({\n\t\t\ttaskId: otherProcessAttached,\n\t\t\ttext: e,\n\t\t\thuman: true\n\t\t});\n\t\tif (e == \"\\r\") {\n\t\t\tif (why != \"su\") await availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\tif (su_stage > -1) {\n\t\t\t\tif (su_stage == 0) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsuSession = await availableAPIs.automatedLogonCreate({ desiredUser: str });\n\t\t\t\t\t\tsu_stage = 1;\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tsu_stage = -1;\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tstr = \"\";\n\t\t\t\t}\n\t\t\t\twhile (su_stage >= 1) {\n\t\t\t\t\totherProcessAttached = true;\n\t\t\t\t\tif (su_stage == 2) {\n\t\t\t\t\t\tlet prompt = await availableAPIs.automatedLogonGet(suSession);\n\t\t\t\t\t\tif (prompt.type == \"zkpp_password\") {\n\t\t\t\t\t\t\tlet passwordAsKey = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"importKey\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\tformat: \"raw\",\n\t\t\t\t\t\t\t\t\tkeyData: new TextEncoder().encode(str),\n\t\t\t\t\t\t\t\t\talgorithm: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\textractable: false,\n\t\t\t\t\t\t\t\t\tkeyUsages: [\"deriveBits\"]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tlet rngSeed = await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"deriveBits\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\talgorithm: {\n\t\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\t\t\t\t\t\tsalt: new Uint8Array(32),\n\t\t\t\t\t\t\t\t\t\titerations: 100000,\n\t\t\t\t\t\t\t\t\t\thash: \"SHA-256\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbaseKey: passwordAsKey,\n\t\t\t\t\t\t\t\t\tlength: 256\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"basic\",\n\t\t\t\t\t\t\t\toperation: \"unloadKey\",\n\t\t\t\t\t\t\t\tcspArgument: passwordAsKey\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet u8aToHex = (u8a) => Array.from(u8a).map(a => a.toString(16).padStart(2, \"0\")).join(\"\");\n\t\t\t\t\t\t\tlet hexToU8A = (hex) => Uint8Array.from(hex.match(/.{1,2}/g).map(a => parseInt(a, 16)));\n\t\t\t\t\t\t\tawait availableAPIs.automatedLogonInput({ session: suSession, input: u8aToHex(await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\tcspProvider: \"tweetnacl\",\n\t\t\t\t\t\t\t\toperation: \"sign\",\n\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\tsecretKey: (await availableAPIs.cspOperation({\n\t\t\t\t\t\t\t\t\t\tcspProvider: \"tweetnacl\",\n\t\t\t\t\t\t\t\t\t\toperation: \"deriveKey\",\n\t\t\t\t\t\t\t\t\t\tcspArgument: {\n\t\t\t\t\t\t\t\t\t\t\ttype: \"sign\",\n\t\t\t\t\t\t\t\t\t\t\tseed: new Uint8Array(rngSeed)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})).secretKey,\n\t\t\t\t\t\t\t\t\tmessage: hexToU8A(prompt.challenge)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}))});\n\t\t\t\t\t\t} else await availableAPIs.automatedLogonInput({ session: suSession, input: str });\n\t\t\t\t\t}\n\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\thideInput = false;\n\t\t\t\t\thideInputMask = \"\";\n\t\t\t\t\tlet prompt = await availableAPIs.automatedLogonGet(suSession);\n\t\t\t\t\tawait availableAPIs.toMyCLI(prompt.message);\n\t\t\t\t\tsu_stage = 2;\n\t\t\t\t\tif (prompt.success != \"intermediate\") {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\t\t\t\tsu_stage = -1;\n\t\t\t\t\t\tif (prompt.success) {\n\t\t\t\t\t\t\tuser_spawn_token = prompt.token;\n\t\t\t\t\t\t\tlet processToken = await availableAPIs.getProcessToken();\n\t\t\t\t\t\t\tawait availableAPIs.setProcessToken(await availableAPIs.forkToken(user_spawn_token));\n\t\t\t\t\t\t\tprivileges = await availableAPIs.getPrivileges();\n\t\t\t\t\t\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\t\t\t\t\t\t\tawait availableAPIs.fromMyCLI();\n\t\t\t\t\t\t\t\treturn await availableAPIs.terminate();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tawait availableAPIs.revokeToken(processToken);\n\t\t\t\t\t\t\tawait availableAPIs.automatedLogonDelete(suSession);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (prompt.wantsUserInput || prompt.type == \"informative\") {\n\t\t\t\t\t\tif (prompt.wantsUserInput) await availableAPIs.toMyCLI(\": \");\n\t\t\t\t\t\thideInput = prompt.type == \"password\" || prompt.type == \"informative\" || prompt.type == \"zkpp_password\";\n\t\t\t\t\t\thideInputMask = (prompt.type == \"password\" || prompt.type == \"zkpp_password\") ? \"*\" : \"\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (su_stage != -1) await availableAPIs.toMyCLI(\"\\r\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet cmdline = [];\n\t\t\ttry {\n\t\t\t\tcmdline = parse_cmdline(str);\n\t\t\t} catch {\n\t\t\t\tawait availableAPIs.toMyCLI(\"> \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstr = \"\";\n\t\t\tif (cmdline[0] == \"sugraph\") {\n\t\t\t\totherProcessAttached = true;\n\t\t\t\tlet authui = await availableAPIs.consentGetToken({\n\t\t\t\t\tintent: await availableAPIs.lookupLocale(\"REAL_TERMINAL_INTENT\"),\n\t\t\t\t\tname: await availableAPIs.lookupLocale(\"REAL_TERMINAL_NAME\"),\n\t\t\t\t\tdesiredUser: cmdline[1]\n\t\t\t\t});\n\t\t\t\tif (authui) {\n\t\t\t\t\tuser_spawn_token = authui;\n\t\t\t\t\tlet processToken = await availableAPIs.getProcessToken();\n\t\t\t\t\tawait availableAPIs.setProcessToken(await availableAPIs.forkToken(user_spawn_token));\n\t\t\t\t\tprivileges = await availableAPIs.getPrivileges();\n\t\t\t\t\tif (!checklist.every(p => privileges.includes(p))) {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(\"terminal: Critical permissions were denied. Press any key to exit.\\r\\n\");\n\t\t\t\t\t\tawait availableAPIs.fromMyCLI();\n\t\t\t\t\t\treturn await availableAPIs.terminate();\n\t\t\t\t\t}\n\t\t\t\t\tawait availableAPIs.revokeToken(processToken);\n\t\t\t\t} else await availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\totherProcessAttached = false;\n\t\t\t} else if (cmdline[0] == \"su\") {\n\t\t\t\tif (!cmdline[1]) {\n\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"USERNAME\") + \": \");\n\t\t\t\t\treturn su_stage = 0;\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsuSession = await availableAPIs.automatedLogonCreate({ desiredUser: cmdline[1] });\n\t\t\t\t\t\tsu_stage = 1;\n\t\t\t\t\t\treturn self(\"\\r\", \"su\");\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"AUTH_FAILED\") + \"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (cmdline[0] == \"graphic\") {\n\t\t\t\tif (!cmdline[1]) await availableAPIs.toMyCLI(\"graphic: \" + graphic + \"\\r\\n\");\n\t\t\t\telse {\n\t\t\t\t\tgraphic = cmdline[1] == \"true\" || cmdline[1] == \"on\" || cmdline[1] == \"1\" || cmdline[1] == \"yes\" || cmdline[1] == \"enable\";\n\t\t\t\t}\n\t\t\t} else if (cmdline[0] == \"pushpath\") {\n\t\t\t\tif (cmdline[1]) pathsForBinaries.push(cmdline[1]);\n\t\t\t} else if (cmdline[0] == \"resetpath\") {\n\t\t\t\tpathsForBinaries = [ defaultPath ];\n\t\t\t} else if (cmdline[0] == \"lspath\") {\n\t\t\t\tawait availableAPIs.toMyCLI(pathsForBinaries.map(a => JSON.stringify(a)).join(\", \") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"REAL_TERMINAL_DEFAULT_PATH_FIELD\")).replace(\"%s\", JSON.stringify(defaultPath)) + \"\\r\\n\");\n\t\t\t} else if (cmdline[0] == \"clear\") await availableAPIs.clearMyCLI();\n\t\t\telse if (cmdline[0] == \"exit\") await availableAPIs.terminate();\n\t\t\telse if (cmdline[0] == \"ver\") await systemVersion();\n\t\t\telse if (cmdline[0] == \"help\") {\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_BUILTIN_LIST\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_VER_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_HELP_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_CLEAR_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_SUGRAPH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_SU_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_GRAPHIC_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_PUSHPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_RESETPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_LSPATH_USEDESC\") + \"\\r\\n\");\n\t\t\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"REAL_TERMINAL_EXIT_USEDESC\") + \"\\r\\n\");\n\t\t\t} else if (!cmdline.length) {} else {\n\t\t\t\tlet runFile;\n\t\t\t\ttry {\n\t\t\t\t\tif (!await availableAPIs.fs_isDirectory({ path: cmdline[0] })) runFile = cmdline[0];\n\t\t\t\t} catch {}\n\t\t\t\tfor (let path of pathsForBinaries) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet ls = await availableAPIs.fs_ls({ path });\n\t\t\t\t\t\tif (ls.includes(cmdline[0]) || ls.includes(cmdline[0] + \".js\")) {\n\t\t\t\t\t\t\tlet extensioned = ls.includes(cmdline[0] + \".js\")\n\t\t\t\t\t\t\trunFile = path + \"/\" + cmdline[0] + (extensioned ? \".js\" : \"\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {}\n\t\t\t\t}\n\t\t\t\tif (runFile) {\n\t\t\t\t\tif (user_spawn_token) {\n\t\t\t\t\t\tlet forkedToken = await availableAPIs.forkToken(user_spawn_token);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\totherProcessAttached = true;\n\t\t\t\t\t\t\tlet spawnedTask = await availableAPIs.startTask({\n\t\t\t\t\t\t\t\tfile: runFile,\n\t\t\t\t\t\t\t\targPassed: cmdline.slice(1),\n\t\t\t\t\t\t\t\trunInBackground: !graphic,\n\t\t\t\t\t\t\t\tsilent: true,\n\t\t\t\t\t\t\t\ttoken: forkedToken\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait availableAPIs.waitForOtherCLI({ taskId: spawnedTask, bypass: forkedToken });\n\t\t\t\t\t\t\totherProcessAttached = spawnedTask;\n\t\t\t\t\t\t\t(async function() {\n\t\t\t\t\t\t\t\twhile (otherProcessAttached) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tlet otherData = await availableAPIs.getOtherCLIData({ taskId: spawnedTask, bypass: forkedToken });\n\t\t\t\t\t\t\t\t\t\tif (otherData.type == \"write\") availableAPIs.toMyCLI(otherData.data);\n\t\t\t\t\t\t\t\t\t\telse if (otherData.type == \"consoleClear\") availableAPIs.clearMyCLI();\n\t\t\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t\tawait availableAPIs.waitTermination(spawnedTask);\n\t\t\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\totherProcessAttached = false;\n\t\t\t\t\t\t\tawait availableAPIs.toMyCLI(runFile + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else await availableAPIs.toMyCLI((await availableAPIs.lookupLocale(\"REAL_TERMINAL_LOGON_REQUIRED\")).replace(\"%s\", default_user) + \"\\r\\n\");\n\t\t\t\t} else await availableAPIs.toMyCLI((await window.availableAPIs.lookupLocale(\"TERM_COMMAND_NOT_FOUND\")).replace(\"%s\", cmdline[0]) + \"\\r\\n\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tdefault_user = await window.availableAPIs.getUser();\n\t\t\t} catch {}\n\t\t\tawait availableAPIs.toMyCLI(default_user + (privileges.includes(\"FS_BYPASS_PERMISSIONS\") ? \"#\" : \"$\") + \" \");\n\t\t\treturn;\n\t\t} else if (e == '\\u007F') {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t\tawait availableAPIs.toMyCLI('\\b \\b');\n\t\t\t}\n\t\t} else {\n\t\t\tif (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\\u00a0') {\n\t\t\t\tstr += e;\n\t\t\t\tawait availableAPIs.toMyCLI(hideInput ? hideInputMask : e);\n\t\t\t}\n\t\t}\n\t});\n})(); \n\nasync function onTermData(listener) {\n\twhile (true) {\n\t\tlistener(await availableAPIs.fromMyCLI());\n\t}\n}\naddEventListener(\"signal\", async function(e) {\n\ttry { await availableAPIs.revokeToken(user_spawn_token); } catch {}\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","bdb3eb8ad43ffc6eddc80ee2875d45e2af0fd65b2b03ac71cf2348a0f39ba1ade1795b90642013b8f81266e1dad61c74001aeae918948a910254e2c780bca22f":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, SYSTEM_UPTIME\n// signature: 88ec0f66ea5ea901ef088f6680bb0e0573f1d96ae97be38a4d78beb8d9e2d4cb5c0d5aef50f26dea3474b3dc311823cc3a740582fb1864dec322a76023d60d16\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"uptime: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\ttry {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.ufTimeInc([ await availableAPIs.systemUptime() ]) + \"\\r\\n\");\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"uptime: \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;","d73b74228de2ee4e24141e898f1fbd3c836e4763237102ee7c6fc1b813a6f1853f9a6605f03e13e169461562cc35c0bee097c15d805cedcdb3c7a485a30df1f3":"// =====BEGIN MANIFEST=====\n// signer: automaticSigner\n// allow: GET_LOCALE, FS_WRITE, FS_BYPASS_PERMISSIONS\n// signature: ec9a04e4dc05b7845e75e30b6f1a82d4ab88cc0572705939d632e02f65f02c458b585be01d411ad05a563cb27ce717ebd75391f893209e9b4e8bde0feb11b8e2\n// =====END MANIFEST=====\n(async function() {\n\t// @pcos-app-mode isolatable\n\tawait availableAPIs.windowVisibility(false);\n\tawait availableAPIs.attachCLI();\n\tif (!(await availableAPIs.getPrivileges()).includes(\"GET_LOCALE\")) { await availableAPIs.toMyCLI(\"write: Locale permission denied\\r\\n\");\n\t\treturn await availableAPIs.terminate();\t}\n\tif (!exec_args.length) {\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"WRITE_USAGE\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(await availableAPIs.lookupLocale(\"WRITE_DESCRIPTION\") + \"\\r\\n\");\n\t\tawait availableAPIs.toMyCLI(\"write: \" + await availableAPIs.lookupLocale(\"NO_ARGUMENTS\") + \"\\r\\n\");\n\t\treturn availableAPIs.terminate();\n\t}\n\ttry {\n\t\tawait availableAPIs.fs_write({\n\t\t\tpath: exec_args[0],\n\t\t\tdata: exec_args[1]\n\t\t});\n\t} catch (e) {\n\t\tawait availableAPIs.toMyCLI(\"write: \" + exec_args[0] + \": \" + await availableAPIs.lookupLocale(e.message) + \"\\r\\n\");\n\t}\n\tawait availableAPIs.terminate();\n})();\n\naddEventListener(\"signal\", async function(e) {\n\tif (e.detail == 15) await window.availableAPIs.terminate();\n}); null;"},"buildInfo":{"for":"1313","when":1750500748452,"signer":"moduleSigner","critical":true,"signature":"b7fb06c90e90db5b1d517709f35ac44728dce8468f87f1dc7ccf77873ca76d7d47a1c8a73ef928fe8bb5ccdfe333f28ee14ba02c374a12ca34a694eb16364b3e"}}